//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: beer.proto

package beerproto_go

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AcidityUnitType int32

const (
	AcidityUnitType_NULL_ACIDITYUNITTYPE AcidityUnitType = 0
	AcidityUnitType_PH                   AcidityUnitType = 1
)

// Enum value maps for AcidityUnitType.
var (
	AcidityUnitType_name = map[int32]string{
		0: "NULL_ACIDITYUNITTYPE",
		1: "PH",
	}
	AcidityUnitType_value = map[string]int32{
		"NULL_ACIDITYUNITTYPE": 0,
		"PH":                   1,
	}
)

func (x AcidityUnitType) Enum() *AcidityUnitType {
	p := new(AcidityUnitType)
	*p = x
	return p
}

func (x AcidityUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcidityUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[0].Descriptor()
}

func (AcidityUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[0]
}

func (x AcidityUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AcidityUnitType.Descriptor instead.
func (AcidityUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{0}
}

type ViscosityUnitType int32

const (
	ViscosityUnitType_NULL_VISCOSITYUNITTYPE ViscosityUnitType = 0
	// cP
	ViscosityUnitType_CP ViscosityUnitType = 1
	// mPa-s
	ViscosityUnitType_MPAS ViscosityUnitType = 2
)

// Enum value maps for ViscosityUnitType.
var (
	ViscosityUnitType_name = map[int32]string{
		0: "NULL_VISCOSITYUNITTYPE",
		1: "CP",
		2: "MPAS",
	}
	ViscosityUnitType_value = map[string]int32{
		"NULL_VISCOSITYUNITTYPE": 0,
		"CP":                     1,
		"MPAS":                   2,
	}
)

func (x ViscosityUnitType) Enum() *ViscosityUnitType {
	p := new(ViscosityUnitType)
	*p = x
	return p
}

func (x ViscosityUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViscosityUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[1].Descriptor()
}

func (ViscosityUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[1]
}

func (x ViscosityUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ViscosityUnitType.Descriptor instead.
func (ViscosityUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{1}
}

type MassUnitType int32

const (
	MassUnitType_NULL_MASSUNITTYPE MassUnitType = 0
	// mg
	MassUnitType_MG MassUnitType = 1
	// g
	MassUnitType_G MassUnitType = 2
	// kg
	MassUnitType_KG MassUnitType = 3
	// lb
	MassUnitType_LB MassUnitType = 4
	// oz
	MassUnitType_OZ MassUnitType = 5
)

// Enum value maps for MassUnitType.
var (
	MassUnitType_name = map[int32]string{
		0: "NULL_MASSUNITTYPE",
		1: "MG",
		2: "G",
		3: "KG",
		4: "LB",
		5: "OZ",
	}
	MassUnitType_value = map[string]int32{
		"NULL_MASSUNITTYPE": 0,
		"MG":                1,
		"G":                 2,
		"KG":                3,
		"LB":                4,
		"OZ":                5,
	}
)

func (x MassUnitType) Enum() *MassUnitType {
	p := new(MassUnitType)
	*p = x
	return p
}

func (x MassUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MassUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[2].Descriptor()
}

func (MassUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[2]
}

func (x MassUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MassUnitType.Descriptor instead.
func (MassUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{2}
}

type UnitUnitType int32

const (
	UnitUnitType_NULL_UNITUNITTYPE UnitUnitType = 0
	// 1
	UnitUnitType_ONE UnitUnitType = 1
	// unit
	UnitUnitType_UNIT UnitUnitType = 2
	// each
	UnitUnitType_EACH UnitUnitType = 3
	// dimensionless
	UnitUnitType_DIMENSIONLESS UnitUnitType = 4
	// pkg
	UnitUnitType_PKG UnitUnitType = 5
)

// Enum value maps for UnitUnitType.
var (
	UnitUnitType_name = map[int32]string{
		0: "NULL_UNITUNITTYPE",
		1: "ONE",
		2: "UNIT",
		3: "EACH",
		4: "DIMENSIONLESS",
		5: "PKG",
	}
	UnitUnitType_value = map[string]int32{
		"NULL_UNITUNITTYPE": 0,
		"ONE":               1,
		"UNIT":              2,
		"EACH":              3,
		"DIMENSIONLESS":     4,
		"PKG":               5,
	}
)

func (x UnitUnitType) Enum() *UnitUnitType {
	p := new(UnitUnitType)
	*p = x
	return p
}

func (x UnitUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[3].Descriptor()
}

func (UnitUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[3]
}

func (x UnitUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitUnitType.Descriptor instead.
func (UnitUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{3}
}

type CultureBaseForm int32

const (
	CultureBaseForm_NULL_CULTUREBASEFORM CultureBaseForm = 0
	// liquid
	CultureBaseForm_LIQUID CultureBaseForm = 1
	// dry
	CultureBaseForm_DRY CultureBaseForm = 2
	// slant
	CultureBaseForm_SLANT CultureBaseForm = 3
	// culture
	CultureBaseForm_CULTURE CultureBaseForm = 4
	// dregs
	CultureBaseForm_DREGS CultureBaseForm = 5
)

// Enum value maps for CultureBaseForm.
var (
	CultureBaseForm_name = map[int32]string{
		0: "NULL_CULTUREBASEFORM",
		1: "LIQUID",
		2: "DRY",
		3: "SLANT",
		4: "CULTURE",
		5: "DREGS",
	}
	CultureBaseForm_value = map[string]int32{
		"NULL_CULTUREBASEFORM": 0,
		"LIQUID":               1,
		"DRY":                  2,
		"SLANT":                3,
		"CULTURE":              4,
		"DREGS":                5,
	}
)

func (x CultureBaseForm) Enum() *CultureBaseForm {
	p := new(CultureBaseForm)
	*p = x
	return p
}

func (x CultureBaseForm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CultureBaseForm) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[4].Descriptor()
}

func (CultureBaseForm) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[4]
}

func (x CultureBaseForm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CultureBaseForm.Descriptor instead.
func (CultureBaseForm) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{4}
}

type CultureBaseType int32

const (
	CultureBaseType_NULL_CULTUREBASETYPE CultureBaseType = 0
	// ale
	CultureBaseType_ALE CultureBaseType = 1
	// bacteria
	CultureBaseType_BACTERIA CultureBaseType = 2
	// brett
	CultureBaseType_BRETT CultureBaseType = 3
	// champagne
	CultureBaseType_CHAMPAGNE CultureBaseType = 4
	// kveik
	CultureBaseType_KVEIK CultureBaseType = 5
	// lacto
	CultureBaseType_LACTO CultureBaseType = 6
	// lager
	CultureBaseType_LAGER CultureBaseType = 7
	// malolactic
	CultureBaseType_MALOLACTIC CultureBaseType = 8
	// mixed-culture
	CultureBaseType_MIXED_CULTURE CultureBaseType = 9
	// other
	CultureBaseType_OTHER_CultureBaseType CultureBaseType = 10
	// pedio
	CultureBaseType_PEDIO CultureBaseType = 11
	// spontaneous
	CultureBaseType_SPONTANEOUS CultureBaseType = 12
	// wine
	CultureBaseType_WINE CultureBaseType = 13
)

// Enum value maps for CultureBaseType.
var (
	CultureBaseType_name = map[int32]string{
		0:  "NULL_CULTUREBASETYPE",
		1:  "ALE",
		2:  "BACTERIA",
		3:  "BRETT",
		4:  "CHAMPAGNE",
		5:  "KVEIK",
		6:  "LACTO",
		7:  "LAGER",
		8:  "MALOLACTIC",
		9:  "MIXED_CULTURE",
		10: "OTHER_CultureBaseType",
		11: "PEDIO",
		12: "SPONTANEOUS",
		13: "WINE",
	}
	CultureBaseType_value = map[string]int32{
		"NULL_CULTUREBASETYPE":  0,
		"ALE":                   1,
		"BACTERIA":              2,
		"BRETT":                 3,
		"CHAMPAGNE":             4,
		"KVEIK":                 5,
		"LACTO":                 6,
		"LAGER":                 7,
		"MALOLACTIC":            8,
		"MIXED_CULTURE":         9,
		"OTHER_CultureBaseType": 10,
		"PEDIO":                 11,
		"SPONTANEOUS":           12,
		"WINE":                  13,
	}
)

func (x CultureBaseType) Enum() *CultureBaseType {
	p := new(CultureBaseType)
	*p = x
	return p
}

func (x CultureBaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CultureBaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[5].Descriptor()
}

func (CultureBaseType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[5]
}

func (x CultureBaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CultureBaseType.Descriptor instead.
func (CultureBaseType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{5}
}

type UseType int32

const (
	UseType_NULL_USETYPE UseType = 0
	// add to mash
	UseType_ADD_TO_MASH UseType = 1
	// add to boil
	UseType_ADD_TO_BOIL UseType = 2
	// add to fermentation
	UseType_ADD_TO_FERMENTATION UseType = 3
	// add to package
	UseType_ADD_TO_PACKAGE UseType = 4
)

// Enum value maps for UseType.
var (
	UseType_name = map[int32]string{
		0: "NULL_USETYPE",
		1: "ADD_TO_MASH",
		2: "ADD_TO_BOIL",
		3: "ADD_TO_FERMENTATION",
		4: "ADD_TO_PACKAGE",
	}
	UseType_value = map[string]int32{
		"NULL_USETYPE":        0,
		"ADD_TO_MASH":         1,
		"ADD_TO_BOIL":         2,
		"ADD_TO_FERMENTATION": 3,
		"ADD_TO_PACKAGE":      4,
	}
)

func (x UseType) Enum() *UseType {
	p := new(UseType)
	*p = x
	return p
}

func (x UseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UseType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[6].Descriptor()
}

func (UseType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[6]
}

func (x UseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UseType.Descriptor instead.
func (UseType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{6}
}

type ConcentrationUnitType int32

const (
	ConcentrationUnitType_NULL_CONCENTRATIONUNITTYPE ConcentrationUnitType = 0
	// ppm
	ConcentrationUnitType_PPM ConcentrationUnitType = 1
	// ppb
	ConcentrationUnitType_PPB ConcentrationUnitType = 2
	// mg/l
	ConcentrationUnitType_MGL ConcentrationUnitType = 3
)

// Enum value maps for ConcentrationUnitType.
var (
	ConcentrationUnitType_name = map[int32]string{
		0: "NULL_CONCENTRATIONUNITTYPE",
		1: "PPM",
		2: "PPB",
		3: "MGL",
	}
	ConcentrationUnitType_value = map[string]int32{
		"NULL_CONCENTRATIONUNITTYPE": 0,
		"PPM":                        1,
		"PPB":                        2,
		"MGL":                        3,
	}
)

func (x ConcentrationUnitType) Enum() *ConcentrationUnitType {
	p := new(ConcentrationUnitType)
	*p = x
	return p
}

func (x ConcentrationUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConcentrationUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[7].Descriptor()
}

func (ConcentrationUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[7]
}

func (x ConcentrationUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConcentrationUnitType.Descriptor instead.
func (ConcentrationUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{7}
}

type MiscellaneousBaseType int32

const (
	MiscellaneousBaseType_NULL MiscellaneousBaseType = 0
	// spice
	MiscellaneousBaseType_SPICE MiscellaneousBaseType = 1
	// fining
	MiscellaneousBaseType_FINING MiscellaneousBaseType = 2
	// water agent
	MiscellaneousBaseType_WATER_AGENT MiscellaneousBaseType = 3
	// herb
	MiscellaneousBaseType_HERB MiscellaneousBaseType = 4
	// flavor
	MiscellaneousBaseType_FLAVOR MiscellaneousBaseType = 5
	// wood
	MiscellaneousBaseType_WOOD MiscellaneousBaseType = 6
	// other
	MiscellaneousBaseType_OTHER MiscellaneousBaseType = 7
)

// Enum value maps for MiscellaneousBaseType.
var (
	MiscellaneousBaseType_name = map[int32]string{
		0: "NULL",
		1: "SPICE",
		2: "FINING",
		3: "WATER_AGENT",
		4: "HERB",
		5: "FLAVOR",
		6: "WOOD",
		7: "OTHER",
	}
	MiscellaneousBaseType_value = map[string]int32{
		"NULL":        0,
		"SPICE":       1,
		"FINING":      2,
		"WATER_AGENT": 3,
		"HERB":        4,
		"FLAVOR":      5,
		"WOOD":        6,
		"OTHER":       7,
	}
)

func (x MiscellaneousBaseType) Enum() *MiscellaneousBaseType {
	p := new(MiscellaneousBaseType)
	*p = x
	return p
}

func (x MiscellaneousBaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MiscellaneousBaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[8].Descriptor()
}

func (MiscellaneousBaseType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[8]
}

func (x MiscellaneousBaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MiscellaneousBaseType.Descriptor instead.
func (MiscellaneousBaseType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{8}
}

type GravityUnitType int32

const (
	GravityUnitType_NULL_GRAVITYUNITTYPE GravityUnitType = 0
	// sg
	GravityUnitType_SG GravityUnitType = 1
	// plato
	GravityUnitType_PLATO GravityUnitType = 2
	// brix
	GravityUnitType_BRIX GravityUnitType = 3
)

// Enum value maps for GravityUnitType.
var (
	GravityUnitType_name = map[int32]string{
		0: "NULL_GRAVITYUNITTYPE",
		1: "SG",
		2: "PLATO",
		3: "BRIX",
	}
	GravityUnitType_value = map[string]int32{
		"NULL_GRAVITYUNITTYPE": 0,
		"SG":                   1,
		"PLATO":                2,
		"BRIX":                 3,
	}
)

func (x GravityUnitType) Enum() *GravityUnitType {
	p := new(GravityUnitType)
	*p = x
	return p
}

func (x GravityUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GravityUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[9].Descriptor()
}

func (GravityUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[9]
}

func (x GravityUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GravityUnitType.Descriptor instead.
func (GravityUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{9}
}

type ColorUnitType int32

const (
	ColorUnitType_NULL_COLORUNITTYPE ColorUnitType = 0
	// EBC
	ColorUnitType_EBC ColorUnitType = 1
	// Lovi
	ColorUnitType_LOVI ColorUnitType = 2
	// SRM
	ColorUnitType_SRM ColorUnitType = 3
)

// Enum value maps for ColorUnitType.
var (
	ColorUnitType_name = map[int32]string{
		0: "NULL_COLORUNITTYPE",
		1: "EBC",
		2: "LOVI",
		3: "SRM",
	}
	ColorUnitType_value = map[string]int32{
		"NULL_COLORUNITTYPE": 0,
		"EBC":                1,
		"LOVI":               2,
		"SRM":                3,
	}
)

func (x ColorUnitType) Enum() *ColorUnitType {
	p := new(ColorUnitType)
	*p = x
	return p
}

func (x ColorUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColorUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[10].Descriptor()
}

func (ColorUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[10]
}

func (x ColorUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColorUnitType.Descriptor instead.
func (ColorUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{10}
}

type CarbonationUnitType int32

const (
	CarbonationUnitType_NULL_CARBONATIONUNITTYPE CarbonationUnitType = 0
	// vols
	CarbonationUnitType_VOLS CarbonationUnitType = 1
)

// Enum value maps for CarbonationUnitType.
var (
	CarbonationUnitType_name = map[int32]string{
		0: "NULL_CARBONATIONUNITTYPE",
		1: "VOLS",
	}
	CarbonationUnitType_value = map[string]int32{
		"NULL_CARBONATIONUNITTYPE": 0,
		"VOLS":                     1,
	}
)

func (x CarbonationUnitType) Enum() *CarbonationUnitType {
	p := new(CarbonationUnitType)
	*p = x
	return p
}

func (x CarbonationUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CarbonationUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[11].Descriptor()
}

func (CarbonationUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[11]
}

func (x CarbonationUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CarbonationUnitType.Descriptor instead.
func (CarbonationUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{11}
}

type BoilStepTypeChillingType int32

const (
	BoilStepTypeChillingType_NULL_BOILSTEPTYPECHILLINGTYPE BoilStepTypeChillingType = 0
	// batch
	BoilStepTypeChillingType_BATCH BoilStepTypeChillingType = 1
	// inline
	BoilStepTypeChillingType_INLINE BoilStepTypeChillingType = 2
)

// Enum value maps for BoilStepTypeChillingType.
var (
	BoilStepTypeChillingType_name = map[int32]string{
		0: "NULL_BOILSTEPTYPECHILLINGTYPE",
		1: "BATCH",
		2: "INLINE",
	}
	BoilStepTypeChillingType_value = map[string]int32{
		"NULL_BOILSTEPTYPECHILLINGTYPE": 0,
		"BATCH":                         1,
		"INLINE":                        2,
	}
)

func (x BoilStepTypeChillingType) Enum() *BoilStepTypeChillingType {
	p := new(BoilStepTypeChillingType)
	*p = x
	return p
}

func (x BoilStepTypeChillingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BoilStepTypeChillingType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[12].Descriptor()
}

func (BoilStepTypeChillingType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[12]
}

func (x BoilStepTypeChillingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BoilStepTypeChillingType.Descriptor instead.
func (BoilStepTypeChillingType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{12}
}

type FermentableBaseType int32

const (
	FermentableBaseType_NULL_FERMENTABLEBASETYPE FermentableBaseType = 0
	// dry extract
	FermentableBaseType_DRY_EXTRACT FermentableBaseType = 1
	// extract
	FermentableBaseType_EXTRACT FermentableBaseType = 2
	// grain
	FermentableBaseType_GRAIN FermentableBaseType = 3
	// sugar
	FermentableBaseType_SUGAR FermentableBaseType = 4
	// fruit
	FermentableBaseType_FRUIT FermentableBaseType = 5
	// juice
	FermentableBaseType_JUICE FermentableBaseType = 6
	// honey
	FermentableBaseType_HONEY FermentableBaseType = 7
	// other
	FermentableBaseType_OTHER_FERMENTABLEBASETYPE FermentableBaseType = 8
)

// Enum value maps for FermentableBaseType.
var (
	FermentableBaseType_name = map[int32]string{
		0: "NULL_FERMENTABLEBASETYPE",
		1: "DRY_EXTRACT",
		2: "EXTRACT",
		3: "GRAIN",
		4: "SUGAR",
		5: "FRUIT",
		6: "JUICE",
		7: "HONEY",
		8: "OTHER_FERMENTABLEBASETYPE",
	}
	FermentableBaseType_value = map[string]int32{
		"NULL_FERMENTABLEBASETYPE":  0,
		"DRY_EXTRACT":               1,
		"EXTRACT":                   2,
		"GRAIN":                     3,
		"SUGAR":                     4,
		"FRUIT":                     5,
		"JUICE":                     6,
		"HONEY":                     7,
		"OTHER_FERMENTABLEBASETYPE": 8,
	}
)

func (x FermentableBaseType) Enum() *FermentableBaseType {
	p := new(FermentableBaseType)
	*p = x
	return p
}

func (x FermentableBaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FermentableBaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[13].Descriptor()
}

func (FermentableBaseType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[13]
}

func (x FermentableBaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FermentableBaseType.Descriptor instead.
func (FermentableBaseType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{13}
}

type GrainGroup int32

const (
	GrainGroup_NULL_GRAINGROUP GrainGroup = 0
	// base
	GrainGroup_BASE GrainGroup = 1
	// caramel
	GrainGroup_CARAMEL GrainGroup = 2
	// flaked
	GrainGroup_FLAKED GrainGroup = 3
	// roasted
	GrainGroup_ROASTED GrainGroup = 4
	// specialty
	GrainGroup_SPECIALTY GrainGroup = 5
	// smoked
	GrainGroup_SMOKED GrainGroup = 6
	// adjunct
	GrainGroup_ADJUNCT GrainGroup = 7
)

// Enum value maps for GrainGroup.
var (
	GrainGroup_name = map[int32]string{
		0: "NULL_GRAINGROUP",
		1: "BASE",
		2: "CARAMEL",
		3: "FLAKED",
		4: "ROASTED",
		5: "SPECIALTY",
		6: "SMOKED",
		7: "ADJUNCT",
	}
	GrainGroup_value = map[string]int32{
		"NULL_GRAINGROUP": 0,
		"BASE":            1,
		"CARAMEL":         2,
		"FLAKED":          3,
		"ROASTED":         4,
		"SPECIALTY":       5,
		"SMOKED":          6,
		"ADJUNCT":         7,
	}
)

func (x GrainGroup) Enum() *GrainGroup {
	p := new(GrainGroup)
	*p = x
	return p
}

func (x GrainGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrainGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[14].Descriptor()
}

func (GrainGroup) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[14]
}

func (x GrainGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrainGroup.Descriptor instead.
func (GrainGroup) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{14}
}

type DiastaticPowerUnitType int32

const (
	DiastaticPowerUnitType_NULL_DIASTATICPOWERUNITTYPE DiastaticPowerUnitType = 0
	// Lintner
	DiastaticPowerUnitType_LINTNER DiastaticPowerUnitType = 1
	// Windisch–Kolbach
	DiastaticPowerUnitType_WK DiastaticPowerUnitType = 2
)

// Enum value maps for DiastaticPowerUnitType.
var (
	DiastaticPowerUnitType_name = map[int32]string{
		0: "NULL_DIASTATICPOWERUNITTYPE",
		1: "LINTNER",
		2: "WK",
	}
	DiastaticPowerUnitType_value = map[string]int32{
		"NULL_DIASTATICPOWERUNITTYPE": 0,
		"LINTNER":                     1,
		"WK":                          2,
	}
)

func (x DiastaticPowerUnitType) Enum() *DiastaticPowerUnitType {
	p := new(DiastaticPowerUnitType)
	*p = x
	return p
}

func (x DiastaticPowerUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiastaticPowerUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[15].Descriptor()
}

func (DiastaticPowerUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[15]
}

func (x DiastaticPowerUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiastaticPowerUnitType.Descriptor instead.
func (DiastaticPowerUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{15}
}

type QualitativeRangeType int32

const (
	QualitativeRangeType_NULL_QUALITATIVERANGETYPE QualitativeRangeType = 0
	// very low
	QualitativeRangeType_VERY_LOW QualitativeRangeType = 1
	// low
	QualitativeRangeType_LOW QualitativeRangeType = 2
	// medium low
	QualitativeRangeType_MEDIUM_LOW QualitativeRangeType = 3
	// medium
	QualitativeRangeType_MEDIUM QualitativeRangeType = 4
	// medium high
	QualitativeRangeType_MEDIUM_HIGH QualitativeRangeType = 5
	// high
	QualitativeRangeType_HIGH QualitativeRangeType = 6
	// very high
	QualitativeRangeType_VERY_HIGH QualitativeRangeType = 7
)

// Enum value maps for QualitativeRangeType.
var (
	QualitativeRangeType_name = map[int32]string{
		0: "NULL_QUALITATIVERANGETYPE",
		1: "VERY_LOW",
		2: "LOW",
		3: "MEDIUM_LOW",
		4: "MEDIUM",
		5: "MEDIUM_HIGH",
		6: "HIGH",
		7: "VERY_HIGH",
	}
	QualitativeRangeType_value = map[string]int32{
		"NULL_QUALITATIVERANGETYPE": 0,
		"VERY_LOW":                  1,
		"LOW":                       2,
		"MEDIUM_LOW":                3,
		"MEDIUM":                    4,
		"MEDIUM_HIGH":               5,
		"HIGH":                      6,
		"VERY_HIGH":                 7,
	}
)

func (x QualitativeRangeType) Enum() *QualitativeRangeType {
	p := new(QualitativeRangeType)
	*p = x
	return p
}

func (x QualitativeRangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QualitativeRangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[16].Descriptor()
}

func (QualitativeRangeType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[16]
}

func (x QualitativeRangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QualitativeRangeType.Descriptor instead.
func (QualitativeRangeType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{16}
}

type TemperatureUnitType int32

const (
	TemperatureUnitType_NULL_TEMPERATUREUNITTYPE TemperatureUnitType = 0
	TemperatureUnitType_C                        TemperatureUnitType = 1
	TemperatureUnitType_F                        TemperatureUnitType = 2
)

// Enum value maps for TemperatureUnitType.
var (
	TemperatureUnitType_name = map[int32]string{
		0: "NULL_TEMPERATUREUNITTYPE",
		1: "C",
		2: "F",
	}
	TemperatureUnitType_value = map[string]int32{
		"NULL_TEMPERATUREUNITTYPE": 0,
		"C":                        1,
		"F":                        2,
	}
)

func (x TemperatureUnitType) Enum() *TemperatureUnitType {
	p := new(TemperatureUnitType)
	*p = x
	return p
}

func (x TemperatureUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TemperatureUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[17].Descriptor()
}

func (TemperatureUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[17]
}

func (x TemperatureUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TemperatureUnitType.Descriptor instead.
func (TemperatureUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{17}
}

type SpecificHeatUnitType int32

const (
	SpecificHeatUnitType_NULL_SPECIFICHEATUNITTYPE SpecificHeatUnitType = 0
	// Cal/(g C)
	SpecificHeatUnitType_CALGC SpecificHeatUnitType = 1
	// J/(kg K)
	SpecificHeatUnitType_JKGK SpecificHeatUnitType = 2
	// BTU/(lb F)
	SpecificHeatUnitType_BTULBF SpecificHeatUnitType = 3
)

// Enum value maps for SpecificHeatUnitType.
var (
	SpecificHeatUnitType_name = map[int32]string{
		0: "NULL_SPECIFICHEATUNITTYPE",
		1: "CALGC",
		2: "JKGK",
		3: "BTULBF",
	}
	SpecificHeatUnitType_value = map[string]int32{
		"NULL_SPECIFICHEATUNITTYPE": 0,
		"CALGC":                     1,
		"JKGK":                      2,
		"BTULBF":                    3,
	}
)

func (x SpecificHeatUnitType) Enum() *SpecificHeatUnitType {
	p := new(SpecificHeatUnitType)
	*p = x
	return p
}

func (x SpecificHeatUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecificHeatUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[18].Descriptor()
}

func (SpecificHeatUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[18]
}

func (x SpecificHeatUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecificHeatUnitType.Descriptor instead.
func (SpecificHeatUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{18}
}

type HopVarietyBaseForm int32

const (
	HopVarietyBaseForm_NULL_HOPVARIETYBASEFORM HopVarietyBaseForm = 0
	// extract
	HopVarietyBaseForm_EXTRACT_HOPVARIETYBASEFORM HopVarietyBaseForm = 1
	// leaf
	HopVarietyBaseForm_LEAF HopVarietyBaseForm = 2
	// leaf (wet)
	HopVarietyBaseForm_LEAFWET HopVarietyBaseForm = 3
	// pellet
	HopVarietyBaseForm_PELLET HopVarietyBaseForm = 4
	// powder
	HopVarietyBaseForm_POWDER HopVarietyBaseForm = 5
	// plug
	HopVarietyBaseForm_PLUG HopVarietyBaseForm = 6
)

// Enum value maps for HopVarietyBaseForm.
var (
	HopVarietyBaseForm_name = map[int32]string{
		0: "NULL_HOPVARIETYBASEFORM",
		1: "EXTRACT_HOPVARIETYBASEFORM",
		2: "LEAF",
		3: "LEAFWET",
		4: "PELLET",
		5: "POWDER",
		6: "PLUG",
	}
	HopVarietyBaseForm_value = map[string]int32{
		"NULL_HOPVARIETYBASEFORM":    0,
		"EXTRACT_HOPVARIETYBASEFORM": 1,
		"LEAF":                       2,
		"LEAFWET":                    3,
		"PELLET":                     4,
		"POWDER":                     5,
		"PLUG":                       6,
	}
)

func (x HopVarietyBaseForm) Enum() *HopVarietyBaseForm {
	p := new(HopVarietyBaseForm)
	*p = x
	return p
}

func (x HopVarietyBaseForm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HopVarietyBaseForm) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[19].Descriptor()
}

func (HopVarietyBaseForm) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[19]
}

func (x HopVarietyBaseForm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HopVarietyBaseForm.Descriptor instead.
func (HopVarietyBaseForm) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{19}
}

type MashStepType_MashStepTypeType int32

const (
	MashStepType_NULL           MashStepType_MashStepTypeType = 0
	MashStepType_INFUSION       MashStepType_MashStepTypeType = 1
	MashStepType_TEMPERATURE    MashStepType_MashStepTypeType = 2
	MashStepType_DECOCTION      MashStepType_MashStepTypeType = 3
	MashStepType_SOURING_MASH   MashStepType_MashStepTypeType = 4
	MashStepType_SOURING_WORT   MashStepType_MashStepTypeType = 5
	MashStepType_DRAIN_MASH_TUN MashStepType_MashStepTypeType = 6
	MashStepType_SPARGE         MashStepType_MashStepTypeType = 7
)

// Enum value maps for MashStepType_MashStepTypeType.
var (
	MashStepType_MashStepTypeType_name = map[int32]string{
		0: "NULL",
		1: "INFUSION",
		2: "TEMPERATURE",
		3: "DECOCTION",
		4: "SOURING_MASH",
		5: "SOURING_WORT",
		6: "DRAIN_MASH_TUN",
		7: "SPARGE",
	}
	MashStepType_MashStepTypeType_value = map[string]int32{
		"NULL":           0,
		"INFUSION":       1,
		"TEMPERATURE":    2,
		"DECOCTION":      3,
		"SOURING_MASH":   4,
		"SOURING_WORT":   5,
		"DRAIN_MASH_TUN": 6,
		"SPARGE":         7,
	}
)

func (x MashStepType_MashStepTypeType) Enum() *MashStepType_MashStepTypeType {
	p := new(MashStepType_MashStepTypeType)
	*p = x
	return p
}

func (x MashStepType_MashStepTypeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MashStepType_MashStepTypeType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[20].Descriptor()
}

func (MashStepType_MashStepTypeType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[20]
}

func (x MashStepType_MashStepTypeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MashStepType_MashStepTypeType.Descriptor instead.
func (MashStepType_MashStepTypeType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{2, 0}
}

type TimeType_TimeUnitType int32

const (
	TimeType_NULL TimeType_TimeUnitType = 0
	// sec
	TimeType_SEC TimeType_TimeUnitType = 1
	// min
	TimeType_MIN TimeType_TimeUnitType = 2
	// hr
	TimeType_HR TimeType_TimeUnitType = 3
	// day
	TimeType_DAY TimeType_TimeUnitType = 4
	// week
	TimeType_WEEK TimeType_TimeUnitType = 5
)

// Enum value maps for TimeType_TimeUnitType.
var (
	TimeType_TimeUnitType_name = map[int32]string{
		0: "NULL",
		1: "SEC",
		2: "MIN",
		3: "HR",
		4: "DAY",
		5: "WEEK",
	}
	TimeType_TimeUnitType_value = map[string]int32{
		"NULL": 0,
		"SEC":  1,
		"MIN":  2,
		"HR":   3,
		"DAY":  4,
		"WEEK": 5,
	}
)

func (x TimeType_TimeUnitType) Enum() *TimeType_TimeUnitType {
	p := new(TimeType_TimeUnitType)
	*p = x
	return p
}

func (x TimeType_TimeUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeType_TimeUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[21].Descriptor()
}

func (TimeType_TimeUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[21]
}

func (x TimeType_TimeUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeType_TimeUnitType.Descriptor instead.
func (TimeType_TimeUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{3, 0}
}

type VolumeType_VolumeUnitType int32

const (
	VolumeType_NULL VolumeType_VolumeUnitType = 0
	// ml
	VolumeType_ML VolumeType_VolumeUnitType = 1
	// l
	VolumeType_L VolumeType_VolumeUnitType = 2
	// tsp
	VolumeType_TSP VolumeType_VolumeUnitType = 3
	// tbsp
	VolumeType_TBSP VolumeType_VolumeUnitType = 4
	// floz
	VolumeType_FLOZ VolumeType_VolumeUnitType = 5
	// cup
	VolumeType_CUP VolumeType_VolumeUnitType = 6
	// pt
	VolumeType_PT VolumeType_VolumeUnitType = 7
	// qt
	VolumeType_QT VolumeType_VolumeUnitType = 8
	// gal
	VolumeType_GAL VolumeType_VolumeUnitType = 9
	// bbl
	VolumeType_BBL VolumeType_VolumeUnitType = 10
	// ifloz
	VolumeType_IFOZ VolumeType_VolumeUnitType = 11
	// ipt
	VolumeType_IPT VolumeType_VolumeUnitType = 12
	// iqt
	VolumeType_IQT VolumeType_VolumeUnitType = 13
	// igal
	VolumeType_IGAL VolumeType_VolumeUnitType = 14
	// ibbl
	VolumeType_IBBL VolumeType_VolumeUnitType = 15
)

// Enum value maps for VolumeType_VolumeUnitType.
var (
	VolumeType_VolumeUnitType_name = map[int32]string{
		0:  "NULL",
		1:  "ML",
		2:  "L",
		3:  "TSP",
		4:  "TBSP",
		5:  "FLOZ",
		6:  "CUP",
		7:  "PT",
		8:  "QT",
		9:  "GAL",
		10: "BBL",
		11: "IFOZ",
		12: "IPT",
		13: "IQT",
		14: "IGAL",
		15: "IBBL",
	}
	VolumeType_VolumeUnitType_value = map[string]int32{
		"NULL": 0,
		"ML":   1,
		"L":    2,
		"TSP":  3,
		"TBSP": 4,
		"FLOZ": 5,
		"CUP":  6,
		"PT":   7,
		"QT":   8,
		"GAL":  9,
		"BBL":  10,
		"IFOZ": 11,
		"IPT":  12,
		"IQT":  13,
		"IGAL": 14,
		"IBBL": 15,
	}
)

func (x VolumeType_VolumeUnitType) Enum() *VolumeType_VolumeUnitType {
	p := new(VolumeType_VolumeUnitType)
	*p = x
	return p
}

func (x VolumeType_VolumeUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VolumeType_VolumeUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[22].Descriptor()
}

func (VolumeType_VolumeUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[22]
}

func (x VolumeType_VolumeUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VolumeType_VolumeUnitType.Descriptor instead.
func (VolumeType_VolumeUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{6, 0}
}

type SpecificVolumeType_SpecificVolumeUnitType int32

const (
	SpecificVolumeType_NULL SpecificVolumeType_SpecificVolumeUnitType = 0
	// qt/lb
	SpecificVolumeType_QTLB SpecificVolumeType_SpecificVolumeUnitType = 1
	// gal/lb
	SpecificVolumeType_GALLB SpecificVolumeType_SpecificVolumeUnitType = 2
	// gal/oz
	SpecificVolumeType_GALOZ SpecificVolumeType_SpecificVolumeUnitType = 3
	// l/g
	SpecificVolumeType_LG SpecificVolumeType_SpecificVolumeUnitType = 4
	// l/kg
	SpecificVolumeType_LKG SpecificVolumeType_SpecificVolumeUnitType = 5
	// floz/oz
	SpecificVolumeType_FLOZOZ SpecificVolumeType_SpecificVolumeUnitType = 6
	// m^3/kg
	SpecificVolumeType_M3KG SpecificVolumeType_SpecificVolumeUnitType = 7
	// ft^3/lb
	SpecificVolumeType_FT3LB SpecificVolumeType_SpecificVolumeUnitType = 8
)

// Enum value maps for SpecificVolumeType_SpecificVolumeUnitType.
var (
	SpecificVolumeType_SpecificVolumeUnitType_name = map[int32]string{
		0: "NULL",
		1: "QTLB",
		2: "GALLB",
		3: "GALOZ",
		4: "LG",
		5: "LKG",
		6: "FLOZOZ",
		7: "M3KG",
		8: "FT3LB",
	}
	SpecificVolumeType_SpecificVolumeUnitType_value = map[string]int32{
		"NULL":   0,
		"QTLB":   1,
		"GALLB":  2,
		"GALOZ":  3,
		"LG":     4,
		"LKG":    5,
		"FLOZOZ": 6,
		"M3KG":   7,
		"FT3LB":  8,
	}
)

func (x SpecificVolumeType_SpecificVolumeUnitType) Enum() *SpecificVolumeType_SpecificVolumeUnitType {
	p := new(SpecificVolumeType_SpecificVolumeUnitType)
	*p = x
	return p
}

func (x SpecificVolumeType_SpecificVolumeUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecificVolumeType_SpecificVolumeUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[23].Descriptor()
}

func (SpecificVolumeType_SpecificVolumeUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[23]
}

func (x SpecificVolumeType_SpecificVolumeUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecificVolumeType_SpecificVolumeUnitType.Descriptor instead.
func (SpecificVolumeType_SpecificVolumeUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{7, 0}
}

type RecipeType_RecipeTypeType int32

const (
	RecipeType_NULL_RECIPETYPETYPE RecipeType_RecipeTypeType = 0
	// cider
	RecipeType_CIDER RecipeType_RecipeTypeType = 1
	// kombucha
	RecipeType_KOMBUCHA RecipeType_RecipeTypeType = 2
	// soda
	RecipeType_SODA RecipeType_RecipeTypeType = 3
	// other
	RecipeType_OTHER RecipeType_RecipeTypeType = 4
	// mead
	RecipeType_MEAD RecipeType_RecipeTypeType = 5
	// wine
	RecipeType_WINE RecipeType_RecipeTypeType = 6
	// extract
	RecipeType_EXTRACT RecipeType_RecipeTypeType = 7
	// partial mash
	RecipeType_PARTIAL_MASH RecipeType_RecipeTypeType = 8
	// all grain
	RecipeType_ALL_GRAIN RecipeType_RecipeTypeType = 9
)

// Enum value maps for RecipeType_RecipeTypeType.
var (
	RecipeType_RecipeTypeType_name = map[int32]string{
		0: "NULL_RECIPETYPETYPE",
		1: "CIDER",
		2: "KOMBUCHA",
		3: "SODA",
		4: "OTHER",
		5: "MEAD",
		6: "WINE",
		7: "EXTRACT",
		8: "PARTIAL_MASH",
		9: "ALL_GRAIN",
	}
	RecipeType_RecipeTypeType_value = map[string]int32{
		"NULL_RECIPETYPETYPE": 0,
		"CIDER":               1,
		"KOMBUCHA":            2,
		"SODA":                3,
		"OTHER":               4,
		"MEAD":                5,
		"WINE":                6,
		"EXTRACT":             7,
		"PARTIAL_MASH":        8,
		"ALL_GRAIN":           9,
	}
)

func (x RecipeType_RecipeTypeType) Enum() *RecipeType_RecipeTypeType {
	p := new(RecipeType_RecipeTypeType)
	*p = x
	return p
}

func (x RecipeType_RecipeTypeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecipeType_RecipeTypeType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[24].Descriptor()
}

func (RecipeType_RecipeTypeType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[24]
}

func (x RecipeType_RecipeTypeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecipeType_RecipeTypeType.Descriptor instead.
func (RecipeType_RecipeTypeType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{8, 0}
}

type RecipeStyleType_StyleCategories int32

const (
	RecipeStyleType_NULL_STYLECATEGORIES RecipeStyleType_StyleCategories = 0
	// beer
	RecipeStyleType_BEER RecipeStyleType_StyleCategories = 1
	// cider
	RecipeStyleType_CIDER RecipeStyleType_StyleCategories = 2
	// kombucha
	RecipeStyleType_KOMBUCHA RecipeStyleType_StyleCategories = 3
	// mead
	RecipeStyleType_MEAD RecipeStyleType_StyleCategories = 4
	// soda
	RecipeStyleType_SODA RecipeStyleType_StyleCategories = 5
	// wine
	RecipeStyleType_WINE RecipeStyleType_StyleCategories = 6
	// other
	RecipeStyleType_OTHER RecipeStyleType_StyleCategories = 7
)

// Enum value maps for RecipeStyleType_StyleCategories.
var (
	RecipeStyleType_StyleCategories_name = map[int32]string{
		0: "NULL_STYLECATEGORIES",
		1: "BEER",
		2: "CIDER",
		3: "KOMBUCHA",
		4: "MEAD",
		5: "SODA",
		6: "WINE",
		7: "OTHER",
	}
	RecipeStyleType_StyleCategories_value = map[string]int32{
		"NULL_STYLECATEGORIES": 0,
		"BEER":                 1,
		"CIDER":                2,
		"KOMBUCHA":             3,
		"MEAD":                 4,
		"SODA":                 5,
		"WINE":                 6,
		"OTHER":                7,
	}
)

func (x RecipeStyleType_StyleCategories) Enum() *RecipeStyleType_StyleCategories {
	p := new(RecipeStyleType_StyleCategories)
	*p = x
	return p
}

func (x RecipeStyleType_StyleCategories) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecipeStyleType_StyleCategories) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[25].Descriptor()
}

func (RecipeStyleType_StyleCategories) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[25]
}

func (x RecipeStyleType_StyleCategories) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecipeStyleType_StyleCategories.Descriptor instead.
func (RecipeStyleType_StyleCategories) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{10, 0}
}

type IBUEstimateType_IBUMethodType int32

const (
	IBUEstimateType_NULL_IBUMETHODTYPE IBUEstimateType_IBUMethodType = 0
	// Rager
	IBUEstimateType_RAGER IBUEstimateType_IBUMethodType = 1
	// Tinseth
	IBUEstimateType_TINSETH IBUEstimateType_IBUMethodType = 2
	// Garetz
	IBUEstimateType_GARETZ IBUEstimateType_IBUMethodType = 3
	// Other
	IBUEstimateType_OTHER IBUEstimateType_IBUMethodType = 4
)

// Enum value maps for IBUEstimateType_IBUMethodType.
var (
	IBUEstimateType_IBUMethodType_name = map[int32]string{
		0: "NULL_IBUMETHODTYPE",
		1: "RAGER",
		2: "TINSETH",
		3: "GARETZ",
		4: "OTHER",
	}
	IBUEstimateType_IBUMethodType_value = map[string]int32{
		"NULL_IBUMETHODTYPE": 0,
		"RAGER":              1,
		"TINSETH":            2,
		"GARETZ":             3,
		"OTHER":              4,
	}
)

func (x IBUEstimateType_IBUMethodType) Enum() *IBUEstimateType_IBUMethodType {
	p := new(IBUEstimateType_IBUMethodType)
	*p = x
	return p
}

func (x IBUEstimateType_IBUMethodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IBUEstimateType_IBUMethodType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[26].Descriptor()
}

func (IBUEstimateType_IBUMethodType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[26]
}

func (x IBUEstimateType_IBUMethodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IBUEstimateType_IBUMethodType.Descriptor instead.
func (IBUEstimateType_IBUMethodType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{11, 0}
}

type StyleType_StyleCategories int32

const (
	StyleType_NULL_STYLECATEGORIES StyleType_StyleCategories = 0
	// beer
	StyleType_BEER StyleType_StyleCategories = 1
	// cider
	StyleType_CIDER StyleType_StyleCategories = 2
	// kombucha
	StyleType_KOMBUCHA StyleType_StyleCategories = 3
	// mead
	StyleType_MEAD StyleType_StyleCategories = 4
	// soda
	StyleType_SODA StyleType_StyleCategories = 5
	// wine
	StyleType_WINE StyleType_StyleCategories = 6
	// other
	StyleType_OTHER StyleType_StyleCategories = 7
)

// Enum value maps for StyleType_StyleCategories.
var (
	StyleType_StyleCategories_name = map[int32]string{
		0: "NULL_STYLECATEGORIES",
		1: "BEER",
		2: "CIDER",
		3: "KOMBUCHA",
		4: "MEAD",
		5: "SODA",
		6: "WINE",
		7: "OTHER",
	}
	StyleType_StyleCategories_value = map[string]int32{
		"NULL_STYLECATEGORIES": 0,
		"BEER":                 1,
		"CIDER":                2,
		"KOMBUCHA":             3,
		"MEAD":                 4,
		"SODA":                 5,
		"WINE":                 6,
		"OTHER":                7,
	}
)

func (x StyleType_StyleCategories) Enum() *StyleType_StyleCategories {
	p := new(StyleType_StyleCategories)
	*p = x
	return p
}

func (x StyleType_StyleCategories) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StyleType_StyleCategories) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[27].Descriptor()
}

func (StyleType_StyleCategories) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[27]
}

func (x StyleType_StyleCategories) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StyleType_StyleCategories.Descriptor instead.
func (StyleType_StyleCategories) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{26, 0}
}

type BitternessType_BitternessUnitType int32

const (
	BitternessType_NULL BitternessType_BitternessUnitType = 0
	// IBUs
	BitternessType_IBUS BitternessType_BitternessUnitType = 1
)

// Enum value maps for BitternessType_BitternessUnitType.
var (
	BitternessType_BitternessUnitType_name = map[int32]string{
		0: "NULL",
		1: "IBUS",
	}
	BitternessType_BitternessUnitType_value = map[string]int32{
		"NULL": 0,
		"IBUS": 1,
	}
)

func (x BitternessType_BitternessUnitType) Enum() *BitternessType_BitternessUnitType {
	p := new(BitternessType_BitternessUnitType)
	*p = x
	return p
}

func (x BitternessType_BitternessUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BitternessType_BitternessUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[28].Descriptor()
}

func (BitternessType_BitternessUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[28]
}

func (x BitternessType_BitternessUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BitternessType_BitternessUnitType.Descriptor instead.
func (BitternessType_BitternessUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{28, 0}
}

type PercentType_PercentUnitType int32

const (
	PercentType_NULL PercentType_PercentUnitType = 0
	// %
	PercentType_PERCENT_SIGN PercentType_PercentUnitType = 1
)

// Enum value maps for PercentType_PercentUnitType.
var (
	PercentType_PercentUnitType_name = map[int32]string{
		0: "NULL",
		1: "PERCENT_SIGN",
	}
	PercentType_PercentUnitType_value = map[string]int32{
		"NULL":         0,
		"PERCENT_SIGN": 1,
	}
)

func (x PercentType_PercentUnitType) Enum() *PercentType_PercentUnitType {
	p := new(PercentType_PercentUnitType)
	*p = x
	return p
}

func (x PercentType_PercentUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PercentType_PercentUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[29].Descriptor()
}

func (PercentType_PercentUnitType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[29]
}

func (x PercentType_PercentUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PercentType_PercentUnitType.Descriptor instead.
func (PercentType_PercentUnitType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{30, 0}
}

type EquipmentItemType_EquipmentBaseForm int32

const (
	EquipmentItemType_NULL EquipmentItemType_EquipmentBaseForm = 0
	// HLT
	EquipmentItemType_HLT EquipmentItemType_EquipmentBaseForm = 1
	// Mash Tun
	EquipmentItemType_MASH_TUN EquipmentItemType_EquipmentBaseForm = 2
	// Lauter Tun
	EquipmentItemType_LAUTER_TUN EquipmentItemType_EquipmentBaseForm = 3
	// Brew Kettle
	EquipmentItemType_BREW_KETTLE EquipmentItemType_EquipmentBaseForm = 4
	// Fermenter
	EquipmentItemType_FERMENTER EquipmentItemType_EquipmentBaseForm = 5
	// Aging Vessel
	EquipmentItemType_AGING_VESSEL EquipmentItemType_EquipmentBaseForm = 6
	// Packaging Vessel
	EquipmentItemType_PACKAGING_VESSEL EquipmentItemType_EquipmentBaseForm = 7
)

// Enum value maps for EquipmentItemType_EquipmentBaseForm.
var (
	EquipmentItemType_EquipmentBaseForm_name = map[int32]string{
		0: "NULL",
		1: "HLT",
		2: "MASH_TUN",
		3: "LAUTER_TUN",
		4: "BREW_KETTLE",
		5: "FERMENTER",
		6: "AGING_VESSEL",
		7: "PACKAGING_VESSEL",
	}
	EquipmentItemType_EquipmentBaseForm_value = map[string]int32{
		"NULL":             0,
		"HLT":              1,
		"MASH_TUN":         2,
		"LAUTER_TUN":       3,
		"BREW_KETTLE":      4,
		"FERMENTER":        5,
		"AGING_VESSEL":     6,
		"PACKAGING_VESSEL": 7,
	}
)

func (x EquipmentItemType_EquipmentBaseForm) Enum() *EquipmentItemType_EquipmentBaseForm {
	p := new(EquipmentItemType_EquipmentBaseForm)
	*p = x
	return p
}

func (x EquipmentItemType_EquipmentBaseForm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EquipmentItemType_EquipmentBaseForm) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[30].Descriptor()
}

func (EquipmentItemType_EquipmentBaseForm) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[30]
}

func (x EquipmentItemType_EquipmentBaseForm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EquipmentItemType_EquipmentBaseForm.Descriptor instead.
func (EquipmentItemType_EquipmentBaseForm) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{50, 0}
}

type PackagingVesselType_PackagingVesselTypeType int32

const (
	PackagingVesselType_NULL_PACKAGINGVESSELTYPETYPE PackagingVesselType_PackagingVesselTypeType = 0
	// keg
	PackagingVesselType_KEG PackagingVesselType_PackagingVesselTypeType = 1
	// bottle
	PackagingVesselType_BOTTLE PackagingVesselType_PackagingVesselTypeType = 2
	// cask
	PackagingVesselType_CASK PackagingVesselType_PackagingVesselTypeType = 3
	// tank
	PackagingVesselType_TANK PackagingVesselType_PackagingVesselTypeType = 4
	// firkin
	PackagingVesselType_FIRKIN PackagingVesselType_PackagingVesselTypeType = 5
	// other
	PackagingVesselType_OTHER PackagingVesselType_PackagingVesselTypeType = 6
	// can
	PackagingVesselType_CAN PackagingVesselType_PackagingVesselTypeType = 7
)

// Enum value maps for PackagingVesselType_PackagingVesselTypeType.
var (
	PackagingVesselType_PackagingVesselTypeType_name = map[int32]string{
		0: "NULL_PACKAGINGVESSELTYPETYPE",
		1: "KEG",
		2: "BOTTLE",
		3: "CASK",
		4: "TANK",
		5: "FIRKIN",
		6: "OTHER",
		7: "CAN",
	}
	PackagingVesselType_PackagingVesselTypeType_value = map[string]int32{
		"NULL_PACKAGINGVESSELTYPETYPE": 0,
		"KEG":                          1,
		"BOTTLE":                       2,
		"CASK":                         3,
		"TANK":                         4,
		"FIRKIN":                       5,
		"OTHER":                        6,
		"CAN":                          7,
	}
)

func (x PackagingVesselType_PackagingVesselTypeType) Enum() *PackagingVesselType_PackagingVesselTypeType {
	p := new(PackagingVesselType_PackagingVesselTypeType)
	*p = x
	return p
}

func (x PackagingVesselType_PackagingVesselTypeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PackagingVesselType_PackagingVesselTypeType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[31].Descriptor()
}

func (PackagingVesselType_PackagingVesselTypeType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[31]
}

func (x PackagingVesselType_PackagingVesselTypeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PackagingVesselType_PackagingVesselTypeType.Descriptor instead.
func (PackagingVesselType_PackagingVesselTypeType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{53, 0}
}

type VarietyInformation_VarietyInformationType int32

const (
	VarietyInformation_NULL_VARIETYINFORMATIONTYPE VarietyInformation_VarietyInformationType = 0
	// aroma
	VarietyInformation_AROMA VarietyInformation_VarietyInformationType = 1
	// bittering
	VarietyInformation_BITTERING VarietyInformation_VarietyInformationType = 2
	// flavor
	VarietyInformation_FLAVOR VarietyInformation_VarietyInformationType = 3
	// aroma/bittering
	VarietyInformation_AROMA_BITTERING VarietyInformation_VarietyInformationType = 4
	// bittering/flavor
	VarietyInformation_BITTERING_FLAVOR VarietyInformation_VarietyInformationType = 5
	// aroma/flavor
	VarietyInformation_AROMA_FLAVOR VarietyInformation_VarietyInformationType = 6
	// aroma/bittering/flavor
	VarietyInformation_AROMA_BITTERING_FLAVOR VarietyInformation_VarietyInformationType = 7
)

// Enum value maps for VarietyInformation_VarietyInformationType.
var (
	VarietyInformation_VarietyInformationType_name = map[int32]string{
		0: "NULL_VARIETYINFORMATIONTYPE",
		1: "AROMA",
		2: "BITTERING",
		3: "FLAVOR",
		4: "AROMA_BITTERING",
		5: "BITTERING_FLAVOR",
		6: "AROMA_FLAVOR",
		7: "AROMA_BITTERING_FLAVOR",
	}
	VarietyInformation_VarietyInformationType_value = map[string]int32{
		"NULL_VARIETYINFORMATIONTYPE": 0,
		"AROMA":                       1,
		"BITTERING":                   2,
		"FLAVOR":                      3,
		"AROMA_BITTERING":             4,
		"BITTERING_FLAVOR":            5,
		"AROMA_FLAVOR":                6,
		"AROMA_BITTERING_FLAVOR":      7,
	}
)

func (x VarietyInformation_VarietyInformationType) Enum() *VarietyInformation_VarietyInformationType {
	p := new(VarietyInformation_VarietyInformationType)
	*p = x
	return p
}

func (x VarietyInformation_VarietyInformationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VarietyInformation_VarietyInformationType) Descriptor() protoreflect.EnumDescriptor {
	return file_beer_proto_enumTypes[32].Descriptor()
}

func (VarietyInformation_VarietyInformationType) Type() protoreflect.EnumType {
	return &file_beer_proto_enumTypes[32]
}

func (x VarietyInformation_VarietyInformationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VarietyInformation_VarietyInformationType.Descriptor instead.
func (VarietyInformation_VarietyInformationType) EnumDescriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{54, 0}
}

type Recipe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A collection of steps providing process information for common mashing procedures
	Mashes []*MashProcedureType `protobuf:"bytes,2,rep,name=mashes,proto3" json:"mashes,omitempty"`
	// Records containing a minimal collection of the description of ingredients, procedures and other required parameters necessary to recreate a batch of beer
	Recipes []*RecipeType `protobuf:"bytes,3,rep,name=recipes,proto3" json:"recipes,omitempty"`
	// Records for adjuncts which do not contribute to the gravity of the beer
	MiscellaneousIngredients []*MiscellaneousType `protobuf:"bytes,4,rep,name=miscellaneous_ingredients,json=miscellaneousIngredients,proto3" json:"miscellaneous_ingredients,omitempty"`
	// Records detailing the characteristics of the beer styles for which judging guidelines have been established
	Styles []*StyleType `protobuf:"bytes,5,rep,name=styles,proto3" json:"styles,omitempty"`
	// A collection of steps providing process information for common fermentation procedures
	Fermentations []*FermentationProcedureType `protobuf:"bytes,6,rep,name=fermentations,proto3" json:"fermentations,omitempty"`
	// A collection of steps providing process information for common boil procedures
	Boil []*BoilProcedureType `protobuf:"bytes,7,rep,name=boil,proto3" json:"boil,omitempty"`
	// Explicitly encode version within list of records
	Version float64 `protobuf:"fixed64,8,opt,name=version,proto3" json:"version,omitempty"`
	// Records for any ingredient that contributes to the gravity of the beer
	Fermentables []*FermentableType `protobuf:"bytes,9,rep,name=fermentables,proto3" json:"fermentables,omitempty"`
	// The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step
	TimingObject *TimingType `protobuf:"bytes,10,opt,name=timing_object,json=timingObject,proto3" json:"timing_object,omitempty"`
	// Records detailing the wide array of unique cultures
	Cultures []*CultureInformation `protobuf:"bytes,11,rep,name=cultures,proto3" json:"cultures,omitempty"`
	// Provides necessary information for brewing equipment
	Equipments []*EquipmentType `protobuf:"bytes,12,rep,name=equipments,proto3" json:"equipments,omitempty"`
	// A collection of steps providing process information for common packaging procedures
	Packaging []*PackagingProcedureType `protobuf:"bytes,13,rep,name=packaging,proto3" json:"packaging,omitempty"`
	// Records detailing the many properties of unique hop varieties
	HopVarieties []*VarietyInformation `protobuf:"bytes,14,rep,name=hop_varieties,json=hopVarieties,proto3" json:"hop_varieties,omitempty"`
	// Records for water profiles used in brewing
	Profiles []*WaterBase `protobuf:"bytes,15,rep,name=profiles,proto3" json:"profiles,omitempty"`
}

func (x *Recipe) Reset() {
	*x = Recipe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recipe) ProtoMessage() {}

func (x *Recipe) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recipe.ProtoReflect.Descriptor instead.
func (*Recipe) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{0}
}

func (x *Recipe) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Recipe) GetMashes() []*MashProcedureType {
	if x != nil {
		return x.Mashes
	}
	return nil
}

func (x *Recipe) GetRecipes() []*RecipeType {
	if x != nil {
		return x.Recipes
	}
	return nil
}

func (x *Recipe) GetMiscellaneousIngredients() []*MiscellaneousType {
	if x != nil {
		return x.MiscellaneousIngredients
	}
	return nil
}

func (x *Recipe) GetStyles() []*StyleType {
	if x != nil {
		return x.Styles
	}
	return nil
}

func (x *Recipe) GetFermentations() []*FermentationProcedureType {
	if x != nil {
		return x.Fermentations
	}
	return nil
}

func (x *Recipe) GetBoil() []*BoilProcedureType {
	if x != nil {
		return x.Boil
	}
	return nil
}

func (x *Recipe) GetVersion() float64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Recipe) GetFermentables() []*FermentableType {
	if x != nil {
		return x.Fermentables
	}
	return nil
}

func (x *Recipe) GetTimingObject() *TimingType {
	if x != nil {
		return x.TimingObject
	}
	return nil
}

func (x *Recipe) GetCultures() []*CultureInformation {
	if x != nil {
		return x.Cultures
	}
	return nil
}

func (x *Recipe) GetEquipments() []*EquipmentType {
	if x != nil {
		return x.Equipments
	}
	return nil
}

func (x *Recipe) GetPackaging() []*PackagingProcedureType {
	if x != nil {
		return x.Packaging
	}
	return nil
}

func (x *Recipe) GetHopVarieties() []*VarietyInformation {
	if x != nil {
		return x.HopVarieties
	}
	return nil
}

func (x *Recipe) GetProfiles() []*WaterBase {
	if x != nil {
		return x.Profiles
	}
	return nil
}

// This defines the procedure for performing unique mashing processes
type MashProcedureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Initial grain temperature prior to the start of the mash
	GrainTemperature *TemperatureType `protobuf:"bytes,2,opt,name=grain_temperature,json=grainTemperature,proto3" json:"grain_temperature,omitempty"`
	Notes            string           `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty"`
	MashSteps        []*MashStepType  `protobuf:"bytes,4,rep,name=mash_steps,json=mashSteps,proto3" json:"mash_steps,omitempty"`
	Name             string           `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MashProcedureType) Reset() {
	*x = MashProcedureType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MashProcedureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MashProcedureType) ProtoMessage() {}

func (x *MashProcedureType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MashProcedureType.ProtoReflect.Descriptor instead.
func (*MashProcedureType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{1}
}

func (x *MashProcedureType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MashProcedureType) GetGrainTemperature() *TemperatureType {
	if x != nil {
		return x.GrainTemperature
	}
	return nil
}

func (x *MashProcedureType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MashProcedureType) GetMashSteps() []*MashStepType {
	if x != nil {
		return x.MashSteps
	}
	return nil
}

func (x *MashProcedureType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// MashStepType - a per step representation occurring during the mash
type MashStepType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StepTime *TimeType `protobuf:"bytes,2,opt,name=step_time,json=stepTime,proto3" json:"step_time,omitempty"`
	// The amount of time  that passes before this step begins. eg moving from a mash step (step 1) of 148F, to a new temperature step of 156F (step 2) may take 8 minutes to heat the mash. Step 2 would have a ramp time of 8 minutes
	RampTime       *TimeType        `protobuf:"bytes,3,opt,name=ramp_time,json=rampTime,proto3" json:"ramp_time,omitempty"`
	EndTemperature *TemperatureType `protobuf:"bytes,4,opt,name=end_temperature,json=endTemperature,proto3" json:"end_temperature,omitempty"`
	Description    string           `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Temperature of the water for an infusion step
	InfuseTemperature *TemperatureType              `protobuf:"bytes,6,opt,name=infuse_temperature,json=infuseTemperature,proto3" json:"infuse_temperature,omitempty"`
	StartPh           *AcidityType                  `protobuf:"bytes,7,opt,name=start_ph,json=startPh,proto3" json:"start_ph,omitempty"`
	EndPh             *AcidityType                  `protobuf:"bytes,8,opt,name=end_ph,json=endPh,proto3" json:"end_ph,omitempty"`
	Name              string                        `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	Type              MashStepType_MashStepTypeType `protobuf:"varint,10,opt,name=type,proto3,enum=beerproto.MashStepType_MashStepTypeType" json:"type,omitempty"`
	Amount            *VolumeType                   `protobuf:"bytes,11,opt,name=amount,proto3" json:"amount,omitempty"`
	StepTemperature   *TemperatureType              `protobuf:"bytes,12,opt,name=step_temperature,json=stepTemperature,proto3" json:"step_temperature,omitempty"`
	// Also known as the mash thickness. eg 1.75 qt/lb or 3.65 L/kg
	WaterGrainRatio *SpecificVolumeType `protobuf:"bytes,13,opt,name=water_grain_ratio,json=waterGrainRatio,proto3" json:"water_grain_ratio,omitempty"`
}

func (x *MashStepType) Reset() {
	*x = MashStepType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MashStepType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MashStepType) ProtoMessage() {}

func (x *MashStepType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MashStepType.ProtoReflect.Descriptor instead.
func (*MashStepType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{2}
}

func (x *MashStepType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MashStepType) GetStepTime() *TimeType {
	if x != nil {
		return x.StepTime
	}
	return nil
}

func (x *MashStepType) GetRampTime() *TimeType {
	if x != nil {
		return x.RampTime
	}
	return nil
}

func (x *MashStepType) GetEndTemperature() *TemperatureType {
	if x != nil {
		return x.EndTemperature
	}
	return nil
}

func (x *MashStepType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MashStepType) GetInfuseTemperature() *TemperatureType {
	if x != nil {
		return x.InfuseTemperature
	}
	return nil
}

func (x *MashStepType) GetStartPh() *AcidityType {
	if x != nil {
		return x.StartPh
	}
	return nil
}

func (x *MashStepType) GetEndPh() *AcidityType {
	if x != nil {
		return x.EndPh
	}
	return nil
}

func (x *MashStepType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MashStepType) GetType() MashStepType_MashStepTypeType {
	if x != nil {
		return x.Type
	}
	return MashStepType_NULL
}

func (x *MashStepType) GetAmount() *VolumeType {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *MashStepType) GetStepTemperature() *TemperatureType {
	if x != nil {
		return x.StepTemperature
	}
	return nil
}

func (x *MashStepType) GetWaterGrainRatio() *SpecificVolumeType {
	if x != nil {
		return x.WaterGrainRatio
	}
	return nil
}

type TimeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64                 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  TimeType_TimeUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.TimeType_TimeUnitType" json:"unit,omitempty"`
}

func (x *TimeType) Reset() {
	*x = TimeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeType) ProtoMessage() {}

func (x *TimeType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeType.ProtoReflect.Descriptor instead.
func (*TimeType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{3}
}

func (x *TimeType) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TimeType) GetUnit() TimeType_TimeUnitType {
	if x != nil {
		return x.Unit
	}
	return TimeType_NULL
}

type AcidityType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64         `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  AcidityUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.AcidityUnitType" json:"unit,omitempty"`
}

func (x *AcidityType) Reset() {
	*x = AcidityType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcidityType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcidityType) ProtoMessage() {}

func (x *AcidityType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcidityType.ProtoReflect.Descriptor instead.
func (*AcidityType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{4}
}

func (x *AcidityType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *AcidityType) GetUnit() AcidityUnitType {
	if x != nil {
		return x.Unit
	}
	return AcidityUnitType_NULL_ACIDITYUNITTYPE
}

type ViscosityType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64           `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  ViscosityUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.ViscosityUnitType" json:"unit,omitempty"`
}

func (x *ViscosityType) Reset() {
	*x = ViscosityType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViscosityType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViscosityType) ProtoMessage() {}

func (x *ViscosityType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViscosityType.ProtoReflect.Descriptor instead.
func (*ViscosityType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{5}
}

func (x *ViscosityType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ViscosityType) GetUnit() ViscosityUnitType {
	if x != nil {
		return x.Unit
	}
	return ViscosityUnitType_NULL_VISCOSITYUNITTYPE
}

type VolumeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64                   `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  VolumeType_VolumeUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.VolumeType_VolumeUnitType" json:"unit,omitempty"`
}

func (x *VolumeType) Reset() {
	*x = VolumeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeType) ProtoMessage() {}

func (x *VolumeType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeType.ProtoReflect.Descriptor instead.
func (*VolumeType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{6}
}

func (x *VolumeType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *VolumeType) GetUnit() VolumeType_VolumeUnitType {
	if x != nil {
		return x.Unit
	}
	return VolumeType_NULL
}

type SpecificVolumeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64                                   `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  SpecificVolumeType_SpecificVolumeUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.SpecificVolumeType_SpecificVolumeUnitType" json:"unit,omitempty"`
}

func (x *SpecificVolumeType) Reset() {
	*x = SpecificVolumeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecificVolumeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecificVolumeType) ProtoMessage() {}

func (x *SpecificVolumeType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecificVolumeType.ProtoReflect.Descriptor instead.
func (*SpecificVolumeType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{7}
}

func (x *SpecificVolumeType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *SpecificVolumeType) GetUnit() SpecificVolumeType_SpecificVolumeUnitType {
	if x != nil {
		return x.Unit
	}
	return SpecificVolumeType_NULL
}

// RecipeType composes the information stored in a recipe
type RecipeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Used to store each efficiency component, including conversion, and brewhouse
	Efficiency *EfficiencyType  `protobuf:"bytes,2,opt,name=efficiency,proto3" json:"efficiency,omitempty"`
	Style      *RecipeStyleType `protobuf:"bytes,3,opt,name=style,proto3" json:"style,omitempty"`
	// Used to differentiate which IBU formula is being used in a recipe. If formula is modified in any way, eg to support whirlpool/flameout additions etc etc, please use `Other` for transparency
	IbuEstimate *IBUEstimateType `protobuf:"bytes,4,opt,name=ibu_estimate,json=ibuEstimate,proto3" json:"ibu_estimate,omitempty"`
	// The color of the finished beer, using SRM or EBC
	ColorEstimate *ColorType `protobuf:"bytes,5,opt,name=color_estimate,json=colorEstimate,proto3" json:"color_estimate,omitempty"`
	// The final beer pH at the end of fermentation
	BeerPh   *AcidityType              `protobuf:"bytes,6,opt,name=beer_ph,json=beerPh,proto3" json:"beer_ph,omitempty"`
	Name     string                    `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Type     RecipeType_RecipeTypeType `protobuf:"varint,8,opt,name=type,proto3,enum=beerproto.RecipeType_RecipeTypeType" json:"type,omitempty"`
	Coauthor string                    `protobuf:"bytes,9,opt,name=coauthor,proto3" json:"coauthor,omitempty"`
	// The gravity of wort when transffered to the fermenter
	OriginalGravity *GravityType `protobuf:"bytes,10,opt,name=original_gravity,json=originalGravity,proto3" json:"original_gravity,omitempty"`
	// The gravity of beer at the end of fermentation
	FinalGravity *GravityType `protobuf:"bytes,11,opt,name=final_gravity,json=finalGravity,proto3" json:"final_gravity,omitempty"`
	// The final carbonation of the beer when packaged or served
	Carbonation float64 `protobuf:"fixed64,12,opt,name=carbonation,proto3" json:"carbonation,omitempty"`
	// FermentationProcedureType defines the procedure for performing fermentation
	Fermentation *FermentationProcedureType `protobuf:"bytes,13,opt,name=fermentation,proto3" json:"fermentation,omitempty"`
	Author       string                     `protobuf:"bytes,14,opt,name=author,proto3" json:"author,omitempty"`
	// A collection of all ingredients used for the recipe
	Ingredients *IngredientsType `protobuf:"bytes,15,opt,name=ingredients,proto3" json:"ingredients,omitempty"`
	// This defines the procedure for performing unique mashing processes
	Mash *MashProcedureType `protobuf:"bytes,16,opt,name=mash,proto3" json:"mash,omitempty"`
	// Describes the procedure for packaging your beverage
	Packaging *PackagingProcedureType `protobuf:"bytes,17,opt,name=packaging,proto3" json:"packaging,omitempty"`
	// Defines the procedure for performing a boil. A boil procedure with no steps is the same as a standard single step boil
	Boil *BoilProcedureType `protobuf:"bytes,18,opt,name=boil,proto3" json:"boil,omitempty"`
	// Used to store subjective tasting notes, and rating
	Taste           *TasteType `protobuf:"bytes,19,opt,name=taste,proto3" json:"taste,omitempty"`
	CaloriesPerPint float64    `protobuf:"fixed64,20,opt,name=calories_per_pint,json=caloriesPerPint,proto3" json:"calories_per_pint,omitempty"`
	Created         string     `protobuf:"bytes,21,opt,name=created,proto3" json:"created,omitempty"`
	// The volume into the fermenter
	BatchSize       *VolumeType  `protobuf:"bytes,22,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	Notes           string       `protobuf:"bytes,23,opt,name=notes,proto3" json:"notes,omitempty"`
	AlcoholByVolume *PercentType `protobuf:"bytes,24,opt,name=alcohol_by_volume,json=alcoholByVolume,proto3" json:"alcohol_by_volume,omitempty"`
	// The total apparent attenuation of the finished beer after fermentation
	ApparentAttenuation *PercentType `protobuf:"bytes,25,opt,name=apparent_attenuation,json=apparentAttenuation,proto3" json:"apparent_attenuation,omitempty"`
}

func (x *RecipeType) Reset() {
	*x = RecipeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecipeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeType) ProtoMessage() {}

func (x *RecipeType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeType.ProtoReflect.Descriptor instead.
func (*RecipeType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{8}
}

func (x *RecipeType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecipeType) GetEfficiency() *EfficiencyType {
	if x != nil {
		return x.Efficiency
	}
	return nil
}

func (x *RecipeType) GetStyle() *RecipeStyleType {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *RecipeType) GetIbuEstimate() *IBUEstimateType {
	if x != nil {
		return x.IbuEstimate
	}
	return nil
}

func (x *RecipeType) GetColorEstimate() *ColorType {
	if x != nil {
		return x.ColorEstimate
	}
	return nil
}

func (x *RecipeType) GetBeerPh() *AcidityType {
	if x != nil {
		return x.BeerPh
	}
	return nil
}

func (x *RecipeType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeType) GetType() RecipeType_RecipeTypeType {
	if x != nil {
		return x.Type
	}
	return RecipeType_NULL_RECIPETYPETYPE
}

func (x *RecipeType) GetCoauthor() string {
	if x != nil {
		return x.Coauthor
	}
	return ""
}

func (x *RecipeType) GetOriginalGravity() *GravityType {
	if x != nil {
		return x.OriginalGravity
	}
	return nil
}

func (x *RecipeType) GetFinalGravity() *GravityType {
	if x != nil {
		return x.FinalGravity
	}
	return nil
}

func (x *RecipeType) GetCarbonation() float64 {
	if x != nil {
		return x.Carbonation
	}
	return 0
}

func (x *RecipeType) GetFermentation() *FermentationProcedureType {
	if x != nil {
		return x.Fermentation
	}
	return nil
}

func (x *RecipeType) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *RecipeType) GetIngredients() *IngredientsType {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

func (x *RecipeType) GetMash() *MashProcedureType {
	if x != nil {
		return x.Mash
	}
	return nil
}

func (x *RecipeType) GetPackaging() *PackagingProcedureType {
	if x != nil {
		return x.Packaging
	}
	return nil
}

func (x *RecipeType) GetBoil() *BoilProcedureType {
	if x != nil {
		return x.Boil
	}
	return nil
}

func (x *RecipeType) GetTaste() *TasteType {
	if x != nil {
		return x.Taste
	}
	return nil
}

func (x *RecipeType) GetCaloriesPerPint() float64 {
	if x != nil {
		return x.CaloriesPerPint
	}
	return 0
}

func (x *RecipeType) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *RecipeType) GetBatchSize() *VolumeType {
	if x != nil {
		return x.BatchSize
	}
	return nil
}

func (x *RecipeType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeType) GetAlcoholByVolume() *PercentType {
	if x != nil {
		return x.AlcoholByVolume
	}
	return nil
}

func (x *RecipeType) GetApparentAttenuation() *PercentType {
	if x != nil {
		return x.ApparentAttenuation
	}
	return nil
}

// The efficiencyType stores each efficiency component
type EfficiencyType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The percentage of sugar from the grain yield that is extracted and converted during the mash
	Conversion *PercentType `protobuf:"bytes,1,opt,name=conversion,proto3" json:"conversion,omitempty"`
	// The percentage of sugar that makes it from the mash tun to the kettle
	Lauter *PercentType `protobuf:"bytes,2,opt,name=lauter,proto3" json:"lauter,omitempty"`
	// The percentage of sugar that makes it from the grain to the kettle
	Mash *PercentType `protobuf:"bytes,3,opt,name=mash,proto3" json:"mash,omitempty"`
	// The percentage of sugar that makes it from the grain to the fermenter
	Brewhouse *PercentType `protobuf:"bytes,4,opt,name=brewhouse,proto3" json:"brewhouse,omitempty"`
}

func (x *EfficiencyType) Reset() {
	*x = EfficiencyType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EfficiencyType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EfficiencyType) ProtoMessage() {}

func (x *EfficiencyType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EfficiencyType.ProtoReflect.Descriptor instead.
func (*EfficiencyType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{9}
}

func (x *EfficiencyType) GetConversion() *PercentType {
	if x != nil {
		return x.Conversion
	}
	return nil
}

func (x *EfficiencyType) GetLauter() *PercentType {
	if x != nil {
		return x.Lauter
	}
	return nil
}

func (x *EfficiencyType) GetMash() *PercentType {
	if x != nil {
		return x.Mash
	}
	return nil
}

func (x *EfficiencyType) GetBrewhouse() *PercentType {
	if x != nil {
		return x.Brewhouse
	}
	return nil
}

// RecipeStyleType defines style information stored in a recipe record
type RecipeStyleType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           RecipeStyleType_StyleCategories `protobuf:"varint,1,opt,name=type,proto3,enum=beerproto.RecipeStyleType_StyleCategories" json:"type,omitempty"`
	Name           string                          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Category       string                          `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	CategoryNumber int32                           `protobuf:"varint,4,opt,name=category_number,json=categoryNumber,proto3" json:"category_number,omitempty"`
	StyleLetter    string                          `protobuf:"bytes,5,opt,name=style_letter,json=styleLetter,proto3" json:"style_letter,omitempty"`
	StyleGuide     string                          `protobuf:"bytes,6,opt,name=style_guide,json=styleGuide,proto3" json:"style_guide,omitempty"`
}

func (x *RecipeStyleType) Reset() {
	*x = RecipeStyleType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecipeStyleType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStyleType) ProtoMessage() {}

func (x *RecipeStyleType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStyleType.ProtoReflect.Descriptor instead.
func (*RecipeStyleType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{10}
}

func (x *RecipeStyleType) GetType() RecipeStyleType_StyleCategories {
	if x != nil {
		return x.Type
	}
	return RecipeStyleType_NULL_STYLECATEGORIES
}

func (x *RecipeStyleType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeStyleType) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *RecipeStyleType) GetCategoryNumber() int32 {
	if x != nil {
		return x.CategoryNumber
	}
	return 0
}

func (x *RecipeStyleType) GetStyleLetter() string {
	if x != nil {
		return x.StyleLetter
	}
	return ""
}

func (x *RecipeStyleType) GetStyleGuide() string {
	if x != nil {
		return x.StyleGuide
	}
	return ""
}

// Used to differentiate which IBU formula is being used in a recipe. If formula is modified in any way, eg to support whirlpool/flameout additions etc etc, please use `Other` for transparency
type IBUEstimateType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method IBUEstimateType_IBUMethodType `protobuf:"varint,1,opt,name=method,proto3,enum=beerproto.IBUEstimateType_IBUMethodType" json:"method,omitempty"`
}

func (x *IBUEstimateType) Reset() {
	*x = IBUEstimateType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IBUEstimateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IBUEstimateType) ProtoMessage() {}

func (x *IBUEstimateType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IBUEstimateType.ProtoReflect.Descriptor instead.
func (*IBUEstimateType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{11}
}

func (x *IBUEstimateType) GetMethod() IBUEstimateType_IBUMethodType {
	if x != nil {
		return x.Method
	}
	return IBUEstimateType_NULL_IBUMETHODTYPE
}

type IngredientsType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// miscellaneous_additions collects all the miscellaneous items for use in a recipe
	MiscellaneousAdditions []*MiscellaneousAdditionType `protobuf:"bytes,1,rep,name=miscellaneous_additions,json=miscellaneousAdditions,proto3" json:"miscellaneous_additions,omitempty"`
	// culture_additions collects all the culture items for use in a recipe
	CultureAdditions []*CultureAdditionType `protobuf:"bytes,2,rep,name=culture_additions,json=cultureAdditions,proto3" json:"culture_additions,omitempty"`
	// water_additions collects all the water items for use in a recipe
	WaterAdditions []*WaterAdditionType `protobuf:"bytes,3,rep,name=water_additions,json=waterAdditions,proto3" json:"water_additions,omitempty"`
	// fermentable_additions collects all the fermentable ingredients for use in a recipe
	FermentableAdditions []*FermentableAdditionType `protobuf:"bytes,4,rep,name=fermentable_additions,json=fermentableAdditions,proto3" json:"fermentable_additions,omitempty"`
	// hop_additions collects all the hops for use in a recipe
	HopAdditions []*HopAdditionType `protobuf:"bytes,5,rep,name=hop_additions,json=hopAdditions,proto3" json:"hop_additions,omitempty"`
}

func (x *IngredientsType) Reset() {
	*x = IngredientsType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngredientsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngredientsType) ProtoMessage() {}

func (x *IngredientsType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngredientsType.ProtoReflect.Descriptor instead.
func (*IngredientsType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{12}
}

func (x *IngredientsType) GetMiscellaneousAdditions() []*MiscellaneousAdditionType {
	if x != nil {
		return x.MiscellaneousAdditions
	}
	return nil
}

func (x *IngredientsType) GetCultureAdditions() []*CultureAdditionType {
	if x != nil {
		return x.CultureAdditions
	}
	return nil
}

func (x *IngredientsType) GetWaterAdditions() []*WaterAdditionType {
	if x != nil {
		return x.WaterAdditions
	}
	return nil
}

func (x *IngredientsType) GetFermentableAdditions() []*FermentableAdditionType {
	if x != nil {
		return x.FermentableAdditions
	}
	return nil
}

func (x *IngredientsType) GetHopAdditions() []*HopAdditionType {
	if x != nil {
		return x.HopAdditions
	}
	return nil
}

// MiscellaneousAdditionType collects the attributes of each miscellaneous ingredient for use in a recipe
type MiscellaneousAdditionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Producer string `protobuf:"bytes,3,opt,name=producer,proto3" json:"producer,omitempty"`
	// The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step.
	Timing    *TimingType           `protobuf:"bytes,4,opt,name=timing,proto3" json:"timing,omitempty"`
	ProductId string                `protobuf:"bytes,5,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Type      MiscellaneousBaseType `protobuf:"varint,6,opt,name=type,proto3,enum=beerproto.MiscellaneousBaseType" json:"type,omitempty"`
	// Types that are assignable to Amount:
	//	*MiscellaneousAdditionType_Mass
	//	*MiscellaneousAdditionType_Unit
	//	*MiscellaneousAdditionType_Volume
	Amount isMiscellaneousAdditionType_Amount `protobuf_oneof:"amount"`
}

func (x *MiscellaneousAdditionType) Reset() {
	*x = MiscellaneousAdditionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiscellaneousAdditionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiscellaneousAdditionType) ProtoMessage() {}

func (x *MiscellaneousAdditionType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiscellaneousAdditionType.ProtoReflect.Descriptor instead.
func (*MiscellaneousAdditionType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{13}
}

func (x *MiscellaneousAdditionType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MiscellaneousAdditionType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MiscellaneousAdditionType) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *MiscellaneousAdditionType) GetTiming() *TimingType {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *MiscellaneousAdditionType) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *MiscellaneousAdditionType) GetType() MiscellaneousBaseType {
	if x != nil {
		return x.Type
	}
	return MiscellaneousBaseType_NULL
}

func (m *MiscellaneousAdditionType) GetAmount() isMiscellaneousAdditionType_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (x *MiscellaneousAdditionType) GetMass() *MassType {
	if x, ok := x.GetAmount().(*MiscellaneousAdditionType_Mass); ok {
		return x.Mass
	}
	return nil
}

func (x *MiscellaneousAdditionType) GetUnit() *UnitType {
	if x, ok := x.GetAmount().(*MiscellaneousAdditionType_Unit); ok {
		return x.Unit
	}
	return nil
}

func (x *MiscellaneousAdditionType) GetVolume() *VolumeType {
	if x, ok := x.GetAmount().(*MiscellaneousAdditionType_Volume); ok {
		return x.Volume
	}
	return nil
}

type isMiscellaneousAdditionType_Amount interface {
	isMiscellaneousAdditionType_Amount()
}

type MiscellaneousAdditionType_Mass struct {
	Mass *MassType `protobuf:"bytes,7,opt,name=mass,proto3,oneof"`
}

type MiscellaneousAdditionType_Unit struct {
	Unit *UnitType `protobuf:"bytes,8,opt,name=unit,proto3,oneof"`
}

type MiscellaneousAdditionType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,9,opt,name=volume,proto3,oneof"`
}

func (*MiscellaneousAdditionType_Mass) isMiscellaneousAdditionType_Amount() {}

func (*MiscellaneousAdditionType_Unit) isMiscellaneousAdditionType_Amount() {}

func (*MiscellaneousAdditionType_Volume) isMiscellaneousAdditionType_Amount() {}

type MassType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64      `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  MassUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.MassUnitType" json:"unit,omitempty"`
}

func (x *MassType) Reset() {
	*x = MassType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MassType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MassType) ProtoMessage() {}

func (x *MassType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MassType.ProtoReflect.Descriptor instead.
func (*MassType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{14}
}

func (x *MassType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MassType) GetUnit() MassUnitType {
	if x != nil {
		return x.Unit
	}
	return MassUnitType_NULL_MASSUNITTYPE
}

// UnitType is used where unitless amounts are required, such as 1 apple, or 1 yeast packet
type UnitType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64      `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  UnitUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.UnitUnitType" json:"unit,omitempty"`
}

func (x *UnitType) Reset() {
	*x = UnitType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitType) ProtoMessage() {}

func (x *UnitType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitType.ProtoReflect.Descriptor instead.
func (*UnitType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{15}
}

func (x *UnitType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UnitType) GetUnit() UnitUnitType {
	if x != nil {
		return x.Unit
	}
	return UnitUnitType_NULL_UNITUNITTYPE
}

// CultureAdditionType collects the attributes of each culture ingredient for use in a recipe
type CultureAdditionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Form              CultureBaseForm `protobuf:"varint,2,opt,name=form,proto3,enum=beerproto.CultureBaseForm" json:"form,omitempty"`
	ProductId         string          `protobuf:"bytes,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Name              string          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	CellCountBillions int32           `protobuf:"varint,5,opt,name=cell_count_billions,json=cellCountBillions,proto3" json:"cell_count_billions,omitempty"`
	TimesCultured     int32           `protobuf:"varint,6,opt,name=times_cultured,json=timesCultured,proto3" json:"times_cultured,omitempty"`
	Producer          string          `protobuf:"bytes,7,opt,name=producer,proto3" json:"producer,omitempty"`
	Type              CultureBaseType `protobuf:"varint,8,opt,name=type,proto3,enum=beerproto.CultureBaseType" json:"type,omitempty"`
	// The expected, or measured apparent attenuation for a given culture in a given recipe. In comparison to attenuation range, this is a single value.
	Attenuation *PercentType `protobuf:"bytes,9,opt,name=attenuation,proto3" json:"attenuation,omitempty"`
	// The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step.
	Timing *TimingType `protobuf:"bytes,10,opt,name=timing,proto3" json:"timing,omitempty"`
	// Types that are assignable to Amount:
	//	*CultureAdditionType_Mass
	//	*CultureAdditionType_Unit
	//	*CultureAdditionType_Volume
	Amount isCultureAdditionType_Amount `protobuf_oneof:"amount"`
}

func (x *CultureAdditionType) Reset() {
	*x = CultureAdditionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CultureAdditionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CultureAdditionType) ProtoMessage() {}

func (x *CultureAdditionType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CultureAdditionType.ProtoReflect.Descriptor instead.
func (*CultureAdditionType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{16}
}

func (x *CultureAdditionType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CultureAdditionType) GetForm() CultureBaseForm {
	if x != nil {
		return x.Form
	}
	return CultureBaseForm_NULL_CULTUREBASEFORM
}

func (x *CultureAdditionType) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *CultureAdditionType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CultureAdditionType) GetCellCountBillions() int32 {
	if x != nil {
		return x.CellCountBillions
	}
	return 0
}

func (x *CultureAdditionType) GetTimesCultured() int32 {
	if x != nil {
		return x.TimesCultured
	}
	return 0
}

func (x *CultureAdditionType) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *CultureAdditionType) GetType() CultureBaseType {
	if x != nil {
		return x.Type
	}
	return CultureBaseType_NULL_CULTUREBASETYPE
}

func (x *CultureAdditionType) GetAttenuation() *PercentType {
	if x != nil {
		return x.Attenuation
	}
	return nil
}

func (x *CultureAdditionType) GetTiming() *TimingType {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (m *CultureAdditionType) GetAmount() isCultureAdditionType_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (x *CultureAdditionType) GetMass() *MassType {
	if x, ok := x.GetAmount().(*CultureAdditionType_Mass); ok {
		return x.Mass
	}
	return nil
}

func (x *CultureAdditionType) GetUnit() *UnitType {
	if x, ok := x.GetAmount().(*CultureAdditionType_Unit); ok {
		return x.Unit
	}
	return nil
}

func (x *CultureAdditionType) GetVolume() *VolumeType {
	if x, ok := x.GetAmount().(*CultureAdditionType_Volume); ok {
		return x.Volume
	}
	return nil
}

type isCultureAdditionType_Amount interface {
	isCultureAdditionType_Amount()
}

type CultureAdditionType_Mass struct {
	Mass *MassType `protobuf:"bytes,11,opt,name=mass,proto3,oneof"`
}

type CultureAdditionType_Unit struct {
	Unit *UnitType `protobuf:"bytes,12,opt,name=unit,proto3,oneof"`
}

type CultureAdditionType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,13,opt,name=volume,proto3,oneof"`
}

func (*CultureAdditionType_Mass) isCultureAdditionType_Amount() {}

func (*CultureAdditionType_Unit) isCultureAdditionType_Amount() {}

func (*CultureAdditionType_Volume) isCultureAdditionType_Amount() {}

// The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step
type TimingType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// What time during a process step is added, eg a value of 2 days for a dry hop addition would be added 2 days into the fermentation step.
	Time *TimeType `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// How long an ingredient addition remains, this was referred to as time in the BeerXML standard. E.G. A 40 minute hop boil additions means to boil for 40 minutes, and a 2 day duration for a dry hop means to remove it after 2 days.
	Duration *TimeType `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	// A continuous addition is spread out evenly and added during the entire process step, eg 60 minute IPA by dogfish head takes all ofthe hop additions and adds them throughout the entire boil.
	Continuous bool `protobuf:"varint,3,opt,name=continuous,proto3" json:"continuous,omitempty"`
	// Used to indicate when an addition is added based on a desired specific gravity. E.G. Add dry hop at when SG is 1.018.
	SpecificGravity *GravityType `protobuf:"bytes,4,opt,name=specific_gravity,json=specificGravity,proto3" json:"specific_gravity,omitempty"`
	// Used to indicate when an addition is added based on a desired specific gravity. eg Add brett when pH is 3.4.
	Ph *AcidityType `protobuf:"bytes,5,opt,name=ph,proto3" json:"ph,omitempty"`
	// Used to indicate what step this ingredient timing addition is referencing. EG A value of 2 for add_to_fermentation would mean to add during the second fermentation step.
	Step int32   `protobuf:"varint,6,opt,name=step,proto3" json:"step,omitempty"`
	Use  UseType `protobuf:"varint,7,opt,name=use,proto3,enum=beerproto.UseType" json:"use,omitempty"`
}

func (x *TimingType) Reset() {
	*x = TimingType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimingType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimingType) ProtoMessage() {}

func (x *TimingType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimingType.ProtoReflect.Descriptor instead.
func (*TimingType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{17}
}

func (x *TimingType) GetTime() *TimeType {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TimingType) GetDuration() *TimeType {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *TimingType) GetContinuous() bool {
	if x != nil {
		return x.Continuous
	}
	return false
}

func (x *TimingType) GetSpecificGravity() *GravityType {
	if x != nil {
		return x.SpecificGravity
	}
	return nil
}

func (x *TimingType) GetPh() *AcidityType {
	if x != nil {
		return x.Ph
	}
	return nil
}

func (x *TimingType) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *TimingType) GetUse() UseType {
	if x != nil {
		return x.Use
	}
	return UseType_NULL_USETYPE
}

// WaterAdditionType collects the attributes of each water addition for use in a recipe
type WaterAdditionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Flouride    *ConcentrationType `protobuf:"bytes,2,opt,name=flouride,proto3" json:"flouride,omitempty"`
	Sulfate     *ConcentrationType `protobuf:"bytes,3,opt,name=sulfate,proto3" json:"sulfate,omitempty"`
	Producer    string             `protobuf:"bytes,4,opt,name=producer,proto3" json:"producer,omitempty"`
	Nitrate     *ConcentrationType `protobuf:"bytes,5,opt,name=nitrate,proto3" json:"nitrate,omitempty"`
	Nitrite     *ConcentrationType `protobuf:"bytes,6,opt,name=nitrite,proto3" json:"nitrite,omitempty"`
	Chloride    *ConcentrationType `protobuf:"bytes,7,opt,name=chloride,proto3" json:"chloride,omitempty"`
	Amount      *VolumeType        `protobuf:"bytes,8,opt,name=amount,proto3" json:"amount,omitempty"`
	Name        string             `protobuf:"bytes,89,opt,name=name,proto3" json:"name,omitempty"`
	Potassium   *ConcentrationType `protobuf:"bytes,10,opt,name=potassium,proto3" json:"potassium,omitempty"`
	Magnesium   *ConcentrationType `protobuf:"bytes,11,opt,name=magnesium,proto3" json:"magnesium,omitempty"`
	Iron        *ConcentrationType `protobuf:"bytes,12,opt,name=iron,proto3" json:"iron,omitempty"`
	Bicarbonate *ConcentrationType `protobuf:"bytes,13,opt,name=bicarbonate,proto3" json:"bicarbonate,omitempty"`
	Calcium     *ConcentrationType `protobuf:"bytes,14,opt,name=calcium,proto3" json:"calcium,omitempty"`
	Carbonate   *ConcentrationType `protobuf:"bytes,15,opt,name=carbonate,proto3" json:"carbonate,omitempty"`
	Sodium      *ConcentrationType `protobuf:"bytes,16,opt,name=sodium,proto3" json:"sodium,omitempty"`
}

func (x *WaterAdditionType) Reset() {
	*x = WaterAdditionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaterAdditionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaterAdditionType) ProtoMessage() {}

func (x *WaterAdditionType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaterAdditionType.ProtoReflect.Descriptor instead.
func (*WaterAdditionType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{18}
}

func (x *WaterAdditionType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WaterAdditionType) GetFlouride() *ConcentrationType {
	if x != nil {
		return x.Flouride
	}
	return nil
}

func (x *WaterAdditionType) GetSulfate() *ConcentrationType {
	if x != nil {
		return x.Sulfate
	}
	return nil
}

func (x *WaterAdditionType) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *WaterAdditionType) GetNitrate() *ConcentrationType {
	if x != nil {
		return x.Nitrate
	}
	return nil
}

func (x *WaterAdditionType) GetNitrite() *ConcentrationType {
	if x != nil {
		return x.Nitrite
	}
	return nil
}

func (x *WaterAdditionType) GetChloride() *ConcentrationType {
	if x != nil {
		return x.Chloride
	}
	return nil
}

func (x *WaterAdditionType) GetAmount() *VolumeType {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *WaterAdditionType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WaterAdditionType) GetPotassium() *ConcentrationType {
	if x != nil {
		return x.Potassium
	}
	return nil
}

func (x *WaterAdditionType) GetMagnesium() *ConcentrationType {
	if x != nil {
		return x.Magnesium
	}
	return nil
}

func (x *WaterAdditionType) GetIron() *ConcentrationType {
	if x != nil {
		return x.Iron
	}
	return nil
}

func (x *WaterAdditionType) GetBicarbonate() *ConcentrationType {
	if x != nil {
		return x.Bicarbonate
	}
	return nil
}

func (x *WaterAdditionType) GetCalcium() *ConcentrationType {
	if x != nil {
		return x.Calcium
	}
	return nil
}

func (x *WaterAdditionType) GetCarbonate() *ConcentrationType {
	if x != nil {
		return x.Carbonate
	}
	return nil
}

func (x *WaterAdditionType) GetSodium() *ConcentrationType {
	if x != nil {
		return x.Sodium
	}
	return nil
}

type ConcentrationType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64               `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  ConcentrationUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.ConcentrationUnitType" json:"unit,omitempty"`
}

func (x *ConcentrationType) Reset() {
	*x = ConcentrationType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcentrationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcentrationType) ProtoMessage() {}

func (x *ConcentrationType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcentrationType.ProtoReflect.Descriptor instead.
func (*ConcentrationType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{19}
}

func (x *ConcentrationType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ConcentrationType) GetUnit() ConcentrationUnitType {
	if x != nil {
		return x.Unit
	}
	return ConcentrationUnitType_NULL_CONCENTRATIONUNITTYPE
}

// FermentableAdditionType collects the attributes of each fermentable ingredient for use in a recipe fermentable bill
type FermentableAdditionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type       FermentableBaseType `protobuf:"varint,2,opt,name=type,proto3,enum=beerproto.FermentableBaseType" json:"type,omitempty"`
	Origin     string              `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
	GrainGroup GrainGroup          `protobuf:"varint,4,opt,name=grain_group,json=grainGroup,proto3,enum=beerproto.GrainGroup" json:"grain_group,omitempty"`
	Yield      *YieldType          `protobuf:"bytes,5,opt,name=yield,proto3" json:"yield,omitempty"`
	Color      *ColorType          `protobuf:"bytes,6,opt,name=color,proto3" json:"color,omitempty"`
	Name       string              `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Producer   string              `protobuf:"bytes,8,opt,name=producer,proto3" json:"producer,omitempty"`
	ProductId  string              `protobuf:"bytes,9,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step.
	Timing *TimingType `protobuf:"bytes,10,opt,name=timing,proto3" json:"timing,omitempty"`
	// Types that are assignable to Amount:
	//	*FermentableAdditionType_Mass
	//	*FermentableAdditionType_Volume
	Amount isFermentableAdditionType_Amount `protobuf_oneof:"amount"`
}

func (x *FermentableAdditionType) Reset() {
	*x = FermentableAdditionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FermentableAdditionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FermentableAdditionType) ProtoMessage() {}

func (x *FermentableAdditionType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FermentableAdditionType.ProtoReflect.Descriptor instead.
func (*FermentableAdditionType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{20}
}

func (x *FermentableAdditionType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FermentableAdditionType) GetType() FermentableBaseType {
	if x != nil {
		return x.Type
	}
	return FermentableBaseType_NULL_FERMENTABLEBASETYPE
}

func (x *FermentableAdditionType) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *FermentableAdditionType) GetGrainGroup() GrainGroup {
	if x != nil {
		return x.GrainGroup
	}
	return GrainGroup_NULL_GRAINGROUP
}

func (x *FermentableAdditionType) GetYield() *YieldType {
	if x != nil {
		return x.Yield
	}
	return nil
}

func (x *FermentableAdditionType) GetColor() *ColorType {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *FermentableAdditionType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FermentableAdditionType) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *FermentableAdditionType) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *FermentableAdditionType) GetTiming() *TimingType {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (m *FermentableAdditionType) GetAmount() isFermentableAdditionType_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (x *FermentableAdditionType) GetMass() *MassType {
	if x, ok := x.GetAmount().(*FermentableAdditionType_Mass); ok {
		return x.Mass
	}
	return nil
}

func (x *FermentableAdditionType) GetVolume() *VolumeType {
	if x, ok := x.GetAmount().(*FermentableAdditionType_Volume); ok {
		return x.Volume
	}
	return nil
}

type isFermentableAdditionType_Amount interface {
	isFermentableAdditionType_Amount()
}

type FermentableAdditionType_Mass struct {
	Mass *MassType `protobuf:"bytes,11,opt,name=mass,proto3,oneof"`
}

type FermentableAdditionType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,12,opt,name=volume,proto3,oneof"`
}

func (*FermentableAdditionType_Mass) isFermentableAdditionType_Amount() {}

func (*FermentableAdditionType_Volume) isFermentableAdditionType_Amount() {}

// The potential yield of the fermentable ingredient, supporting SG, or percentage. eg 1.037 or 80% are valid yield types
type YieldType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Percentage yield compared to succrose of a fine grind. eg 80%
	FineGrind *PercentType `protobuf:"bytes,1,opt,name=fine_grind,json=fineGrind,proto3" json:"fine_grind,omitempty"`
	// Percentage yield compared to succrose of a coarse grind. eg 78%
	CoarseGrind *PercentType `protobuf:"bytes,2,opt,name=coarse_grind,json=coarseGrind,proto3" json:"coarse_grind,omitempty"`
	// The difference between fine and coarse grind, a difference more than 2 percent can indicate a protein or step mash may be desirable. eg 2%
	FineCoarseDifference *PercentType `protobuf:"bytes,3,opt,name=fine_coarse_difference,json=fineCoarseDifference,proto3" json:"fine_coarse_difference,omitempty"`
	// The potential yield of the fermentable ingredient for 1 lb of grain mashed in 1 gallon of water. eg 1.037
	Potential *GravityType `protobuf:"bytes,4,opt,name=potential,proto3" json:"potential,omitempty"`
}

func (x *YieldType) Reset() {
	*x = YieldType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YieldType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YieldType) ProtoMessage() {}

func (x *YieldType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YieldType.ProtoReflect.Descriptor instead.
func (*YieldType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{21}
}

func (x *YieldType) GetFineGrind() *PercentType {
	if x != nil {
		return x.FineGrind
	}
	return nil
}

func (x *YieldType) GetCoarseGrind() *PercentType {
	if x != nil {
		return x.CoarseGrind
	}
	return nil
}

func (x *YieldType) GetFineCoarseDifference() *PercentType {
	if x != nil {
		return x.FineCoarseDifference
	}
	return nil
}

func (x *YieldType) GetPotential() *GravityType {
	if x != nil {
		return x.Potential
	}
	return nil
}

// HopAdditionType collects the attributes of each hop ingredient for use in a recipe hop bil
type HopAdditionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BetaAcid *PercentType       `protobuf:"bytes,2,opt,name=beta_acid,json=betaAcid,proto3" json:"beta_acid,omitempty"`
	Producer string             `protobuf:"bytes,3,opt,name=producer,proto3" json:"producer,omitempty"`
	Origin   string             `protobuf:"bytes,4,opt,name=origin,proto3" json:"origin,omitempty"`
	Year     string             `protobuf:"bytes,5,opt,name=year,proto3" json:"year,omitempty"`
	Form     HopVarietyBaseForm `protobuf:"varint,6,opt,name=form,proto3,enum=beerproto.HopVarietyBaseForm" json:"form,omitempty"`
	// The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step
	Timing    *TimingType  `protobuf:"bytes,7,opt,name=timing,proto3" json:"timing,omitempty"`
	Name      string       `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	ProductId string       `protobuf:"bytes,9,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	AlphaAcid *PercentType `protobuf:"bytes,10,opt,name=alpha_acid,json=alphaAcid,proto3" json:"alpha_acid,omitempty"`
	// Types that are assignable to Amount:
	//	*HopAdditionType_Mass
	//	*HopAdditionType_Volume
	Amount isHopAdditionType_Amount `protobuf_oneof:"amount"`
}

func (x *HopAdditionType) Reset() {
	*x = HopAdditionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HopAdditionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HopAdditionType) ProtoMessage() {}

func (x *HopAdditionType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HopAdditionType.ProtoReflect.Descriptor instead.
func (*HopAdditionType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{22}
}

func (x *HopAdditionType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HopAdditionType) GetBetaAcid() *PercentType {
	if x != nil {
		return x.BetaAcid
	}
	return nil
}

func (x *HopAdditionType) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *HopAdditionType) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *HopAdditionType) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *HopAdditionType) GetForm() HopVarietyBaseForm {
	if x != nil {
		return x.Form
	}
	return HopVarietyBaseForm_NULL_HOPVARIETYBASEFORM
}

func (x *HopAdditionType) GetTiming() *TimingType {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *HopAdditionType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HopAdditionType) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *HopAdditionType) GetAlphaAcid() *PercentType {
	if x != nil {
		return x.AlphaAcid
	}
	return nil
}

func (m *HopAdditionType) GetAmount() isHopAdditionType_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (x *HopAdditionType) GetMass() *MassType {
	if x, ok := x.GetAmount().(*HopAdditionType_Mass); ok {
		return x.Mass
	}
	return nil
}

func (x *HopAdditionType) GetVolume() *VolumeType {
	if x, ok := x.GetAmount().(*HopAdditionType_Volume); ok {
		return x.Volume
	}
	return nil
}

type isHopAdditionType_Amount interface {
	isHopAdditionType_Amount()
}

type HopAdditionType_Mass struct {
	Mass *MassType `protobuf:"bytes,11,opt,name=mass,proto3,oneof"`
}

type HopAdditionType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,12,opt,name=volume,proto3,oneof"`
}

func (*HopAdditionType_Mass) isHopAdditionType_Amount() {}

func (*HopAdditionType_Volume) isHopAdditionType_Amount() {}

type TasteType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notes  string  `protobuf:"bytes,1,opt,name=notes,proto3" json:"notes,omitempty"`
	Rating float64 `protobuf:"fixed64,2,opt,name=rating,proto3" json:"rating,omitempty"`
}

func (x *TasteType) Reset() {
	*x = TasteType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TasteType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TasteType) ProtoMessage() {}

func (x *TasteType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TasteType.ProtoReflect.Descriptor instead.
func (*TasteType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{23}
}

func (x *TasteType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *TasteType) GetRating() float64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

// MiscellaneousType collects the attributes of an ingredient to store as record information
type MiscellaneousType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Used to describe the purpose of the miscellaneous ingredient, e.g. whirlfloc is used for clarity.
	UseFor    string                      `protobuf:"bytes,2,opt,name=use_for,json=useFor,proto3" json:"use_for,omitempty"`
	Notes     string                      `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty"`
	Name      string                      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Producer  string                      `protobuf:"bytes,5,opt,name=producer,proto3" json:"producer,omitempty"`
	ProductId string                      `protobuf:"bytes,6,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Type      MiscellaneousBaseType       `protobuf:"varint,7,opt,name=type,proto3,enum=beerproto.MiscellaneousBaseType" json:"type,omitempty"`
	Inventory *MiscellaneousInventoryType `protobuf:"bytes,8,opt,name=inventory,proto3" json:"inventory,omitempty"`
}

func (x *MiscellaneousType) Reset() {
	*x = MiscellaneousType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiscellaneousType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiscellaneousType) ProtoMessage() {}

func (x *MiscellaneousType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiscellaneousType.ProtoReflect.Descriptor instead.
func (*MiscellaneousType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{24}
}

func (x *MiscellaneousType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MiscellaneousType) GetUseFor() string {
	if x != nil {
		return x.UseFor
	}
	return ""
}

func (x *MiscellaneousType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MiscellaneousType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MiscellaneousType) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *MiscellaneousType) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *MiscellaneousType) GetType() MiscellaneousBaseType {
	if x != nil {
		return x.Type
	}
	return MiscellaneousBaseType_NULL
}

func (x *MiscellaneousType) GetInventory() *MiscellaneousInventoryType {
	if x != nil {
		return x.Inventory
	}
	return nil
}

type MiscellaneousInventoryType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Amount:
	//	*MiscellaneousInventoryType_Mass
	//	*MiscellaneousInventoryType_Unit
	//	*MiscellaneousInventoryType_Volume
	Amount isMiscellaneousInventoryType_Amount `protobuf_oneof:"amount"`
}

func (x *MiscellaneousInventoryType) Reset() {
	*x = MiscellaneousInventoryType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiscellaneousInventoryType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiscellaneousInventoryType) ProtoMessage() {}

func (x *MiscellaneousInventoryType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiscellaneousInventoryType.ProtoReflect.Descriptor instead.
func (*MiscellaneousInventoryType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{25}
}

func (m *MiscellaneousInventoryType) GetAmount() isMiscellaneousInventoryType_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (x *MiscellaneousInventoryType) GetMass() *MassType {
	if x, ok := x.GetAmount().(*MiscellaneousInventoryType_Mass); ok {
		return x.Mass
	}
	return nil
}

func (x *MiscellaneousInventoryType) GetUnit() *UnitType {
	if x, ok := x.GetAmount().(*MiscellaneousInventoryType_Unit); ok {
		return x.Unit
	}
	return nil
}

func (x *MiscellaneousInventoryType) GetVolume() *VolumeType {
	if x, ok := x.GetAmount().(*MiscellaneousInventoryType_Volume); ok {
		return x.Volume
	}
	return nil
}

type isMiscellaneousInventoryType_Amount interface {
	isMiscellaneousInventoryType_Amount()
}

type MiscellaneousInventoryType_Mass struct {
	Mass *MassType `protobuf:"bytes,1,opt,name=mass,proto3,oneof"`
}

type MiscellaneousInventoryType_Unit struct {
	Unit *UnitType `protobuf:"bytes,2,opt,name=unit,proto3,oneof"`
}

type MiscellaneousInventoryType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,3,opt,name=volume,proto3,oneof"`
}

func (*MiscellaneousInventoryType_Mass) isMiscellaneousInventoryType_Amount() {}

func (*MiscellaneousInventoryType_Unit) isMiscellaneousInventoryType_Amount() {}

func (*MiscellaneousInventoryType_Volume) isMiscellaneousInventoryType_Amount() {}

// StyleType provide information for Style categorization
type StyleType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                           string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Aroma                        string                    `protobuf:"bytes,2,opt,name=aroma,proto3" json:"aroma,omitempty"`
	Ingredients                  string                    `protobuf:"bytes,3,opt,name=ingredients,proto3" json:"ingredients,omitempty"`
	CategoryNumber               int32                     `protobuf:"varint,4,opt,name=category_number,json=categoryNumber,proto3" json:"category_number,omitempty"`
	Notes                        string                    `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
	Flavor                       string                    `protobuf:"bytes,6,opt,name=flavor,proto3" json:"flavor,omitempty"`
	Mouthfeel                    string                    `protobuf:"bytes,7,opt,name=mouthfeel,proto3" json:"mouthfeel,omitempty"`
	FinalGravity                 *GravityRangeType         `protobuf:"bytes,8,opt,name=final_gravity,json=finalGravity,proto3" json:"final_gravity,omitempty"`
	StyleGuide                   string                    `protobuf:"bytes,9,opt,name=style_guide,json=styleGuide,proto3" json:"style_guide,omitempty"`
	Color                        *ColorRangeType           `protobuf:"bytes,10,opt,name=color,proto3" json:"color,omitempty"`
	OriginalGravity              *GravityRangeType         `protobuf:"bytes,11,opt,name=original_gravity,json=originalGravity,proto3" json:"original_gravity,omitempty"`
	Examples                     string                    `protobuf:"bytes,12,opt,name=examples,proto3" json:"examples,omitempty"`
	Name                         string                    `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	Carbonation                  *CarbonationRangeType     `protobuf:"bytes,14,opt,name=carbonation,proto3" json:"carbonation,omitempty"`
	AlcoholByVolume              *PercentRangeType         `protobuf:"bytes,15,opt,name=alcohol_by_volume,json=alcoholByVolume,proto3" json:"alcohol_by_volume,omitempty"`
	InternationalBitternessUnits *BitternessRangeType      `protobuf:"bytes,16,opt,name=international_bitterness_units,json=internationalBitternessUnits,proto3" json:"international_bitterness_units,omitempty"`
	Appearance                   string                    `protobuf:"bytes,17,opt,name=appearance,proto3" json:"appearance,omitempty"`
	Category                     string                    `protobuf:"bytes,18,opt,name=category,proto3" json:"category,omitempty"`
	StyleLetter                  string                    `protobuf:"bytes,19,opt,name=style_letter,json=styleLetter,proto3" json:"style_letter,omitempty"`
	Type                         StyleType_StyleCategories `protobuf:"varint,20,opt,name=type,proto3,enum=beerproto.StyleType_StyleCategories" json:"type,omitempty"`
	OverallImpression            string                    `protobuf:"bytes,21,opt,name=overall_impression,json=overallImpression,proto3" json:"overall_impression,omitempty"`
}

func (x *StyleType) Reset() {
	*x = StyleType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StyleType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StyleType) ProtoMessage() {}

func (x *StyleType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StyleType.ProtoReflect.Descriptor instead.
func (*StyleType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{26}
}

func (x *StyleType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StyleType) GetAroma() string {
	if x != nil {
		return x.Aroma
	}
	return ""
}

func (x *StyleType) GetIngredients() string {
	if x != nil {
		return x.Ingredients
	}
	return ""
}

func (x *StyleType) GetCategoryNumber() int32 {
	if x != nil {
		return x.CategoryNumber
	}
	return 0
}

func (x *StyleType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *StyleType) GetFlavor() string {
	if x != nil {
		return x.Flavor
	}
	return ""
}

func (x *StyleType) GetMouthfeel() string {
	if x != nil {
		return x.Mouthfeel
	}
	return ""
}

func (x *StyleType) GetFinalGravity() *GravityRangeType {
	if x != nil {
		return x.FinalGravity
	}
	return nil
}

func (x *StyleType) GetStyleGuide() string {
	if x != nil {
		return x.StyleGuide
	}
	return ""
}

func (x *StyleType) GetColor() *ColorRangeType {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *StyleType) GetOriginalGravity() *GravityRangeType {
	if x != nil {
		return x.OriginalGravity
	}
	return nil
}

func (x *StyleType) GetExamples() string {
	if x != nil {
		return x.Examples
	}
	return ""
}

func (x *StyleType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StyleType) GetCarbonation() *CarbonationRangeType {
	if x != nil {
		return x.Carbonation
	}
	return nil
}

func (x *StyleType) GetAlcoholByVolume() *PercentRangeType {
	if x != nil {
		return x.AlcoholByVolume
	}
	return nil
}

func (x *StyleType) GetInternationalBitternessUnits() *BitternessRangeType {
	if x != nil {
		return x.InternationalBitternessUnits
	}
	return nil
}

func (x *StyleType) GetAppearance() string {
	if x != nil {
		return x.Appearance
	}
	return ""
}

func (x *StyleType) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *StyleType) GetStyleLetter() string {
	if x != nil {
		return x.StyleLetter
	}
	return ""
}

func (x *StyleType) GetType() StyleType_StyleCategories {
	if x != nil {
		return x.Type
	}
	return StyleType_NULL_STYLECATEGORIES
}

func (x *StyleType) GetOverallImpression() string {
	if x != nil {
		return x.OverallImpression
	}
	return ""
}

type BitternessRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *BitternessType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum *BitternessType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *BitternessRangeType) Reset() {
	*x = BitternessRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitternessRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitternessRangeType) ProtoMessage() {}

func (x *BitternessRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitternessRangeType.ProtoReflect.Descriptor instead.
func (*BitternessRangeType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{27}
}

func (x *BitternessRangeType) GetMinimum() *BitternessType {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *BitternessRangeType) GetMaximum() *BitternessType {
	if x != nil {
		return x.Maximum
	}
	return nil
}

type BitternessType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64                           `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  BitternessType_BitternessUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.BitternessType_BitternessUnitType" json:"unit,omitempty"`
}

func (x *BitternessType) Reset() {
	*x = BitternessType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitternessType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitternessType) ProtoMessage() {}

func (x *BitternessType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitternessType.ProtoReflect.Descriptor instead.
func (*BitternessType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{28}
}

func (x *BitternessType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *BitternessType) GetUnit() BitternessType_BitternessUnitType {
	if x != nil {
		return x.Unit
	}
	return BitternessType_NULL
}

type PercentRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *PercentType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum *PercentType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *PercentRangeType) Reset() {
	*x = PercentRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PercentRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PercentRangeType) ProtoMessage() {}

func (x *PercentRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PercentRangeType.ProtoReflect.Descriptor instead.
func (*PercentRangeType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{29}
}

func (x *PercentRangeType) GetMinimum() *PercentType {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *PercentRangeType) GetMaximum() *PercentType {
	if x != nil {
		return x.Maximum
	}
	return nil
}

type PercentType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64                     `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  PercentType_PercentUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.PercentType_PercentUnitType" json:"unit,omitempty"`
}

func (x *PercentType) Reset() {
	*x = PercentType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PercentType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PercentType) ProtoMessage() {}

func (x *PercentType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PercentType.ProtoReflect.Descriptor instead.
func (*PercentType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{30}
}

func (x *PercentType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *PercentType) GetUnit() PercentType_PercentUnitType {
	if x != nil {
		return x.Unit
	}
	return PercentType_NULL
}

type GravityRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *GravityType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum *GravityType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *GravityRangeType) Reset() {
	*x = GravityRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravityRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravityRangeType) ProtoMessage() {}

func (x *GravityRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravityRangeType.ProtoReflect.Descriptor instead.
func (*GravityRangeType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{31}
}

func (x *GravityRangeType) GetMinimum() *GravityType {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *GravityRangeType) GetMaximum() *GravityType {
	if x != nil {
		return x.Maximum
	}
	return nil
}

// Gravity refers to the both the measurements of percent of sugar content, ie plato and brix, as well as relative density ie specific gravity
type GravityType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64         `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  GravityUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.GravityUnitType" json:"unit,omitempty"`
}

func (x *GravityType) Reset() {
	*x = GravityType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GravityType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GravityType) ProtoMessage() {}

func (x *GravityType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GravityType.ProtoReflect.Descriptor instead.
func (*GravityType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{32}
}

func (x *GravityType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *GravityType) GetUnit() GravityUnitType {
	if x != nil {
		return x.Unit
	}
	return GravityUnitType_NULL_GRAVITYUNITTYPE
}

type ColorRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *ColorType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum *ColorType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *ColorRangeType) Reset() {
	*x = ColorRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorRangeType) ProtoMessage() {}

func (x *ColorRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorRangeType.ProtoReflect.Descriptor instead.
func (*ColorRangeType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{33}
}

func (x *ColorRangeType) GetMinimum() *ColorType {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *ColorRangeType) GetMaximum() *ColorType {
	if x != nil {
		return x.Maximum
	}
	return nil
}

// ColorType supports both grain color properties, such as Lovibond, and wort color properties such as SRM and EBC
type ColorType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64       `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  ColorUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.ColorUnitType" json:"unit,omitempty"`
}

func (x *ColorType) Reset() {
	*x = ColorType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorType) ProtoMessage() {}

func (x *ColorType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorType.ProtoReflect.Descriptor instead.
func (*ColorType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{34}
}

func (x *ColorType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ColorType) GetUnit() ColorUnitType {
	if x != nil {
		return x.Unit
	}
	return ColorUnitType_NULL_COLORUNITTYPE
}

type CarbonationRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *CarbonationType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum *CarbonationType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *CarbonationRangeType) Reset() {
	*x = CarbonationRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarbonationRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarbonationRangeType) ProtoMessage() {}

func (x *CarbonationRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarbonationRangeType.ProtoReflect.Descriptor instead.
func (*CarbonationRangeType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{35}
}

func (x *CarbonationRangeType) GetMinimum() *CarbonationType {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *CarbonationRangeType) GetMaximum() *CarbonationType {
	if x != nil {
		return x.Maximum
	}
	return nil
}

type CarbonationType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64             `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  CarbonationUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.CarbonationUnitType" json:"unit,omitempty"`
}

func (x *CarbonationType) Reset() {
	*x = CarbonationType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarbonationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarbonationType) ProtoMessage() {}

func (x *CarbonationType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarbonationType.ProtoReflect.Descriptor instead.
func (*CarbonationType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{36}
}

func (x *CarbonationType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *CarbonationType) GetUnit() CarbonationUnitType {
	if x != nil {
		return x.Unit
	}
	return CarbonationUnitType_NULL_CARBONATIONUNITTYPE
}

// FermentationProcedureType defines the procedure for performing fermentation
type FermentationProcedureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description       string                  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Notes             string                  `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty"`
	FermentationSteps []*FermentationStepType `protobuf:"bytes,4,rep,name=fermentation_steps,json=fermentationSteps,proto3" json:"fermentation_steps,omitempty"`
	Name              string                  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FermentationProcedureType) Reset() {
	*x = FermentationProcedureType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FermentationProcedureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FermentationProcedureType) ProtoMessage() {}

func (x *FermentationProcedureType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FermentationProcedureType.ProtoReflect.Descriptor instead.
func (*FermentationProcedureType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{37}
}

func (x *FermentationProcedureType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FermentationProcedureType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FermentationProcedureType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *FermentationProcedureType) GetFermentationSteps() []*FermentationStepType {
	if x != nil {
		return x.FermentationSteps
	}
	return nil
}

func (x *FermentationProcedureType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// FermentationStepType - a per step representation of a fermentation action
type FermentationStepType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	EndTemperature *TemperatureType `protobuf:"bytes,3,opt,name=end_temperature,json=endTemperature,proto3" json:"end_temperature,omitempty"`
	StepTime       *TimeType        `protobuf:"bytes,4,opt,name=step_time,json=stepTime,proto3" json:"step_time,omitempty"`
	// Free rise is used to indicate a fermentation step where the exothermic fermentation is allowed to raise the temperature without restriction This is either True or false.
	FreeRise         bool             `protobuf:"varint,5,opt,name=free_rise,json=freeRise,proto3" json:"free_rise,omitempty"`
	StartGravity     *GravityType     `protobuf:"bytes,6,opt,name=start_gravity,json=startGravity,proto3" json:"start_gravity,omitempty"`
	EndGravity       *GravityType     `protobuf:"bytes,7,opt,name=end_gravity,json=endGravity,proto3" json:"end_gravity,omitempty"`
	StartPh          *AcidityType     `protobuf:"bytes,8,opt,name=start_ph,json=startPh,proto3" json:"start_ph,omitempty"`
	Description      string           `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	StartTemperature *TemperatureType `protobuf:"bytes,10,opt,name=start_temperature,json=startTemperature,proto3" json:"start_temperature,omitempty"`
	EndPh            *AcidityType     `protobuf:"bytes,11,opt,name=end_ph,json=endPh,proto3" json:"end_ph,omitempty"`
	Vessel           string           `protobuf:"bytes,12,opt,name=vessel,proto3" json:"vessel,omitempty"`
}

func (x *FermentationStepType) Reset() {
	*x = FermentationStepType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FermentationStepType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FermentationStepType) ProtoMessage() {}

func (x *FermentationStepType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FermentationStepType.ProtoReflect.Descriptor instead.
func (*FermentationStepType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{38}
}

func (x *FermentationStepType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FermentationStepType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FermentationStepType) GetEndTemperature() *TemperatureType {
	if x != nil {
		return x.EndTemperature
	}
	return nil
}

func (x *FermentationStepType) GetStepTime() *TimeType {
	if x != nil {
		return x.StepTime
	}
	return nil
}

func (x *FermentationStepType) GetFreeRise() bool {
	if x != nil {
		return x.FreeRise
	}
	return false
}

func (x *FermentationStepType) GetStartGravity() *GravityType {
	if x != nil {
		return x.StartGravity
	}
	return nil
}

func (x *FermentationStepType) GetEndGravity() *GravityType {
	if x != nil {
		return x.EndGravity
	}
	return nil
}

func (x *FermentationStepType) GetStartPh() *AcidityType {
	if x != nil {
		return x.StartPh
	}
	return nil
}

func (x *FermentationStepType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FermentationStepType) GetStartTemperature() *TemperatureType {
	if x != nil {
		return x.StartTemperature
	}
	return nil
}

func (x *FermentationStepType) GetEndPh() *AcidityType {
	if x != nil {
		return x.EndPh
	}
	return nil
}

func (x *FermentationStepType) GetVessel() string {
	if x != nil {
		return x.Vessel
	}
	return ""
}

// BoilProcedureType defines the procedure for performing a boil. A boil procedure with no steps is the same as a standard single step boil
type BoilProcedureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PreBoilSize *VolumeType     `protobuf:"bytes,2,opt,name=pre_boil_size,json=preBoilSize,proto3" json:"pre_boil_size,omitempty"`
	BoilTime    *TimeType       `protobuf:"bytes,3,opt,name=boil_time,json=boilTime,proto3" json:"boil_time,omitempty"`
	BoilSteps   []*BoilStepType `protobuf:"bytes,4,rep,name=boil_steps,json=boilSteps,proto3" json:"boil_steps,omitempty"`
	Name        string          `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description string          `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Notes       string          `protobuf:"bytes,7,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *BoilProcedureType) Reset() {
	*x = BoilProcedureType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoilProcedureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoilProcedureType) ProtoMessage() {}

func (x *BoilProcedureType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoilProcedureType.ProtoReflect.Descriptor instead.
func (*BoilProcedureType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{39}
}

func (x *BoilProcedureType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BoilProcedureType) GetPreBoilSize() *VolumeType {
	if x != nil {
		return x.PreBoilSize
	}
	return nil
}

func (x *BoilProcedureType) GetBoilTime() *TimeType {
	if x != nil {
		return x.BoilTime
	}
	return nil
}

func (x *BoilProcedureType) GetBoilSteps() []*BoilStepType {
	if x != nil {
		return x.BoilSteps
	}
	return nil
}

func (x *BoilProcedureType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BoilProcedureType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BoilProcedureType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// BoilStepType - a per step representation of a boil process, can be used to support preboil steps, non-boiling pasteurization steps, boiling, whirlpool steps, and chilling
type BoilStepType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EndGravity     *GravityType             `protobuf:"bytes,2,opt,name=end_gravity,json=endGravity,proto3" json:"end_gravity,omitempty"`
	ChillingType   BoilStepTypeChillingType `protobuf:"varint,3,opt,name=chilling_type,json=chillingType,proto3,enum=beerproto.BoilStepTypeChillingType" json:"chilling_type,omitempty"`
	Description    string                   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	EndTemperature *TemperatureType         `protobuf:"bytes,5,opt,name=end_temperature,json=endTemperature,proto3" json:"end_temperature,omitempty"`
	// The amount of time that passes before this step begins. eg moving from a boiling step (step 1) to a whirlpool step (step 2) may take 5 minutes. Step 2 would have a ramp time of 5 minutes, hop isomerization and bitterness calculations will need to account for this accordingly.
	RampTime         *TimeType        `protobuf:"bytes,6,opt,name=ramp_time,json=rampTime,proto3" json:"ramp_time,omitempty"`
	StepTime         *TimeType        `protobuf:"bytes,7,opt,name=step_time,json=stepTime,proto3" json:"step_time,omitempty"`
	StartGravity     *GravityType     `protobuf:"bytes,8,opt,name=start_gravity,json=startGravity,proto3" json:"start_gravity,omitempty"`
	StartPh          *AcidityType     `protobuf:"bytes,9,opt,name=start_ph,json=startPh,proto3" json:"start_ph,omitempty"`
	EndPh            *AcidityType     `protobuf:"bytes,10,opt,name=end_ph,json=endPh,proto3" json:"end_ph,omitempty"`
	Name             string           `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	StartTemperature *TemperatureType `protobuf:"bytes,12,opt,name=start_temperature,json=startTemperature,proto3" json:"start_temperature,omitempty"`
}

func (x *BoilStepType) Reset() {
	*x = BoilStepType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoilStepType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoilStepType) ProtoMessage() {}

func (x *BoilStepType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoilStepType.ProtoReflect.Descriptor instead.
func (*BoilStepType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{40}
}

func (x *BoilStepType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BoilStepType) GetEndGravity() *GravityType {
	if x != nil {
		return x.EndGravity
	}
	return nil
}

func (x *BoilStepType) GetChillingType() BoilStepTypeChillingType {
	if x != nil {
		return x.ChillingType
	}
	return BoilStepTypeChillingType_NULL_BOILSTEPTYPECHILLINGTYPE
}

func (x *BoilStepType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BoilStepType) GetEndTemperature() *TemperatureType {
	if x != nil {
		return x.EndTemperature
	}
	return nil
}

func (x *BoilStepType) GetRampTime() *TimeType {
	if x != nil {
		return x.RampTime
	}
	return nil
}

func (x *BoilStepType) GetStepTime() *TimeType {
	if x != nil {
		return x.StepTime
	}
	return nil
}

func (x *BoilStepType) GetStartGravity() *GravityType {
	if x != nil {
		return x.StartGravity
	}
	return nil
}

func (x *BoilStepType) GetStartPh() *AcidityType {
	if x != nil {
		return x.StartPh
	}
	return nil
}

func (x *BoilStepType) GetEndPh() *AcidityType {
	if x != nil {
		return x.EndPh
	}
	return nil
}

func (x *BoilStepType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BoilStepType) GetStartTemperature() *TemperatureType {
	if x != nil {
		return x.StartTemperature
	}
	return nil
}

// FermentableType collects the attributes of a fermentable ingredient to store as record information
type FermentableType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The recommended maximum percentage to use in a grain bill.
	MaxInBatch *PercentType `protobuf:"bytes,2,opt,name=max_in_batch,json=maxInBatch,proto3" json:"max_in_batch,omitempty"`
	// True if the fermentable must be mashed, false if it can be steeped.
	RecommendMash bool `protobuf:"varint,3,opt,name=recommend_mash,json=recommendMash,proto3" json:"recommend_mash,omitempty"`
	// The percentage of protein. Higher values may indicate a possibility of haze, or lautering issues.
	Protein    *PercentType        `protobuf:"bytes,4,opt,name=protein,proto3" json:"protein,omitempty"`
	ProductId  string              `protobuf:"bytes,5,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	GrainGroup GrainGroup          `protobuf:"varint,6,opt,name=grain_group,json=grainGroup,proto3,enum=beerproto.GrainGroup" json:"grain_group,omitempty"`
	Yield      *YieldType          `protobuf:"bytes,7,opt,name=yield,proto3" json:"yield,omitempty"`
	Type       FermentableBaseType `protobuf:"varint,8,opt,name=type,proto3,enum=beerproto.FermentableBaseType" json:"type,omitempty"`
	Producer   string              `protobuf:"bytes,9,opt,name=producer,proto3" json:"producer,omitempty"`
	// Where diastatic power gives the total amount of all enzymes, alpha amylase, also known as dextrinizing units, refers to only the total amount of alpa amylase in the malted grain. A value of 25-50 is desirable for base malt.
	AlphaAmylase float64    `protobuf:"fixed64,10,opt,name=alpha_amylase,json=alphaAmylase,proto3" json:"alpha_amylase,omitempty"`
	Color        *ColorType `protobuf:"bytes,11,opt,name=color,proto3" json:"color,omitempty"`
	Name         string     `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	// Diastatic power is a measurement of malted grains enzymatic content. A value of 35 Lintner is needed to self convert, while a value of 100 or more is desirable.
	DiastaticPower *DiastaticPowerType       `protobuf:"bytes,13,opt,name=diastatic_power,json=diastaticPower,proto3" json:"diastatic_power,omitempty"`
	Moisture       *PercentType              `protobuf:"bytes,14,opt,name=moisture,proto3" json:"moisture,omitempty"`
	Origin         string                    `protobuf:"bytes,15,opt,name=origin,proto3" json:"origin,omitempty"`
	Inventory      *FermentableInventoryType `protobuf:"bytes,16,opt,name=inventory,proto3" json:"inventory,omitempty"`
	// The Kolbach Index, also known as soluble to total ratio of nitrogen or protein, is used to indcate the degree of malt modification. A value above 35% is desired for simple single infusion mashing, undermodified malt may require multiple step mashes or decoction.
	KolbachIndex float64 `protobuf:"fixed64,17,opt,name=kolbach_index,json=kolbachIndex,proto3" json:"kolbach_index,omitempty"`
	// Used to indicate the 'crystallized' percentage of starches for crystal malts.
	Glassy *PercentType `protobuf:"bytes,18,opt,name=glassy,proto3" json:"glassy,omitempty"`
	// The percentage of grain that masses through sieves with gaps of 7/64 and 6/64, desired values of 80% or higher which indicate plump kernels.
	Plump *PercentType `protobuf:"bytes,19,opt,name=plump,proto3" json:"plump,omitempty"`
	Half  *PercentType `protobuf:"bytes,20,opt,name=half,proto3" json:"half,omitempty"`
	// The opposite of glassy, a mealy kernel is one that is not glassy. Base malt should be at least 90%, single step mashes generally require 95% or higher.
	Mealy *PercentType `protobuf:"bytes,21,opt,name=mealy,proto3" json:"mealy,omitempty"`
	// The Percentage of grain that makes it through a thin mesh screen, typically 5/64 inch. Values less than 3% are desired.
	Thru *PercentType `protobuf:"bytes,22,opt,name=thru,proto3" json:"thru,omitempty"`
	// Friability is the measure of a malts ability to crumble during the crush, and is used as an indicator for easy gelatinization of the grain and starches, as well as modification of the malt. Value of 85% of higher indicates a well modified malt and is suitable for single step mashes. Lower values may require a step mash.
	Friability *PercentType `protobuf:"bytes,23,opt,name=friability,proto3" json:"friability,omitempty"`
	// The pH of the resultant wort for 1 lb of grain mashed in 1 gallon of distilled water. Used in many water chemistry / mash pH prediction software.
	DiPh *AcidityType `protobuf:"bytes,24,opt,name=di_ph,json=diPh,proto3" json:"di_ph,omitempty"`
	// The measure of wort viscosity, typically associated with the breakdown of beta-glucans. The higher the viscosity, the greater the need for a glucan rest and the less suitable for a fly sparge.
	Viscosity *ViscosityType `protobuf:"bytes,25,opt,name=viscosity,proto3" json:"viscosity,omitempty"`
	// The amount of DMS precursors, namely S-methyl methionine (SMM) and dimethyl sulfoxide (DMSO) in the malt which convert to dimethyl sulfide (DMS).
	DmsP *ConcentrationType `protobuf:"bytes,26,opt,name=dms_p,json=dmsP,proto3" json:"dms_p,omitempty"`
	// Free Amino Nitrogen (FAN) is a critical yeast nutrient. Typical values for base malt is 170.
	Fan *ConcentrationType `protobuf:"bytes,27,opt,name=fan,proto3" json:"fan,omitempty"`
	// Fermentability - Used in Extracts to indicate a baseline typical attenuation for a typical medium attenuation yeast.
	Fermentability *PercentType `protobuf:"bytes,28,opt,name=fermentability,proto3" json:"fermentability,omitempty"`
	// Values of 180 or more may suggest a glucan rest and avoiding fly sparging.
	BetaGlucan *ConcentrationType `protobuf:"bytes,29,opt,name=beta_glucan,json=betaGlucan,proto3" json:"beta_glucan,omitempty"`
	Notes      string             `protobuf:"bytes,30,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *FermentableType) Reset() {
	*x = FermentableType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FermentableType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FermentableType) ProtoMessage() {}

func (x *FermentableType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FermentableType.ProtoReflect.Descriptor instead.
func (*FermentableType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{41}
}

func (x *FermentableType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FermentableType) GetMaxInBatch() *PercentType {
	if x != nil {
		return x.MaxInBatch
	}
	return nil
}

func (x *FermentableType) GetRecommendMash() bool {
	if x != nil {
		return x.RecommendMash
	}
	return false
}

func (x *FermentableType) GetProtein() *PercentType {
	if x != nil {
		return x.Protein
	}
	return nil
}

func (x *FermentableType) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *FermentableType) GetGrainGroup() GrainGroup {
	if x != nil {
		return x.GrainGroup
	}
	return GrainGroup_NULL_GRAINGROUP
}

func (x *FermentableType) GetYield() *YieldType {
	if x != nil {
		return x.Yield
	}
	return nil
}

func (x *FermentableType) GetType() FermentableBaseType {
	if x != nil {
		return x.Type
	}
	return FermentableBaseType_NULL_FERMENTABLEBASETYPE
}

func (x *FermentableType) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *FermentableType) GetAlphaAmylase() float64 {
	if x != nil {
		return x.AlphaAmylase
	}
	return 0
}

func (x *FermentableType) GetColor() *ColorType {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *FermentableType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FermentableType) GetDiastaticPower() *DiastaticPowerType {
	if x != nil {
		return x.DiastaticPower
	}
	return nil
}

func (x *FermentableType) GetMoisture() *PercentType {
	if x != nil {
		return x.Moisture
	}
	return nil
}

func (x *FermentableType) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *FermentableType) GetInventory() *FermentableInventoryType {
	if x != nil {
		return x.Inventory
	}
	return nil
}

func (x *FermentableType) GetKolbachIndex() float64 {
	if x != nil {
		return x.KolbachIndex
	}
	return 0
}

func (x *FermentableType) GetGlassy() *PercentType {
	if x != nil {
		return x.Glassy
	}
	return nil
}

func (x *FermentableType) GetPlump() *PercentType {
	if x != nil {
		return x.Plump
	}
	return nil
}

func (x *FermentableType) GetHalf() *PercentType {
	if x != nil {
		return x.Half
	}
	return nil
}

func (x *FermentableType) GetMealy() *PercentType {
	if x != nil {
		return x.Mealy
	}
	return nil
}

func (x *FermentableType) GetThru() *PercentType {
	if x != nil {
		return x.Thru
	}
	return nil
}

func (x *FermentableType) GetFriability() *PercentType {
	if x != nil {
		return x.Friability
	}
	return nil
}

func (x *FermentableType) GetDiPh() *AcidityType {
	if x != nil {
		return x.DiPh
	}
	return nil
}

func (x *FermentableType) GetViscosity() *ViscosityType {
	if x != nil {
		return x.Viscosity
	}
	return nil
}

func (x *FermentableType) GetDmsP() *ConcentrationType {
	if x != nil {
		return x.DmsP
	}
	return nil
}

func (x *FermentableType) GetFan() *ConcentrationType {
	if x != nil {
		return x.Fan
	}
	return nil
}

func (x *FermentableType) GetFermentability() *PercentType {
	if x != nil {
		return x.Fermentability
	}
	return nil
}

func (x *FermentableType) GetBetaGlucan() *ConcentrationType {
	if x != nil {
		return x.BetaGlucan
	}
	return nil
}

func (x *FermentableType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

type FermentableInventoryType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Amount:
	//	*FermentableInventoryType_Mass
	//	*FermentableInventoryType_Volume
	Amount isFermentableInventoryType_Amount `protobuf_oneof:"amount"`
}

func (x *FermentableInventoryType) Reset() {
	*x = FermentableInventoryType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FermentableInventoryType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FermentableInventoryType) ProtoMessage() {}

func (x *FermentableInventoryType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FermentableInventoryType.ProtoReflect.Descriptor instead.
func (*FermentableInventoryType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{42}
}

func (m *FermentableInventoryType) GetAmount() isFermentableInventoryType_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (x *FermentableInventoryType) GetMass() *MassType {
	if x, ok := x.GetAmount().(*FermentableInventoryType_Mass); ok {
		return x.Mass
	}
	return nil
}

func (x *FermentableInventoryType) GetVolume() *VolumeType {
	if x, ok := x.GetAmount().(*FermentableInventoryType_Volume); ok {
		return x.Volume
	}
	return nil
}

type isFermentableInventoryType_Amount interface {
	isFermentableInventoryType_Amount()
}

type FermentableInventoryType_Mass struct {
	Mass *MassType `protobuf:"bytes,1,opt,name=mass,proto3,oneof"`
}

type FermentableInventoryType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,2,opt,name=volume,proto3,oneof"`
}

func (*FermentableInventoryType_Mass) isFermentableInventoryType_Amount() {}

func (*FermentableInventoryType_Volume) isFermentableInventoryType_Amount() {}

// Diastatic power is a measurement of malted grains enzymatic content. A value of 35 Lintner is needed to self convert, while a value of 100 or more is desirable for base malts
type DiastaticPowerType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64                `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  DiastaticPowerUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.DiastaticPowerUnitType" json:"unit,omitempty"`
}

func (x *DiastaticPowerType) Reset() {
	*x = DiastaticPowerType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiastaticPowerType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiastaticPowerType) ProtoMessage() {}

func (x *DiastaticPowerType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiastaticPowerType.ProtoReflect.Descriptor instead.
func (*DiastaticPowerType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{43}
}

func (x *DiastaticPowerType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *DiastaticPowerType) GetUnit() DiastaticPowerUnitType {
	if x != nil {
		return x.Unit
	}
	return DiastaticPowerUnitType_NULL_DIASTATICPOWERUNITTYPE
}

// CultureInformation collects the attributes of a microbial culture
type CultureInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Form     CultureBaseForm `protobuf:"varint,2,opt,name=form,proto3,enum=beerproto.CultureBaseForm" json:"form,omitempty"`
	Producer string          `protobuf:"bytes,3,opt,name=producer,proto3" json:"producer,omitempty"`
	// The recommended temperature range of fermentation by the culture producer.
	TemperatureRange *TemperatureRangeType `protobuf:"bytes,4,opt,name=temperature_range,json=temperatureRange,proto3" json:"temperature_range,omitempty"`
	Notes            string                `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
	// Recommended styles for a particular culture.
	BestFor   string                `protobuf:"bytes,6,opt,name=best_for,json=bestFor,proto3" json:"best_for,omitempty"`
	Inventory *CultureInventoryType `protobuf:"bytes,7,opt,name=inventory,proto3" json:"inventory,omitempty"`
	ProductId string                `protobuf:"bytes,8,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Name      string                `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	// The recommended limit of abv by the culture producer before attenuation stops.
	AlcoholTolerance *PercentType `protobuf:"bytes,10,opt,name=alcohol_tolerance,json=alcoholTolerance,proto3" json:"alcohol_tolerance,omitempty"`
	// A glucoamylase positive culture is capable of producing glucoamylase, the enzyme produced through expression of the diastatic gene, which allows yeast to attenuate dextrins and starches leading to a very low FG. This is positive in some saison/brett yeasts as well as the new gulo hybrid by Omega yeast labs.
	Glucoamylase bool            `protobuf:"varint,11,opt,name=glucoamylase,proto3" json:"glucoamylase,omitempty"`
	Type         CultureBaseType `protobuf:"varint,12,opt,name=type,proto3,enum=beerproto.CultureBaseType" json:"type,omitempty"`
	// Floculation refers to the ability of yeast to aggregate to form large flocs which drop out of suspension.
	Flocculation     QualitativeRangeType `protobuf:"varint,13,opt,name=flocculation,proto3,enum=beerproto.QualitativeRangeType" json:"flocculation,omitempty"`
	AttenuationRange *PercentRangeType    `protobuf:"bytes,14,opt,name=attenuation_range,json=attenuationRange,proto3" json:"attenuation_range,omitempty"`
	// Maximum number of times to reuse a culture before a new lab source is recommended.
	MaxReuse int32 `protobuf:"varint,15,opt,name=max_reuse,json=maxReuse,proto3" json:"max_reuse,omitempty"`
	// A POF+ culture is capable of producing phenols, which is a common distinctive property of saison, and brett yeasts.
	Pof      bool      `protobuf:"varint,16,opt,name=pof,proto3" json:"pof,omitempty"`
	Zymocide *Zymocide `protobuf:"bytes,17,opt,name=zymocide,proto3" json:"zymocide,omitempty"`
}

func (x *CultureInformation) Reset() {
	*x = CultureInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CultureInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CultureInformation) ProtoMessage() {}

func (x *CultureInformation) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CultureInformation.ProtoReflect.Descriptor instead.
func (*CultureInformation) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{44}
}

func (x *CultureInformation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CultureInformation) GetForm() CultureBaseForm {
	if x != nil {
		return x.Form
	}
	return CultureBaseForm_NULL_CULTUREBASEFORM
}

func (x *CultureInformation) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *CultureInformation) GetTemperatureRange() *TemperatureRangeType {
	if x != nil {
		return x.TemperatureRange
	}
	return nil
}

func (x *CultureInformation) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *CultureInformation) GetBestFor() string {
	if x != nil {
		return x.BestFor
	}
	return ""
}

func (x *CultureInformation) GetInventory() *CultureInventoryType {
	if x != nil {
		return x.Inventory
	}
	return nil
}

func (x *CultureInformation) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *CultureInformation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CultureInformation) GetAlcoholTolerance() *PercentType {
	if x != nil {
		return x.AlcoholTolerance
	}
	return nil
}

func (x *CultureInformation) GetGlucoamylase() bool {
	if x != nil {
		return x.Glucoamylase
	}
	return false
}

func (x *CultureInformation) GetType() CultureBaseType {
	if x != nil {
		return x.Type
	}
	return CultureBaseType_NULL_CULTUREBASETYPE
}

func (x *CultureInformation) GetFlocculation() QualitativeRangeType {
	if x != nil {
		return x.Flocculation
	}
	return QualitativeRangeType_NULL_QUALITATIVERANGETYPE
}

func (x *CultureInformation) GetAttenuationRange() *PercentRangeType {
	if x != nil {
		return x.AttenuationRange
	}
	return nil
}

func (x *CultureInformation) GetMaxReuse() int32 {
	if x != nil {
		return x.MaxReuse
	}
	return 0
}

func (x *CultureInformation) GetPof() bool {
	if x != nil {
		return x.Pof
	}
	return false
}

func (x *CultureInformation) GetZymocide() *Zymocide {
	if x != nil {
		return x.Zymocide
	}
	return nil
}

type TemperatureRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *TemperatureType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum *TemperatureType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *TemperatureRangeType) Reset() {
	*x = TemperatureRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemperatureRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemperatureRangeType) ProtoMessage() {}

func (x *TemperatureRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemperatureRangeType.ProtoReflect.Descriptor instead.
func (*TemperatureRangeType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{45}
}

func (x *TemperatureRangeType) GetMinimum() *TemperatureType {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *TemperatureRangeType) GetMaximum() *TemperatureType {
	if x != nil {
		return x.Maximum
	}
	return nil
}

type TemperatureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64             `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  TemperatureUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.TemperatureUnitType" json:"unit,omitempty"`
}

func (x *TemperatureType) Reset() {
	*x = TemperatureType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemperatureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemperatureType) ProtoMessage() {}

func (x *TemperatureType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemperatureType.ProtoReflect.Descriptor instead.
func (*TemperatureType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{46}
}

func (x *TemperatureType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TemperatureType) GetUnit() TemperatureUnitType {
	if x != nil {
		return x.Unit
	}
	return TemperatureUnitType_NULL_TEMPERATUREUNITTYPE
}

// Zymocide, also known as killer yeast properties, is common among wine yeast. There are also some ale and brett yeasts that are immune to some zymocidic properties, these are known as killer neutral
type Zymocide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	No1     bool `protobuf:"varint,1,opt,name=no1,proto3" json:"no1,omitempty"`
	No2     bool `protobuf:"varint,2,opt,name=no2,proto3" json:"no2,omitempty"`
	No28    bool `protobuf:"varint,3,opt,name=no28,proto3" json:"no28,omitempty"`
	Klus    bool `protobuf:"varint,4,opt,name=klus,proto3" json:"klus,omitempty"`
	Neutral bool `protobuf:"varint,5,opt,name=neutral,proto3" json:"neutral,omitempty"`
}

func (x *Zymocide) Reset() {
	*x = Zymocide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Zymocide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Zymocide) ProtoMessage() {}

func (x *Zymocide) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Zymocide.ProtoReflect.Descriptor instead.
func (*Zymocide) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{47}
}

func (x *Zymocide) GetNo1() bool {
	if x != nil {
		return x.No1
	}
	return false
}

func (x *Zymocide) GetNo2() bool {
	if x != nil {
		return x.No2
	}
	return false
}

func (x *Zymocide) GetNo28() bool {
	if x != nil {
		return x.No28
	}
	return false
}

func (x *Zymocide) GetKlus() bool {
	if x != nil {
		return x.Klus
	}
	return false
}

func (x *Zymocide) GetNeutral() bool {
	if x != nil {
		return x.Neutral
	}
	return false
}

type CultureInventoryType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Liquid  *VolumeType `protobuf:"bytes,1,opt,name=liquid,proto3" json:"liquid,omitempty"`
	Dry     *MassType   `protobuf:"bytes,2,opt,name=dry,proto3" json:"dry,omitempty"`
	Slant   *VolumeType `protobuf:"bytes,3,opt,name=slant,proto3" json:"slant,omitempty"`
	Culture *VolumeType `protobuf:"bytes,4,opt,name=culture,proto3" json:"culture,omitempty"`
}

func (x *CultureInventoryType) Reset() {
	*x = CultureInventoryType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CultureInventoryType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CultureInventoryType) ProtoMessage() {}

func (x *CultureInventoryType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CultureInventoryType.ProtoReflect.Descriptor instead.
func (*CultureInventoryType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{48}
}

func (x *CultureInventoryType) GetLiquid() *VolumeType {
	if x != nil {
		return x.Liquid
	}
	return nil
}

func (x *CultureInventoryType) GetDry() *MassType {
	if x != nil {
		return x.Dry
	}
	return nil
}

func (x *CultureInventoryType) GetSlant() *VolumeType {
	if x != nil {
		return x.Slant
	}
	return nil
}

func (x *CultureInventoryType) GetCulture() *VolumeType {
	if x != nil {
		return x.Culture
	}
	return nil
}

// Provides necessary information for brewing equipment set
type EquipmentType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	EquipmentItems      []*EquipmentItemType `protobuf:"bytes,3,rep,name=equipment_items,json=equipmentItems,proto3" json:"equipment_items,omitempty"`
	BrewhouseEfficiency *PercentType         `protobuf:"bytes,4,opt,name=brewhouse_efficiency,json=brewhouseEfficiency,proto3" json:"brewhouse_efficiency,omitempty"`
}

func (x *EquipmentType) Reset() {
	*x = EquipmentType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipmentType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentType) ProtoMessage() {}

func (x *EquipmentType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentType.ProtoReflect.Descriptor instead.
func (*EquipmentType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{49}
}

func (x *EquipmentType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EquipmentType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EquipmentType) GetEquipmentItems() []*EquipmentItemType {
	if x != nil {
		return x.EquipmentItems
	}
	return nil
}

func (x *EquipmentType) GetBrewhouseEfficiency() *PercentType {
	if x != nil {
		return x.BrewhouseEfficiency
	}
	return nil
}

// EquipmentType provides necessary information for individual brewing equipment
type EquipmentItemType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Notes string `protobuf:"bytes,2,opt,name=notes,proto3" json:"notes,omitempty"`
	// The volume boiled off during 1 hour, measured before and after at room temperature.
	BoilRatePerHour *VolumeType                         `protobuf:"bytes,3,opt,name=boil_rate_per_hour,json=boilRatePerHour,proto3" json:"boil_rate_per_hour,omitempty"`
	Type            string                              `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Form            EquipmentItemType_EquipmentBaseForm `protobuf:"varint,5,opt,name=form,proto3,enum=beerproto.EquipmentItemType_EquipmentBaseForm" json:"form,omitempty"`
	// The volume that leaves the kettle, especially important for non-immersion chillers that cool the wort as it leaves the kettle.
	DrainRatePerMinute *VolumeType `protobuf:"bytes,6,opt,name=drain_rate_per_minute,json=drainRatePerMinute,proto3" json:"drain_rate_per_minute,omitempty"`
	// The specific heat of the piece of equipment, expressed in Cal/(g*C), especially important for when the mashtun is not preheated.
	SpecificHeat *SpecificHeatType `protobuf:"bytes,7,opt,name=specific_heat,json=specificHeat,proto3" json:"specific_heat,omitempty"`
	// The apparent volume absorbed by grain, typical values are 0.125 qt/lb (1.04 L/kg) for a mashtun, 0.08 gal/lb (0.66 L/kg) for BIAB.
	GrainAbsorptionRate *SpecificVolumeType `protobuf:"bytes,8,opt,name=grain_absorption_rate,json=grainAbsorptionRate,proto3" json:"grain_absorption_rate,omitempty"`
	Name                string              `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	MaximumVolume       *VolumeType         `protobuf:"bytes,10,opt,name=maximum_volume,json=maximumVolume,proto3" json:"maximum_volume,omitempty"`
	// The weight of the piece of equipment, especially important for when the mashtun is not preheated.
	Weight     *MassType    `protobuf:"bytes,11,opt,name=weight,proto3" json:"weight,omitempty"`
	Loss       *VolumeType  `protobuf:"bytes,12,opt,name=loss,proto3" json:"loss,omitempty"`
	Efficiency *PercentType `protobuf:"bytes,13,opt,name=efficiency,proto3" json:"efficiency,omitempty"`
}

func (x *EquipmentItemType) Reset() {
	*x = EquipmentItemType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipmentItemType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentItemType) ProtoMessage() {}

func (x *EquipmentItemType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentItemType.ProtoReflect.Descriptor instead.
func (*EquipmentItemType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{50}
}

func (x *EquipmentItemType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EquipmentItemType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *EquipmentItemType) GetBoilRatePerHour() *VolumeType {
	if x != nil {
		return x.BoilRatePerHour
	}
	return nil
}

func (x *EquipmentItemType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EquipmentItemType) GetForm() EquipmentItemType_EquipmentBaseForm {
	if x != nil {
		return x.Form
	}
	return EquipmentItemType_NULL
}

func (x *EquipmentItemType) GetDrainRatePerMinute() *VolumeType {
	if x != nil {
		return x.DrainRatePerMinute
	}
	return nil
}

func (x *EquipmentItemType) GetSpecificHeat() *SpecificHeatType {
	if x != nil {
		return x.SpecificHeat
	}
	return nil
}

func (x *EquipmentItemType) GetGrainAbsorptionRate() *SpecificVolumeType {
	if x != nil {
		return x.GrainAbsorptionRate
	}
	return nil
}

func (x *EquipmentItemType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EquipmentItemType) GetMaximumVolume() *VolumeType {
	if x != nil {
		return x.MaximumVolume
	}
	return nil
}

func (x *EquipmentItemType) GetWeight() *MassType {
	if x != nil {
		return x.Weight
	}
	return nil
}

func (x *EquipmentItemType) GetLoss() *VolumeType {
	if x != nil {
		return x.Loss
	}
	return nil
}

func (x *EquipmentItemType) GetEfficiency() *PercentType {
	if x != nil {
		return x.Efficiency
	}
	return nil
}

type SpecificHeatType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64              `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit  SpecificHeatUnitType `protobuf:"varint,2,opt,name=unit,proto3,enum=beerproto.SpecificHeatUnitType" json:"unit,omitempty"`
}

func (x *SpecificHeatType) Reset() {
	*x = SpecificHeatType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecificHeatType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecificHeatType) ProtoMessage() {}

func (x *SpecificHeatType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecificHeatType.ProtoReflect.Descriptor instead.
func (*SpecificHeatType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{51}
}

func (x *SpecificHeatType) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *SpecificHeatType) GetUnit() SpecificHeatUnitType {
	if x != nil {
		return x.Unit
	}
	return SpecificHeatUnitType_NULL_SPECIFICHEATUNITTYPE
}

// Describes the procedure for packaging your beverage
type PackagingProcedureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PackagedVolume   *VolumeType            `protobuf:"bytes,3,opt,name=packaged_volume,json=packagedVolume,proto3" json:"packaged_volume,omitempty"`
	Description      string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Notes            string                 `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
	PackagingVessels []*PackagingVesselType `protobuf:"bytes,6,rep,name=packaging_vessels,json=packagingVessels,proto3" json:"packaging_vessels,omitempty"`
}

func (x *PackagingProcedureType) Reset() {
	*x = PackagingProcedureType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackagingProcedureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackagingProcedureType) ProtoMessage() {}

func (x *PackagingProcedureType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackagingProcedureType.ProtoReflect.Descriptor instead.
func (*PackagingProcedureType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{52}
}

func (x *PackagingProcedureType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PackagingProcedureType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PackagingProcedureType) GetPackagedVolume() *VolumeType {
	if x != nil {
		return x.PackagedVolume
	}
	return nil
}

func (x *PackagingProcedureType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PackagingProcedureType) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *PackagingProcedureType) GetPackagingVessels() []*PackagingVesselType {
	if x != nil {
		return x.PackagingVessels
	}
	return nil
}

// PackagingVesselType - a per vessel representation of a packaging process
type PackagingVesselType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type             PackagingVesselType_PackagingVesselTypeType `protobuf:"varint,2,opt,name=type,proto3,enum=beerproto.PackagingVesselType_PackagingVesselTypeType" json:"type,omitempty"`
	StartGravity     *GravityType                                `protobuf:"bytes,3,opt,name=start_gravity,json=startGravity,proto3" json:"start_gravity,omitempty"`
	Name             string                                      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	PackageDate      string                                      `protobuf:"bytes,5,opt,name=package_date,json=packageDate,proto3" json:"package_date,omitempty"`
	StepTime         *TimeType                                   `protobuf:"bytes,6,opt,name=step_time,json=stepTime,proto3" json:"step_time,omitempty"`
	EndGravity       *GravityType                                `protobuf:"bytes,7,opt,name=end_gravity,json=endGravity,proto3" json:"end_gravity,omitempty"`
	VesselVolume     *VolumeType                                 `protobuf:"bytes,8,opt,name=vessel_volume,json=vesselVolume,proto3" json:"vessel_volume,omitempty"`
	VesselQuantity   float64                                     `protobuf:"fixed64,9,opt,name=vessel_quantity,json=vesselQuantity,proto3" json:"vessel_quantity,omitempty"`
	Description      string                                      `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	StartPh          *AcidityType                                `protobuf:"bytes,11,opt,name=start_ph,json=startPh,proto3" json:"start_ph,omitempty"`
	Carbonation      float64                                     `protobuf:"fixed64,12,opt,name=carbonation,proto3" json:"carbonation,omitempty"`
	StartTemperature *TemperatureType                            `protobuf:"bytes,13,opt,name=start_temperature,json=startTemperature,proto3" json:"start_temperature,omitempty"`
	EndPh            *AcidityType                                `protobuf:"bytes,14,opt,name=end_ph,json=endPh,proto3" json:"end_ph,omitempty"`
	EndTemperature   *TemperatureType                            `protobuf:"bytes,15,opt,name=end_temperature,json=endTemperature,proto3" json:"end_temperature,omitempty"`
}

func (x *PackagingVesselType) Reset() {
	*x = PackagingVesselType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackagingVesselType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackagingVesselType) ProtoMessage() {}

func (x *PackagingVesselType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackagingVesselType.ProtoReflect.Descriptor instead.
func (*PackagingVesselType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{53}
}

func (x *PackagingVesselType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PackagingVesselType) GetType() PackagingVesselType_PackagingVesselTypeType {
	if x != nil {
		return x.Type
	}
	return PackagingVesselType_NULL_PACKAGINGVESSELTYPETYPE
}

func (x *PackagingVesselType) GetStartGravity() *GravityType {
	if x != nil {
		return x.StartGravity
	}
	return nil
}

func (x *PackagingVesselType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PackagingVesselType) GetPackageDate() string {
	if x != nil {
		return x.PackageDate
	}
	return ""
}

func (x *PackagingVesselType) GetStepTime() *TimeType {
	if x != nil {
		return x.StepTime
	}
	return nil
}

func (x *PackagingVesselType) GetEndGravity() *GravityType {
	if x != nil {
		return x.EndGravity
	}
	return nil
}

func (x *PackagingVesselType) GetVesselVolume() *VolumeType {
	if x != nil {
		return x.VesselVolume
	}
	return nil
}

func (x *PackagingVesselType) GetVesselQuantity() float64 {
	if x != nil {
		return x.VesselQuantity
	}
	return 0
}

func (x *PackagingVesselType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PackagingVesselType) GetStartPh() *AcidityType {
	if x != nil {
		return x.StartPh
	}
	return nil
}

func (x *PackagingVesselType) GetCarbonation() float64 {
	if x != nil {
		return x.Carbonation
	}
	return 0
}

func (x *PackagingVesselType) GetStartTemperature() *TemperatureType {
	if x != nil {
		return x.StartTemperature
	}
	return nil
}

func (x *PackagingVesselType) GetEndPh() *AcidityType {
	if x != nil {
		return x.EndPh
	}
	return nil
}

func (x *PackagingVesselType) GetEndTemperature() *TemperatureType {
	if x != nil {
		return x.EndTemperature
	}
	return nil
}

// VarietyInformation collects the attributes of a hop variety to store as record information
type VarietyInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Inventory *HopInventoryType                         `protobuf:"bytes,2,opt,name=inventory,proto3" json:"inventory,omitempty"`
	Type      VarietyInformation_VarietyInformationType `protobuf:"varint,3,opt,name=type,proto3,enum=beerproto.VarietyInformation_VarietyInformationType" json:"type,omitempty"`
	// Oil Content information object.
	OilContent *OilContentType `protobuf:"bytes,4,opt,name=oil_content,json=oilContent,proto3" json:"oil_content,omitempty"`
	//  Defined as the percentage of hop alpha lost in 6 months of storage.
	PercentLost *PercentType       `protobuf:"bytes,5,opt,name=percent_lost,json=percentLost,proto3" json:"percent_lost,omitempty"`
	ProductId   string             `protobuf:"bytes,6,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	AlphaAcid   *PercentType       `protobuf:"bytes,7,opt,name=alpha_acid,json=alphaAcid,proto3" json:"alpha_acid,omitempty"`
	BetaAcid    *PercentType       `protobuf:"bytes,8,opt,name=beta_acid,json=betaAcid,proto3" json:"beta_acid,omitempty"`
	Name        string             `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	Origin      string             `protobuf:"bytes,10,opt,name=origin,proto3" json:"origin,omitempty"`
	Substitutes string             `protobuf:"bytes,11,opt,name=substitutes,proto3" json:"substitutes,omitempty"`
	Year        string             `protobuf:"bytes,12,opt,name=year,proto3" json:"year,omitempty"`
	Form        HopVarietyBaseForm `protobuf:"varint,13,opt,name=form,proto3,enum=beerproto.HopVarietyBaseForm" json:"form,omitempty"`
	Producer    string             `protobuf:"bytes,14,opt,name=producer,proto3" json:"producer,omitempty"`
	Notes       string             `protobuf:"bytes,15,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *VarietyInformation) Reset() {
	*x = VarietyInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VarietyInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarietyInformation) ProtoMessage() {}

func (x *VarietyInformation) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarietyInformation.ProtoReflect.Descriptor instead.
func (*VarietyInformation) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{54}
}

func (x *VarietyInformation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VarietyInformation) GetInventory() *HopInventoryType {
	if x != nil {
		return x.Inventory
	}
	return nil
}

func (x *VarietyInformation) GetType() VarietyInformation_VarietyInformationType {
	if x != nil {
		return x.Type
	}
	return VarietyInformation_NULL_VARIETYINFORMATIONTYPE
}

func (x *VarietyInformation) GetOilContent() *OilContentType {
	if x != nil {
		return x.OilContent
	}
	return nil
}

func (x *VarietyInformation) GetPercentLost() *PercentType {
	if x != nil {
		return x.PercentLost
	}
	return nil
}

func (x *VarietyInformation) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *VarietyInformation) GetAlphaAcid() *PercentType {
	if x != nil {
		return x.AlphaAcid
	}
	return nil
}

func (x *VarietyInformation) GetBetaAcid() *PercentType {
	if x != nil {
		return x.BetaAcid
	}
	return nil
}

func (x *VarietyInformation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VarietyInformation) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *VarietyInformation) GetSubstitutes() string {
	if x != nil {
		return x.Substitutes
	}
	return ""
}

func (x *VarietyInformation) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *VarietyInformation) GetForm() HopVarietyBaseForm {
	if x != nil {
		return x.Form
	}
	return HopVarietyBaseForm_NULL_HOPVARIETYBASEFORM
}

func (x *VarietyInformation) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *VarietyInformation) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

type HopInventoryType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Amount:
	//	*HopInventoryType_Mass
	//	*HopInventoryType_Volume
	Amount isHopInventoryType_Amount `protobuf_oneof:"amount"`
}

func (x *HopInventoryType) Reset() {
	*x = HopInventoryType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HopInventoryType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HopInventoryType) ProtoMessage() {}

func (x *HopInventoryType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HopInventoryType.ProtoReflect.Descriptor instead.
func (*HopInventoryType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{55}
}

func (m *HopInventoryType) GetAmount() isHopInventoryType_Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (x *HopInventoryType) GetMass() *MassType {
	if x, ok := x.GetAmount().(*HopInventoryType_Mass); ok {
		return x.Mass
	}
	return nil
}

func (x *HopInventoryType) GetVolume() *VolumeType {
	if x, ok := x.GetAmount().(*HopInventoryType_Volume); ok {
		return x.Volume
	}
	return nil
}

type isHopInventoryType_Amount interface {
	isHopInventoryType_Amount()
}

type HopInventoryType_Mass struct {
	Mass *MassType `protobuf:"bytes,1,opt,name=mass,proto3,oneof"`
}

type HopInventoryType_Volume struct {
	Volume *VolumeType `protobuf:"bytes,2,opt,name=volume,proto3,oneof"`
}

func (*HopInventoryType_Mass) isHopInventoryType_Amount() {}

func (*HopInventoryType_Volume) isHopInventoryType_Amount() {}

// oil_content collects all information of a hop variety pertaining to oil content, polyphenols, and thiols. Each individual compound is expressed as a percent of the total oil measurement
type OilContentType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Polyphenols *PercentType `protobuf:"bytes,1,opt,name=polyphenols,proto3" json:"polyphenols,omitempty"`
	// The total amount of oil, including hydrocarbons, esters, and terpene alcohols in units of ml of oil per 100g of hop mass.
	TotalOilMlPer_100G float64      `protobuf:"fixed64,2,opt,name=total_oil_ml_per_100g,json=totalOilMlPer100g,proto3" json:"total_oil_ml_per_100g,omitempty"`
	Farnesene          *PercentType `protobuf:"bytes,3,opt,name=farnesene,proto3" json:"farnesene,omitempty"`
	Limonene           *PercentType `protobuf:"bytes,4,opt,name=limonene,proto3" json:"limonene,omitempty"`
	Nerol              *PercentType `protobuf:"bytes,5,opt,name=nerol,proto3" json:"nerol,omitempty"`
	Geraniol           *PercentType `protobuf:"bytes,6,opt,name=geraniol,proto3" json:"geraniol,omitempty"`
	BPinene            *PercentType `protobuf:"bytes,7,opt,name=b_pinene,json=bPinene,proto3" json:"b_pinene,omitempty"`
	Linalool           *PercentType `protobuf:"bytes,8,opt,name=linalool,proto3" json:"linalool,omitempty"`
	Caryophyllene      *PercentType `protobuf:"bytes,9,opt,name=caryophyllene,proto3" json:"caryophyllene,omitempty"`
	Cohumulone         *PercentType `protobuf:"bytes,10,opt,name=cohumulone,proto3" json:"cohumulone,omitempty"`
	Xanthohumol        *PercentType `protobuf:"bytes,11,opt,name=xanthohumol,proto3" json:"xanthohumol,omitempty"`
	Humulene           *PercentType `protobuf:"bytes,12,opt,name=humulene,proto3" json:"humulene,omitempty"`
	Myrcene            *PercentType `protobuf:"bytes,13,opt,name=myrcene,proto3" json:"myrcene,omitempty"`
	Pinene             *PercentType `protobuf:"bytes,14,opt,name=pinene,proto3" json:"pinene,omitempty"`
}

func (x *OilContentType) Reset() {
	*x = OilContentType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OilContentType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OilContentType) ProtoMessage() {}

func (x *OilContentType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OilContentType.ProtoReflect.Descriptor instead.
func (*OilContentType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{56}
}

func (x *OilContentType) GetPolyphenols() *PercentType {
	if x != nil {
		return x.Polyphenols
	}
	return nil
}

func (x *OilContentType) GetTotalOilMlPer_100G() float64 {
	if x != nil {
		return x.TotalOilMlPer_100G
	}
	return 0
}

func (x *OilContentType) GetFarnesene() *PercentType {
	if x != nil {
		return x.Farnesene
	}
	return nil
}

func (x *OilContentType) GetLimonene() *PercentType {
	if x != nil {
		return x.Limonene
	}
	return nil
}

func (x *OilContentType) GetNerol() *PercentType {
	if x != nil {
		return x.Nerol
	}
	return nil
}

func (x *OilContentType) GetGeraniol() *PercentType {
	if x != nil {
		return x.Geraniol
	}
	return nil
}

func (x *OilContentType) GetBPinene() *PercentType {
	if x != nil {
		return x.BPinene
	}
	return nil
}

func (x *OilContentType) GetLinalool() *PercentType {
	if x != nil {
		return x.Linalool
	}
	return nil
}

func (x *OilContentType) GetCaryophyllene() *PercentType {
	if x != nil {
		return x.Caryophyllene
	}
	return nil
}

func (x *OilContentType) GetCohumulone() *PercentType {
	if x != nil {
		return x.Cohumulone
	}
	return nil
}

func (x *OilContentType) GetXanthohumol() *PercentType {
	if x != nil {
		return x.Xanthohumol
	}
	return nil
}

func (x *OilContentType) GetHumulene() *PercentType {
	if x != nil {
		return x.Humulene
	}
	return nil
}

func (x *OilContentType) GetMyrcene() *PercentType {
	if x != nil {
		return x.Myrcene
	}
	return nil
}

func (x *OilContentType) GetPinene() *PercentType {
	if x != nil {
		return x.Pinene
	}
	return nil
}

// WaterBase provides unique properties to identify individual records of  brewing water
type WaterBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Calcium occurs naturally in most water sources and is the principle cause of hardness.
	Calcium *ConcentrationType `protobuf:"bytes,2,opt,name=calcium,proto3" json:"calcium,omitempty"`
	// Nitrite occurs naturally at low levels in some waters but is removed by treatment. It is sometime produced as a by-product when chloramine is used as a disinfectant.
	Nitrite *ConcentrationType `protobuf:"bytes,3,opt,name=nitrite,proto3" json:"nitrite,omitempty"`
	// Occurs naturally in water sources and is derived through contact with rocks
	Chloride  *ConcentrationType `protobuf:"bytes,4,opt,name=chloride,proto3" json:"chloride,omitempty"`
	Name      string             `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Potassium *ConcentrationType `protobuf:"bytes,6,opt,name=potassium,proto3" json:"potassium,omitempty"`
	Carbonate *ConcentrationType `protobuf:"bytes,7,opt,name=carbonate,proto3" json:"carbonate,omitempty"`
	// Iron occurs naturally in some water. High levels are treated to reduce the iron content. A number of water mains are made of iron. Brown discolouration complaints are associated with corroding iron mains. Iron is not harmful to health.
	Iron *ConcentrationType `protobuf:"bytes,8,opt,name=iron,proto3" json:"iron,omitempty"`
	// Fluoride salts typically have distinctive bitter tastes, and are odorless.
	Flouride *ConcentrationType `protobuf:"bytes,9,opt,name=flouride,proto3" json:"flouride,omitempty"`
	Sulfate  *ConcentrationType `protobuf:"bytes,10,opt,name=sulfate,proto3" json:"sulfate,omitempty"`
	// At levels of 10-30mg/l it is an important yeast nutrient, but above 30mg/l it can cause a sour/bitter taste to the beer.
	Magnesium   *ConcentrationType `protobuf:"bytes,11,opt,name=magnesium,proto3" json:"magnesium,omitempty"`
	Producer    string             `protobuf:"bytes,12,opt,name=producer,proto3" json:"producer,omitempty"`
	Bicarbonate *ConcentrationType `protobuf:"bytes,13,opt,name=bicarbonate,proto3" json:"bicarbonate,omitempty"`
	// Nitrate occurs naturally in most source waters but concentrations can be increased as a result of fertiliser use. Where necessary concentrations in drinking water can be reduced by diluting with sources where nitrate levels are low or through specific treatment.
	Nitrate *ConcentrationType `protobuf:"bytes,14,opt,name=nitrate,proto3" json:"nitrate,omitempty"`
	// Sodium is naturally present in many water sources. Domestic water softeners can increase the sodium concentration.
	Sodium *ConcentrationType `protobuf:"bytes,15,opt,name=sodium,proto3" json:"sodium,omitempty"`
}

func (x *WaterBase) Reset() {
	*x = WaterBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaterBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaterBase) ProtoMessage() {}

func (x *WaterBase) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaterBase.ProtoReflect.Descriptor instead.
func (*WaterBase) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{57}
}

func (x *WaterBase) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WaterBase) GetCalcium() *ConcentrationType {
	if x != nil {
		return x.Calcium
	}
	return nil
}

func (x *WaterBase) GetNitrite() *ConcentrationType {
	if x != nil {
		return x.Nitrite
	}
	return nil
}

func (x *WaterBase) GetChloride() *ConcentrationType {
	if x != nil {
		return x.Chloride
	}
	return nil
}

func (x *WaterBase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WaterBase) GetPotassium() *ConcentrationType {
	if x != nil {
		return x.Potassium
	}
	return nil
}

func (x *WaterBase) GetCarbonate() *ConcentrationType {
	if x != nil {
		return x.Carbonate
	}
	return nil
}

func (x *WaterBase) GetIron() *ConcentrationType {
	if x != nil {
		return x.Iron
	}
	return nil
}

func (x *WaterBase) GetFlouride() *ConcentrationType {
	if x != nil {
		return x.Flouride
	}
	return nil
}

func (x *WaterBase) GetSulfate() *ConcentrationType {
	if x != nil {
		return x.Sulfate
	}
	return nil
}

func (x *WaterBase) GetMagnesium() *ConcentrationType {
	if x != nil {
		return x.Magnesium
	}
	return nil
}

func (x *WaterBase) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *WaterBase) GetBicarbonate() *ConcentrationType {
	if x != nil {
		return x.Bicarbonate
	}
	return nil
}

func (x *WaterBase) GetNitrate() *ConcentrationType {
	if x != nil {
		return x.Nitrate
	}
	return nil
}

func (x *WaterBase) GetSodium() *ConcentrationType {
	if x != nil {
		return x.Sodium
	}
	return nil
}

type DiastaticPowerRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *DiastaticPowerType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum *DiastaticPowerType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *DiastaticPowerRangeType) Reset() {
	*x = DiastaticPowerRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiastaticPowerRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiastaticPowerRangeType) ProtoMessage() {}

func (x *DiastaticPowerRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiastaticPowerRangeType.ProtoReflect.Descriptor instead.
func (*DiastaticPowerRangeType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{58}
}

func (x *DiastaticPowerRangeType) GetMinimum() *DiastaticPowerType {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *DiastaticPowerRangeType) GetMaximum() *DiastaticPowerType {
	if x != nil {
		return x.Maximum
	}
	return nil
}

type SpecificVolumeRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *SpecificVolumeType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum *SpecificVolumeType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *SpecificVolumeRangeType) Reset() {
	*x = SpecificVolumeRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecificVolumeRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecificVolumeRangeType) ProtoMessage() {}

func (x *SpecificVolumeRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecificVolumeRangeType.ProtoReflect.Descriptor instead.
func (*SpecificVolumeRangeType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{59}
}

func (x *SpecificVolumeRangeType) GetMinimum() *SpecificVolumeType {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *SpecificVolumeRangeType) GetMaximum() *SpecificVolumeType {
	if x != nil {
		return x.Maximum
	}
	return nil
}

type AcidityRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum *AcidityType `protobuf:"bytes,1,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum *AcidityType `protobuf:"bytes,2,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *AcidityRangeType) Reset() {
	*x = AcidityRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_beer_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcidityRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcidityRangeType) ProtoMessage() {}

func (x *AcidityRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_beer_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcidityRangeType.ProtoReflect.Descriptor instead.
func (*AcidityRangeType) Descriptor() ([]byte, []int) {
	return file_beer_proto_rawDescGZIP(), []int{60}
}

func (x *AcidityRangeType) GetMinimum() *AcidityType {
	if x != nil {
		return x.Minimum
	}
	return nil
}

func (x *AcidityRangeType) GetMaximum() *AcidityType {
	if x != nil {
		return x.Maximum
	}
	return nil
}

var File_beer_proto protoreflect.FileDescriptor

var file_beer_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x62, 0x65, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc8, 0x06, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x6d, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x6d, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x19, 0x6d, 0x69, 0x73,
	0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c,
	0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x18, 0x6d, 0x69, 0x73, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30,
	0x0a, 0x04, 0x62, 0x6f, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x69, 0x6c, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x69, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x66, 0x65,
	0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x72,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x66, 0x65,
	0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x74, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x75, 0x6c, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x63, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x38, 0x0a, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x0d,
	0x68, 0x6f, 0x70, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x68, 0x6f, 0x70, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x30, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57,
	0x61, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x11, 0x4d, 0x61, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x69,
	0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x10, 0x67, 0x72, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x6d, 0x61, 0x73, 0x68, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x73, 0x68, 0x53, 0x74, 0x65, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x73, 0x68, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xba, 0x06, 0x0a, 0x0c, 0x4d, 0x61, 0x73, 0x68, 0x53, 0x74, 0x65, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x74,
	0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x72, 0x61, 0x6d, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x72, 0x61, 0x6d, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65,
	0x6e, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x49, 0x0a, 0x12, 0x69, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x70, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x68, 0x12, 0x2d, 0x0a,
	0x06, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x50, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x73, 0x68, 0x53,
	0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x61, 0x73, 0x68, 0x53, 0x74, 0x65, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a,
	0x10, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x65, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x61, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f,
	0x77, 0x61, 0x74, 0x65, 0x72, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22,
	0x8e, 0x01, 0x0a, 0x10, 0x4d, 0x61, 0x73, 0x68, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x49, 0x4e, 0x46, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x44, 0x45, 0x43, 0x4f, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x4f, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x53, 0x48, 0x10, 0x04, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x4f, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x4f, 0x52, 0x54, 0x10, 0x05,
	0x12, 0x12, 0x0a, 0x0e, 0x44, 0x52, 0x41, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x53, 0x48, 0x5f, 0x54,
	0x55, 0x4e, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x50, 0x41, 0x52, 0x47, 0x45, 0x10, 0x07,
	0x22, 0x9d, 0x01, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x45, 0x0a, 0x0c, 0x54, 0x69, 0x6d,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x45, 0x43, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x4d, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x48, 0x52, 0x10, 0x03, 0x12, 0x07, 0x0a,
	0x03, 0x44, 0x41, 0x59, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x05,
	0x22, 0x53, 0x0a, 0x0b, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x57, 0x0a, 0x0d, 0x56, 0x69, 0x73, 0x63, 0x6f, 0x73, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x73, 0x63, 0x6f, 0x73, 0x69, 0x74, 0x79,
	0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x80,
	0x02, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0xa1, 0x01,
	0x0a, 0x0e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x4c,
	0x10, 0x01, 0x12, 0x05, 0x0a, 0x01, 0x4c, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x53, 0x50,
	0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x42, 0x53, 0x50, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x4c, 0x4f, 0x5a, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x55, 0x50, 0x10, 0x06, 0x12,
	0x06, 0x0a, 0x02, 0x50, 0x54, 0x10, 0x07, 0x12, 0x06, 0x0a, 0x02, 0x51, 0x54, 0x10, 0x08, 0x12,
	0x07, 0x0a, 0x03, 0x47, 0x41, 0x4c, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x42, 0x4c, 0x10,
	0x0a, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x46, 0x4f, 0x5a, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x49,
	0x50, 0x54, 0x10, 0x0c, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x51, 0x54, 0x10, 0x0d, 0x12, 0x08, 0x0a,
	0x04, 0x49, 0x47, 0x41, 0x4c, 0x10, 0x0e, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x42, 0x42, 0x4c, 0x10,
	0x0f, 0x22, 0xea, 0x01, 0x0a, 0x12, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x48,
	0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x74, 0x0a, 0x16, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x51, 0x54, 0x4c, 0x42, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x41, 0x4c, 0x4c, 0x42, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x41, 0x4c, 0x4f, 0x5a, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02,
	0x4c, 0x47, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4b, 0x47, 0x10, 0x05, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x4c, 0x4f, 0x5a, 0x4f, 0x5a, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x33, 0x4b,
	0x47, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x54, 0x33, 0x4c, 0x42, 0x10, 0x08, 0x22, 0xf0,
	0x0a, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x69, 0x62,
	0x75, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x42, 0x55,
	0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x69, 0x62,
	0x75, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x62, 0x65, 0x65, 0x72, 0x5f, 0x70,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x62, 0x65, 0x65, 0x72, 0x50, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x12, 0x41, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x67, 0x72,
	0x61, 0x76, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x47, 0x72, 0x61,
	0x76, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x67, 0x72,
	0x61, 0x76, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0c, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61,
	0x73, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x6d, 0x61, 0x73, 0x68, 0x12, 0x3f, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x6f, 0x69, 0x6c, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x74,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x73, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74,
	0x61, 0x73, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x63, 0x61, 0x6c, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x50, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x11, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f,
	0x6c, 0x5f, 0x62, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x61, 0x6c, 0x63, 0x6f, 0x68,
	0x6f, 0x6c, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x14, 0x61, 0x70,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x13, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x55, 0x4c, 0x4c,
	0x5f, 0x52, 0x45, 0x43, 0x49, 0x50, 0x45, 0x54, 0x59, 0x50, 0x45, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x49, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x4b, 0x4f, 0x4d, 0x42, 0x55, 0x43, 0x48, 0x41, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4f,
	0x44, 0x41, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x12,
	0x08, 0x0a, 0x04, 0x4d, 0x45, 0x41, 0x44, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x49, 0x4e,
	0x45, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x07,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x53, 0x48,
	0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4c, 0x4c, 0x5f, 0x47, 0x52, 0x41, 0x49, 0x4e, 0x10,
	0x09, 0x22, 0xda, 0x01, 0x0a, 0x0e, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x06,
	0x6c, 0x61, 0x75, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x75, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x04,
	0x6d, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x09, 0x62, 0x72, 0x65, 0x77,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x62, 0x72, 0x65, 0x77, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x22, 0xe7,
	0x02, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x22,
	0x77, 0x0a, 0x0f, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x42, 0x45, 0x45, 0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x49, 0x44, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x4f, 0x4d, 0x42, 0x55, 0x43, 0x48, 0x41, 0x10, 0x03, 0x12,
	0x08, 0x0a, 0x04, 0x4d, 0x45, 0x41, 0x44, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4f, 0x44,
	0x41, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x49, 0x4e, 0x45, 0x10, 0x06, 0x12, 0x09, 0x0a,
	0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x22, 0xab, 0x01, 0x0a, 0x0f, 0x49, 0x42, 0x55,
	0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x42, 0x55, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x42, 0x55, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x56,
	0x0a, 0x0d, 0x49, 0x42, 0x55, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x12, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x49, 0x42, 0x55, 0x4d, 0x45, 0x54, 0x48, 0x4f,
	0x44, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x41, 0x47, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4e, 0x53, 0x45, 0x54, 0x48, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x47, 0x41, 0x52, 0x45, 0x54, 0x5a, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x22, 0x9e, 0x03, 0x0a, 0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x17, 0x6d, 0x69,
	0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61,
	0x6e, 0x65, 0x6f, 0x75, 0x73, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x16, 0x6d, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x63, 0x75, 0x6c,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x63, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x74, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x77,
	0x61, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a,
	0x15, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x14, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x68, 0x6f, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x70, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x68, 0x6f, 0x70, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf0, 0x02, 0x0a, 0x19, 0x4d, 0x69, 0x73, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69,
	0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x42, 0x61, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6d, 0x61, 0x73,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x6d, 0x61, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12,
	0x2f, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4d, 0x0a, 0x08, 0x4d, 0x61,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x4d, 0x0a, 0x08, 0x55, 0x6e, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0xa5, 0x04, 0x0a, 0x13, 0x43, 0x75, 0x6c,
	0x74, 0x75, 0x72, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2e, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x6c, 0x74, 0x75,
	0x72, 0x65, 0x42, 0x61, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6d,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x63, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x63, 0x75, 0x6c,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12,
	0x29, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xab, 0x02, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x27, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x10, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x02,
	0x70, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x02, 0x70, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x24, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x75, 0x73, 0x65, 0x22, 0xb2,
	0x06, 0x0a, 0x11, 0x57, 0x61, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x75, 0x72, 0x69, 0x64, 0x65, 0x12, 0x36,
	0x0a, 0x07, 0x73, 0x75, 0x6c, 0x66, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73,
	0x75, 0x6c, 0x66, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x6e, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x6e, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x6e, 0x69,
	0x74, 0x72, 0x69, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6e, 0x69, 0x74, 0x72, 0x69,
	0x74, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x68, 0x6c, 0x6f, 0x72, 0x69, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x63, 0x68, 0x6c, 0x6f, 0x72, 0x69, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x59, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3a, 0x0a, 0x09, 0x70, 0x6f, 0x74, 0x61, 0x73, 0x73, 0x69, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x70, 0x6f, 0x74, 0x61, 0x73, 0x73, 0x69, 0x75, 0x6d, 0x12, 0x3a, 0x0a, 0x09, 0x6d,
	0x61, 0x67, 0x6e, 0x65, 0x73, 0x69, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61,
	0x67, 0x6e, 0x65, 0x73, 0x69, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x72, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x69, 0x72, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x62, 0x69, 0x63,
	0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x62, 0x69,
	0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x61, 0x6c,
	0x63, 0x69, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x63, 0x69, 0x75,
	0x6d, 0x12, 0x3a, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a,
	0x06, 0x73, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x64,
	0x69, 0x75, 0x6d, 0x22, 0x5f, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34,
	0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x22, 0xe9, 0x03, 0x0a, 0x17, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x72, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x0b,
	0x67, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72,
	0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x69, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x05, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x59, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x79, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x2a, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x74,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x04, 0x6d, 0x61,
	0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x6d, 0x61, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x81, 0x02, 0x0a, 0x09, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35,
	0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x67, 0x72, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x65,
	0x47, 0x72, 0x69, 0x6e, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x63, 0x6f, 0x61, 0x72, 0x73, 0x65, 0x5f,
	0x67, 0x72, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x61, 0x72, 0x73, 0x65, 0x47, 0x72, 0x69, 0x6e, 0x64,
	0x12, 0x4c, 0x0a, 0x16, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x61, 0x72, 0x73, 0x65, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x66, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x61, 0x72, 0x73, 0x65, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x34,
	0x0a, 0x09, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72,
	0x61, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x6f, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x22, 0xd0, 0x03, 0x0a, 0x0f, 0x48, 0x6f, 0x70, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x61,
	0x5f, 0x61, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x62, 0x65, 0x74, 0x61, 0x41, 0x63, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x31, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x48, 0x6f, 0x70, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x42, 0x61, 0x73, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x5f, 0x61, 0x63, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x41, 0x63, 0x69,
	0x64, 0x12, 0x29, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x39, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x22, 0x9c, 0x02, 0x0a, 0x11, 0x4d, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e,
	0x65, 0x6f, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x46, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x42, 0x61,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x09,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x73, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x22, 0xad, 0x01, 0x0a, 0x1a, 0x4d, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65,
	0x6f, 0x75, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x29, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x87, 0x08, 0x0a, 0x09, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x72, 0x6f, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x72, 0x6f, 0x6d, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x66, 0x65, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x74, 0x68, 0x66, 0x65, 0x65, 0x6c, 0x12, 0x40, 0x0a, 0x0d,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12,
	0x2f, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x46, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x61,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x62,
	0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x62, 0x6f, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x11, 0x61,
	0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x5f, 0x62, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0f, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x42, 0x79, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x64, 0x0a, 0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x69, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x1c, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70,
	0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x69,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x77, 0x0a, 0x0f, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x54,
	0x59, 0x4c, 0x45, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x42, 0x45, 0x45, 0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x49, 0x44,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x4f, 0x4d, 0x42, 0x55, 0x43, 0x48, 0x41,
	0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x45, 0x41, 0x44, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x4f, 0x44, 0x41, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x49, 0x4e, 0x45, 0x10, 0x06,
	0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x22, 0x7f, 0x0a, 0x13, 0x42,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x69, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0x92, 0x01, 0x0a,
	0x0e, 0x42, 0x69, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x69, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x42,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x28, 0x0a, 0x12, 0x42, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x42, 0x55, 0x53, 0x10,
	0x01, 0x22, 0x76, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0x8e, 0x01, 0x0a, 0x0b, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x3a, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x2d, 0x0a, 0x0f, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x45, 0x52, 0x43,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x10, 0x01, 0x22, 0x76, 0x0a, 0x10, 0x47, 0x72,
	0x61, 0x76, 0x69, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30,
	0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x12, 0x30, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72,
	0x61, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x22, 0x53, 0x0a, 0x0b, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x70, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0x4f, 0x0a, 0x09, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x55, 0x6e, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x43,
	0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22,
	0x5b, 0x0a, 0x0f, 0x43, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0xc7, 0x01, 0x0a,
	0x19, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x4e, 0x0a, 0x12, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x72, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x11, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65,
	0x70, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa9, 0x04, 0x0a, 0x14, 0x46, 0x65, 0x72, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x70,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x73, 0x74, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72,
	0x65, 0x65, 0x5f, 0x72, 0x69, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66,
	0x72, 0x65, 0x65, 0x52, 0x69, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x47, 0x72, 0x61,
	0x76, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x72, 0x61, 0x76,
	0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x12, 0x31, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x68,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x65,
	0x6e, 0x64, 0x5f, 0x70, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x50, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65,
	0x73, 0x73, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x73, 0x73,
	0x65, 0x6c, 0x22, 0x94, 0x02, 0x0a, 0x11, 0x42, 0x6f, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x5f,
	0x62, 0x6f, 0x69, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x42, 0x6f, 0x69, 0x6c, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x62, 0x6f, 0x69, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x62, 0x6f, 0x69,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x62, 0x6f, 0x69, 0x6c, 0x5f, 0x73, 0x74,
	0x65, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x69, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x62, 0x6f, 0x69, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0xe8, 0x04, 0x0a, 0x0c, 0x42, 0x6f,
	0x69, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x65, 0x6e,
	0x64, 0x5f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x47, 0x72, 0x61, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x0d, 0x63, 0x68, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x69, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x63, 0x68, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x72, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x61,
	0x6d, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x73, 0x74, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x47, 0x72,
	0x61, 0x76, 0x69, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70,
	0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x68, 0x12, 0x2d, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x65, 0x6e, 0x64, 0x50, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0xe1, 0x0a, 0x0a, 0x0f, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f,
	0x69, 0x6e, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x73, 0x68, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0b, 0x67, 0x72,
	0x61, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x69,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x2a, 0x0a, 0x05, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x59, 0x69,
	0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x32,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x61, 0x6d, 0x79, 0x6c, 0x61, 0x73, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x41, 0x6d, 0x79, 0x6c,
	0x61, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x64, 0x69, 0x61, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x64, 0x69, 0x61,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x6d,
	0x6f, 0x69, 0x73, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6d, 0x6f, 0x69, 0x73, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x6f,
	0x6c, 0x62, 0x61, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x6b, 0x6f, 0x6c, 0x62, 0x61, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x2e, 0x0a, 0x06, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x79, 0x12,
	0x2c, 0x0a, 0x05, 0x70, 0x6c, 0x75, 0x6d, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x70, 0x6c, 0x75, 0x6d, 0x70, 0x12, 0x2a, 0x0a,
	0x04, 0x68, 0x61, 0x6c, 0x66, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x68, 0x61, 0x6c, 0x66, 0x12, 0x2c, 0x0a, 0x05, 0x6d, 0x65, 0x61,
	0x6c, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x6d, 0x65, 0x61, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x68, 0x72, 0x75, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x68, 0x72, 0x75, 0x12, 0x36, 0x0a, 0x0a, 0x66, 0x72, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x66, 0x72, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x64,
	0x69, 0x5f, 0x70, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x64, 0x69, 0x50, 0x68, 0x12, 0x36, 0x0a, 0x09, 0x76, 0x69, 0x73, 0x63,
	0x6f, 0x73, 0x69, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x73, 0x63, 0x6f, 0x73, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x69, 0x73, 0x63, 0x6f, 0x73, 0x69, 0x74, 0x79,
	0x12, 0x31, 0x0a, 0x05, 0x64, 0x6d, 0x73, 0x5f, 0x70, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x64,
	0x6d, 0x73, 0x50, 0x12, 0x2e, 0x0a, 0x03, 0x66, 0x61, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03,
	0x66, 0x61, 0x6e, 0x12, 0x3e, 0x0a, 0x0e, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0e, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0b, 0x62, 0x65, 0x74, 0x61, 0x5f, 0x67, 0x6c, 0x75, 0x63,
	0x61, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x65, 0x74, 0x61, 0x47, 0x6c, 0x75, 0x63,
	0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x18, 0x46, 0x65, 0x72,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73,
	0x12, 0x2f, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x61, 0x0a, 0x12, 0x44,
	0x69, 0x61, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x69, 0x61, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0xe9,
	0x05, 0x0a, 0x12, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x42, 0x61, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x52,
	0x04, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x12, 0x4c, 0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x6f,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72,
	0x12, 0x3d, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x5f, 0x74, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x54, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x6c, 0x75, 0x63, 0x6f,
	0x61, 0x6d, 0x79, 0x6c, 0x61, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x67,
	0x6c, 0x75, 0x63, 0x6f, 0x61, 0x6d, 0x79, 0x6c, 0x61, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x66,
	0x6c, 0x6f, 0x63, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x63, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x48, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x65, 0x75, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x52, 0x65, 0x75, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x66, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x70, 0x6f, 0x66, 0x12, 0x2f, 0x0a, 0x08, 0x7a, 0x79, 0x6d,
	0x6f, 0x63, 0x69, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x5a, 0x79, 0x6d, 0x6f, 0x63, 0x69, 0x64, 0x65,
	0x52, 0x08, 0x7a, 0x79, 0x6d, 0x6f, 0x63, 0x69, 0x64, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22,
	0x5b, 0x0a, 0x0f, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x70, 0x0a, 0x08,
	0x5a, 0x79, 0x6d, 0x6f, 0x63, 0x69, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x6f, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6e, 0x6f, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x6f,
	0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6e, 0x6f, 0x32, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x32, 0x38, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x6f, 0x32, 0x38,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x6c, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x6b, 0x6c, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x22, 0xca,
	0x01, 0x0a, 0x14, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x6c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x03, 0x64, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x64, 0x72, 0x79, 0x12, 0x2b, 0x0a,
	0x05, 0x73, 0x6c, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x75,
	0x6c, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x63, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x0d,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x45, 0x0a, 0x0f, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x49, 0x0a, 0x14, 0x62, 0x72, 0x65, 0x77,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13,
	0x62, 0x72, 0x65, 0x77, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x63, 0x79, 0x22, 0xa5, 0x06, 0x0a, 0x11, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x42, 0x0a, 0x12, 0x62, 0x6f, 0x69, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0f, 0x62, 0x6f, 0x69, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x48,
	0x6f, 0x75, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x48, 0x0a, 0x15, 0x64,
	0x72, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x12, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x5f, 0x68, 0x65, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x48, 0x65, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x48, 0x65, 0x61, 0x74, 0x12, 0x51, 0x0a, 0x15, 0x67, 0x72, 0x61, 0x69, 0x6e,
	0x5f, 0x61, 0x62, 0x73, 0x6f, 0x72, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x67, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x62, 0x73, 0x6f,
	0x72, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c,
	0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x6f, 0x73,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x6c, 0x6f, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x8c, 0x01, 0x0a,
	0x11, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x48, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x53, 0x48, 0x5f, 0x54, 0x55,
	0x4e, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x41, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x55,
	0x4e, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x52, 0x45, 0x57, 0x5f, 0x4b, 0x45, 0x54, 0x54,
	0x4c, 0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x45, 0x52, 0x4d, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x45, 0x53,
	0x53, 0x45, 0x4c, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x49,
	0x4e, 0x47, 0x5f, 0x56, 0x45, 0x53, 0x53, 0x45, 0x4c, 0x10, 0x07, 0x22, 0x5d, 0x0a, 0x10, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48, 0x65, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48, 0x65, 0x61, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x81, 0x02, 0x0a, 0x16, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x4b, 0x0a, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x22, 0xf0,
	0x06, 0x0a, 0x13, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x73, 0x73,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x56, 0x65,
	0x73, 0x73, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x76,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x73, 0x74, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f,
	0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x3a, 0x0a, 0x0d, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x70, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a,
	0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x68,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x65, 0x6e, 0x64, 0x50, 0x68, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x17, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x50,
	0x41, 0x43, 0x4b, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x56, 0x45, 0x53, 0x53, 0x45, 0x4c, 0x54, 0x59,
	0x50, 0x45, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x45, 0x47, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x43, 0x41, 0x53, 0x4b, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x41, 0x4e, 0x4b, 0x10,
	0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x49, 0x52, 0x4b, 0x49, 0x4e, 0x10, 0x05, 0x12, 0x09, 0x0a,
	0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x41, 0x4e, 0x10,
	0x07, 0x22, 0xad, 0x06, 0x0a, 0x12, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x70, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x34, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a,
	0x0b, 0x6f, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f,
	0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0c, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x4c, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x61, 0x63, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x41, 0x63, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x62, 0x65,
	0x74, 0x61, 0x5f, 0x61, 0x63, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x62, 0x65, 0x74, 0x61, 0x41, 0x63, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x12, 0x31, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x70, 0x56,
	0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x42, 0x61, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x04,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x56, 0x61, 0x72, 0x69, 0x65,
	0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x45, 0x54,
	0x59, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x52, 0x4f, 0x4d, 0x41, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x42, 0x49, 0x54, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x52, 0x4f, 0x4d,
	0x41, 0x5f, 0x42, 0x49, 0x54, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x14, 0x0a,
	0x10, 0x42, 0x49, 0x54, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4c, 0x41, 0x56, 0x4f,
	0x52, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x52, 0x4f, 0x4d, 0x41, 0x5f, 0x46, 0x4c, 0x41,
	0x56, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x52, 0x4f, 0x4d, 0x41, 0x5f, 0x42,
	0x49, 0x54, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x10,
	0x07, 0x22, 0x78, 0x0a, 0x10, 0x48, 0x6f, 0x70, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x61, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73,
	0x12, 0x2f, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf5, 0x05, 0x0a, 0x0e,
	0x4f, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38,
	0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x6f, 0x6c,
	0x79, 0x70, 0x68, 0x65, 0x6e, 0x6f, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x6f, 0x69, 0x6c, 0x5f, 0x6d, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x31, 0x30, 0x30,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x69,
	0x6c, 0x4d, 0x6c, 0x50, 0x65, 0x72, 0x31, 0x30, 0x30, 0x67, 0x12, 0x34, 0x0a, 0x09, 0x66, 0x61,
	0x72, 0x6e, 0x65, 0x73, 0x65, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x66, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x65, 0x6e, 0x65,
	0x12, 0x32, 0x0a, 0x08, 0x6c, 0x69, 0x6d, 0x6f, 0x6e, 0x65, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x6d, 0x6f,
	0x6e, 0x65, 0x6e, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x6e, 0x65, 0x72, 0x6f, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6e, 0x65, 0x72,
	0x6f, 0x6c, 0x12, 0x32, 0x0a, 0x08, 0x67, 0x65, 0x72, 0x61, 0x6e, 0x69, 0x6f, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x67, 0x65,
	0x72, 0x61, 0x6e, 0x69, 0x6f, 0x6c, 0x12, 0x31, 0x0a, 0x08, 0x62, 0x5f, 0x70, 0x69, 0x6e, 0x65,
	0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x62, 0x50, 0x69, 0x6e, 0x65, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x69, 0x6e,
	0x61, 0x6c, 0x6f, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x61, 0x6c, 0x6f, 0x6f, 0x6c, 0x12, 0x3c, 0x0a,
	0x0d, 0x63, 0x61, 0x72, 0x79, 0x6f, 0x70, 0x68, 0x79, 0x6c, 0x6c, 0x65, 0x6e, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63, 0x61,
	0x72, 0x79, 0x6f, 0x70, 0x68, 0x79, 0x6c, 0x6c, 0x65, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x63,
	0x6f, 0x68, 0x75, 0x6d, 0x75, 0x6c, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x68, 0x75, 0x6d, 0x75, 0x6c,
	0x6f, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x78, 0x61, 0x6e, 0x74, 0x68, 0x6f, 0x68, 0x75, 0x6d,
	0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x78, 0x61, 0x6e, 0x74, 0x68, 0x6f, 0x68, 0x75, 0x6d, 0x6f, 0x6c, 0x12, 0x32, 0x0a,
	0x08, 0x68, 0x75, 0x6d, 0x75, 0x6c, 0x65, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x68, 0x75, 0x6d, 0x75, 0x6c, 0x65, 0x6e,
	0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x79, 0x72, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x79, 0x72, 0x63,
	0x65, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x65, 0x6e, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x70, 0x69, 0x6e,
	0x65, 0x6e, 0x65, 0x22, 0xfb, 0x05, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x63, 0x69, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x63, 0x61, 0x6c, 0x63, 0x69, 0x75, 0x6d, 0x12, 0x36, 0x0a, 0x07, 0x6e, 0x69, 0x74,
	0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65,
	0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x74,
	0x65, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x68, 0x6c, 0x6f, 0x72, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x63, 0x68, 0x6c, 0x6f, 0x72, 0x69, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3a, 0x0a, 0x09, 0x70, 0x6f, 0x74, 0x61, 0x73, 0x73, 0x69, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x70, 0x6f, 0x74, 0x61, 0x73, 0x73, 0x69, 0x75, 0x6d, 0x12, 0x3a, 0x0a, 0x09, 0x63,
	0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x61,
	0x72, 0x62, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x72, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x69, 0x72, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x66, 0x6c, 0x6f,
	0x75, 0x72, 0x69, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x75, 0x72,
	0x69, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x75, 0x6c, 0x66, 0x61, 0x74, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x73, 0x75, 0x6c, 0x66, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6d,
	0x61, 0x67, 0x6e, 0x65, 0x73, 0x69, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61,
	0x67, 0x6e, 0x65, 0x73, 0x69, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x62, 0x69, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x61,
	0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x62, 0x69, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e,
	0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x6e, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x6e, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73,
	0x6f, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x65,
	0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x64, 0x69, 0x75,
	0x6d, 0x22, 0x8b, 0x01, 0x0a, 0x17, 0x44, 0x69, 0x61, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a,
	0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22,
	0x8b, 0x01, 0x0a, 0x17, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62,
	0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0x76, 0x0a,
	0x10, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x2a, 0x33, 0x0a, 0x0f, 0x41, 0x63, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x55, 0x4c, 0x4c,
	0x5f, 0x41, 0x43, 0x49, 0x44, 0x49, 0x54, 0x59, 0x55, 0x4e, 0x49, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x48, 0x10, 0x01, 0x2a, 0x41, 0x0a, 0x11, 0x56, 0x69,
	0x73, 0x63, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x56, 0x49, 0x53, 0x43, 0x4f, 0x53, 0x49, 0x54,
	0x59, 0x55, 0x4e, 0x49, 0x54, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x43,
	0x50, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x50, 0x41, 0x53, 0x10, 0x02, 0x2a, 0x4c, 0x0a,
	0x0c, 0x4d, 0x61, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x4d, 0x41, 0x53, 0x53, 0x55, 0x4e, 0x49, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x47, 0x10, 0x01, 0x12, 0x05, 0x0a, 0x01,
	0x47, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x4b, 0x47, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x4c,
	0x42, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x5a, 0x10, 0x05, 0x2a, 0x5e, 0x0a, 0x0c, 0x55,
	0x6e, 0x69, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4e,
	0x55, 0x4c, 0x4c, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x55, 0x4e, 0x49, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x55,
	0x4e, 0x49, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x41, 0x43, 0x48, 0x10, 0x03, 0x12,
	0x11, 0x0a, 0x0d, 0x44, 0x49, 0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x4c, 0x45, 0x53, 0x53,
	0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x4b, 0x47, 0x10, 0x05, 0x2a, 0x63, 0x0a, 0x0f, 0x43,
	0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x42, 0x61, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x18,
	0x0a, 0x14, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x43, 0x55, 0x4c, 0x54, 0x55, 0x52, 0x45, 0x42, 0x41,
	0x53, 0x45, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x49, 0x51, 0x55,
	0x49, 0x44, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x52, 0x59, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x53, 0x4c, 0x41, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x55, 0x4c, 0x54,
	0x55, 0x52, 0x45, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x45, 0x47, 0x53, 0x10, 0x05,
	0x2a, 0xe1, 0x01, 0x0a, 0x0f, 0x43, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x43, 0x55, 0x4c,
	0x54, 0x55, 0x52, 0x45, 0x42, 0x41, 0x53, 0x45, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x41, 0x43, 0x54, 0x45,
	0x52, 0x49, 0x41, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x52, 0x45, 0x54, 0x54, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x41, 0x47, 0x4e, 0x45, 0x10, 0x04, 0x12,
	0x09, 0x0a, 0x05, 0x4b, 0x56, 0x45, 0x49, 0x4b, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x41,
	0x43, 0x54, 0x4f, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x41, 0x47, 0x45, 0x52, 0x10, 0x07,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x4c, 0x4f, 0x4c, 0x41, 0x43, 0x54, 0x49, 0x43, 0x10, 0x08,
	0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x43, 0x55, 0x4c, 0x54, 0x55, 0x52,
	0x45, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x75, 0x6c,
	0x74, 0x75, 0x72, 0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0a, 0x12, 0x09,
	0x0a, 0x05, 0x50, 0x45, 0x44, 0x49, 0x4f, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x50, 0x4f,
	0x4e, 0x54, 0x41, 0x4e, 0x45, 0x4f, 0x55, 0x53, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x49,
	0x4e, 0x45, 0x10, 0x0d, 0x2a, 0x6a, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x55, 0x53, 0x45, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x44, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x53, 0x48,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x44, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x4f, 0x49,
	0x4c, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x44, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x46, 0x45,
	0x52, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e,
	0x41, 0x44, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x04,
	0x2a, 0x52, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x55, 0x4c,
	0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x4e, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x55,
	0x4e, 0x49, 0x54, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x50, 0x4d,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x50, 0x42, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4d,
	0x47, 0x4c, 0x10, 0x03, 0x2a, 0x74, 0x0a, 0x15, 0x4d, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61,
	0x6e, 0x65, 0x6f, 0x75, 0x73, 0x42, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x50, 0x49, 0x43, 0x45,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x57, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12,
	0x08, 0x0a, 0x04, 0x48, 0x45, 0x52, 0x42, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x4c, 0x41,
	0x56, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x4f, 0x4f, 0x44, 0x10, 0x06, 0x12,
	0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x2a, 0x48, 0x0a, 0x0f, 0x47, 0x72,
	0x61, 0x76, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x14, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x47, 0x52, 0x41, 0x56, 0x49, 0x54, 0x59, 0x55, 0x4e, 0x49,
	0x54, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x47, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x50, 0x4c, 0x41, 0x54, 0x4f, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x52,
	0x49, 0x58, 0x10, 0x03, 0x2a, 0x43, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x55, 0x6e, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x43, 0x4f,
	0x4c, 0x4f, 0x52, 0x55, 0x4e, 0x49, 0x54, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x45, 0x42, 0x43, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x56, 0x49, 0x10, 0x02,
	0x12, 0x07, 0x0a, 0x03, 0x53, 0x52, 0x4d, 0x10, 0x03, 0x2a, 0x3d, 0x0a, 0x13, 0x43, 0x61, 0x72,
	0x62, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x43, 0x41, 0x52, 0x42, 0x4f, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x55, 0x4e, 0x49, 0x54, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x56, 0x4f, 0x4c, 0x53, 0x10, 0x01, 0x2a, 0x54, 0x0a, 0x18, 0x42, 0x6f, 0x69, 0x6c,
	0x53, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x42, 0x4f, 0x49,
	0x4c, 0x53, 0x54, 0x45, 0x50, 0x54, 0x59, 0x50, 0x45, 0x43, 0x48, 0x49, 0x4c, 0x4c, 0x49, 0x4e,
	0x47, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x41, 0x54, 0x43, 0x48,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x2a, 0xa7,
	0x01, 0x0a, 0x13, 0x46, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x46,
	0x45, 0x52, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x42, 0x41, 0x53, 0x45, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x54, 0x52,
	0x41, 0x43, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x41, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x09, 0x0a,
	0x05, 0x53, 0x55, 0x47, 0x41, 0x52, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x52, 0x55, 0x49,
	0x54, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x4a, 0x55, 0x49, 0x43, 0x45, 0x10, 0x06, 0x12, 0x09,
	0x0a, 0x05, 0x48, 0x4f, 0x4e, 0x45, 0x59, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x5f, 0x46, 0x45, 0x52, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x42, 0x41,
	0x53, 0x45, 0x54, 0x59, 0x50, 0x45, 0x10, 0x08, 0x2a, 0x79, 0x0a, 0x0a, 0x47, 0x72, 0x61, 0x69,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x47,
	0x52, 0x41, 0x49, 0x4e, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42,
	0x41, 0x53, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x4c,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x4c, 0x41, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x52, 0x4f, 0x41, 0x53, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x54, 0x59, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4d,
	0x4f, 0x4b, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x44, 0x4a, 0x55, 0x4e, 0x43,
	0x54, 0x10, 0x07, 0x2a, 0x4e, 0x0a, 0x16, 0x44, 0x69, 0x61, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x1b, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x44, 0x49, 0x41, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x50,
	0x4f, 0x57, 0x45, 0x52, 0x55, 0x4e, 0x49, 0x54, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x4c, 0x49, 0x4e, 0x54, 0x4e, 0x45, 0x52, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x57,
	0x4b, 0x10, 0x02, 0x2a, 0x92, 0x01, 0x0a, 0x14, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19,
	0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x52, 0x41, 0x4e, 0x47, 0x45, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x5f, 0x4c, 0x4f, 0x57,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x04, 0x12, 0x0f,
	0x0a, 0x0b, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x05, 0x12,
	0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x45, 0x52,
	0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x07, 0x2a, 0x41, 0x0a, 0x13, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x18, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x55, 0x52, 0x45, 0x55, 0x4e, 0x49, 0x54, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x05, 0x0a,
	0x01, 0x43, 0x10, 0x01, 0x12, 0x05, 0x0a, 0x01, 0x46, 0x10, 0x02, 0x2a, 0x56, 0x0a, 0x14, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48, 0x65, 0x61, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x43, 0x48, 0x45, 0x41, 0x54, 0x55, 0x4e, 0x49, 0x54, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x41, 0x4c, 0x47, 0x43, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x4a, 0x4b, 0x47, 0x4b, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x54, 0x55, 0x4c, 0x42,
	0x46, 0x10, 0x03, 0x2a, 0x8a, 0x01, 0x0a, 0x12, 0x48, 0x6f, 0x70, 0x56, 0x61, 0x72, 0x69, 0x65,
	0x74, 0x79, 0x42, 0x61, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x55,
	0x4c, 0x4c, 0x5f, 0x48, 0x4f, 0x50, 0x56, 0x41, 0x52, 0x49, 0x45, 0x54, 0x59, 0x42, 0x41, 0x53,
	0x45, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x58, 0x54, 0x52, 0x41,
	0x43, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x56, 0x41, 0x52, 0x49, 0x45, 0x54, 0x59, 0x42, 0x41, 0x53,
	0x45, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x41, 0x46, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x45, 0x41, 0x46, 0x57, 0x45, 0x54, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x45, 0x4c, 0x4c, 0x45, 0x54, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4f,
	0x57, 0x44, 0x45, 0x52, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4c, 0x55, 0x47, 0x10, 0x06,
	0x42, 0x5a, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x50, 0x01, 0x5a, 0x21, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x62, 0x65, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x67, 0x6f, 0xf8,
	0x01, 0x01, 0xa2, 0x02, 0x02, 0x42, 0x50, 0xaa, 0x02, 0x12, 0x42, 0x65, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_beer_proto_rawDescOnce sync.Once
	file_beer_proto_rawDescData = file_beer_proto_rawDesc
)

func file_beer_proto_rawDescGZIP() []byte {
	file_beer_proto_rawDescOnce.Do(func() {
		file_beer_proto_rawDescData = protoimpl.X.CompressGZIP(file_beer_proto_rawDescData)
	})
	return file_beer_proto_rawDescData
}

var file_beer_proto_enumTypes = make([]protoimpl.EnumInfo, 33)
var file_beer_proto_msgTypes = make([]protoimpl.MessageInfo, 61)
var file_beer_proto_goTypes = []interface{}{
	(AcidityUnitType)(0),                             // 0: beerproto.AcidityUnitType
	(ViscosityUnitType)(0),                           // 1: beerproto.ViscosityUnitType
	(MassUnitType)(0),                                // 2: beerproto.MassUnitType
	(UnitUnitType)(0),                                // 3: beerproto.UnitUnitType
	(CultureBaseForm)(0),                             // 4: beerproto.CultureBaseForm
	(CultureBaseType)(0),                             // 5: beerproto.CultureBaseType
	(UseType)(0),                                     // 6: beerproto.UseType
	(ConcentrationUnitType)(0),                       // 7: beerproto.ConcentrationUnitType
	(MiscellaneousBaseType)(0),                       // 8: beerproto.MiscellaneousBaseType
	(GravityUnitType)(0),                             // 9: beerproto.GravityUnitType
	(ColorUnitType)(0),                               // 10: beerproto.ColorUnitType
	(CarbonationUnitType)(0),                         // 11: beerproto.CarbonationUnitType
	(BoilStepTypeChillingType)(0),                    // 12: beerproto.BoilStepTypeChillingType
	(FermentableBaseType)(0),                         // 13: beerproto.FermentableBaseType
	(GrainGroup)(0),                                  // 14: beerproto.GrainGroup
	(DiastaticPowerUnitType)(0),                      // 15: beerproto.DiastaticPowerUnitType
	(QualitativeRangeType)(0),                        // 16: beerproto.QualitativeRangeType
	(TemperatureUnitType)(0),                         // 17: beerproto.TemperatureUnitType
	(SpecificHeatUnitType)(0),                        // 18: beerproto.SpecificHeatUnitType
	(HopVarietyBaseForm)(0),                          // 19: beerproto.HopVarietyBaseForm
	(MashStepType_MashStepTypeType)(0),               // 20: beerproto.MashStepType.MashStepTypeType
	(TimeType_TimeUnitType)(0),                       // 21: beerproto.TimeType.TimeUnitType
	(VolumeType_VolumeUnitType)(0),                   // 22: beerproto.VolumeType.VolumeUnitType
	(SpecificVolumeType_SpecificVolumeUnitType)(0),   // 23: beerproto.SpecificVolumeType.SpecificVolumeUnitType
	(RecipeType_RecipeTypeType)(0),                   // 24: beerproto.RecipeType.RecipeTypeType
	(RecipeStyleType_StyleCategories)(0),             // 25: beerproto.RecipeStyleType.StyleCategories
	(IBUEstimateType_IBUMethodType)(0),               // 26: beerproto.IBUEstimateType.IBUMethodType
	(StyleType_StyleCategories)(0),                   // 27: beerproto.StyleType.StyleCategories
	(BitternessType_BitternessUnitType)(0),           // 28: beerproto.BitternessType.BitternessUnitType
	(PercentType_PercentUnitType)(0),                 // 29: beerproto.PercentType.PercentUnitType
	(EquipmentItemType_EquipmentBaseForm)(0),         // 30: beerproto.EquipmentItemType.EquipmentBaseForm
	(PackagingVesselType_PackagingVesselTypeType)(0), // 31: beerproto.PackagingVesselType.PackagingVesselTypeType
	(VarietyInformation_VarietyInformationType)(0),   // 32: beerproto.VarietyInformation.VarietyInformationType
	(*Recipe)(nil),                                   // 33: beerproto.Recipe
	(*MashProcedureType)(nil),                        // 34: beerproto.MashProcedureType
	(*MashStepType)(nil),                             // 35: beerproto.MashStepType
	(*TimeType)(nil),                                 // 36: beerproto.TimeType
	(*AcidityType)(nil),                              // 37: beerproto.AcidityType
	(*ViscosityType)(nil),                            // 38: beerproto.ViscosityType
	(*VolumeType)(nil),                               // 39: beerproto.VolumeType
	(*SpecificVolumeType)(nil),                       // 40: beerproto.SpecificVolumeType
	(*RecipeType)(nil),                               // 41: beerproto.RecipeType
	(*EfficiencyType)(nil),                           // 42: beerproto.EfficiencyType
	(*RecipeStyleType)(nil),                          // 43: beerproto.RecipeStyleType
	(*IBUEstimateType)(nil),                          // 44: beerproto.IBUEstimateType
	(*IngredientsType)(nil),                          // 45: beerproto.IngredientsType
	(*MiscellaneousAdditionType)(nil),                // 46: beerproto.MiscellaneousAdditionType
	(*MassType)(nil),                                 // 47: beerproto.MassType
	(*UnitType)(nil),                                 // 48: beerproto.UnitType
	(*CultureAdditionType)(nil),                      // 49: beerproto.CultureAdditionType
	(*TimingType)(nil),                               // 50: beerproto.TimingType
	(*WaterAdditionType)(nil),                        // 51: beerproto.WaterAdditionType
	(*ConcentrationType)(nil),                        // 52: beerproto.ConcentrationType
	(*FermentableAdditionType)(nil),                  // 53: beerproto.FermentableAdditionType
	(*YieldType)(nil),                                // 54: beerproto.YieldType
	(*HopAdditionType)(nil),                          // 55: beerproto.HopAdditionType
	(*TasteType)(nil),                                // 56: beerproto.TasteType
	(*MiscellaneousType)(nil),                        // 57: beerproto.MiscellaneousType
	(*MiscellaneousInventoryType)(nil),               // 58: beerproto.MiscellaneousInventoryType
	(*StyleType)(nil),                                // 59: beerproto.StyleType
	(*BitternessRangeType)(nil),                      // 60: beerproto.BitternessRangeType
	(*BitternessType)(nil),                           // 61: beerproto.BitternessType
	(*PercentRangeType)(nil),                         // 62: beerproto.PercentRangeType
	(*PercentType)(nil),                              // 63: beerproto.PercentType
	(*GravityRangeType)(nil),                         // 64: beerproto.GravityRangeType
	(*GravityType)(nil),                              // 65: beerproto.GravityType
	(*ColorRangeType)(nil),                           // 66: beerproto.ColorRangeType
	(*ColorType)(nil),                                // 67: beerproto.ColorType
	(*CarbonationRangeType)(nil),                     // 68: beerproto.CarbonationRangeType
	(*CarbonationType)(nil),                          // 69: beerproto.CarbonationType
	(*FermentationProcedureType)(nil),                // 70: beerproto.FermentationProcedureType
	(*FermentationStepType)(nil),                     // 71: beerproto.FermentationStepType
	(*BoilProcedureType)(nil),                        // 72: beerproto.BoilProcedureType
	(*BoilStepType)(nil),                             // 73: beerproto.BoilStepType
	(*FermentableType)(nil),                          // 74: beerproto.FermentableType
	(*FermentableInventoryType)(nil),                 // 75: beerproto.FermentableInventoryType
	(*DiastaticPowerType)(nil),                       // 76: beerproto.DiastaticPowerType
	(*CultureInformation)(nil),                       // 77: beerproto.CultureInformation
	(*TemperatureRangeType)(nil),                     // 78: beerproto.TemperatureRangeType
	(*TemperatureType)(nil),                          // 79: beerproto.TemperatureType
	(*Zymocide)(nil),                                 // 80: beerproto.Zymocide
	(*CultureInventoryType)(nil),                     // 81: beerproto.CultureInventoryType
	(*EquipmentType)(nil),                            // 82: beerproto.EquipmentType
	(*EquipmentItemType)(nil),                        // 83: beerproto.EquipmentItemType
	(*SpecificHeatType)(nil),                         // 84: beerproto.SpecificHeatType
	(*PackagingProcedureType)(nil),                   // 85: beerproto.PackagingProcedureType
	(*PackagingVesselType)(nil),                      // 86: beerproto.PackagingVesselType
	(*VarietyInformation)(nil),                       // 87: beerproto.VarietyInformation
	(*HopInventoryType)(nil),                         // 88: beerproto.HopInventoryType
	(*OilContentType)(nil),                           // 89: beerproto.OilContentType
	(*WaterBase)(nil),                                // 90: beerproto.WaterBase
	(*DiastaticPowerRangeType)(nil),                  // 91: beerproto.DiastaticPowerRangeType
	(*SpecificVolumeRangeType)(nil),                  // 92: beerproto.SpecificVolumeRangeType
	(*AcidityRangeType)(nil),                         // 93: beerproto.AcidityRangeType
}
var file_beer_proto_depIdxs = []int32{
	34,  // 0: beerproto.Recipe.mashes:type_name -> beerproto.MashProcedureType
	41,  // 1: beerproto.Recipe.recipes:type_name -> beerproto.RecipeType
	57,  // 2: beerproto.Recipe.miscellaneous_ingredients:type_name -> beerproto.MiscellaneousType
	59,  // 3: beerproto.Recipe.styles:type_name -> beerproto.StyleType
	70,  // 4: beerproto.Recipe.fermentations:type_name -> beerproto.FermentationProcedureType
	72,  // 5: beerproto.Recipe.boil:type_name -> beerproto.BoilProcedureType
	74,  // 6: beerproto.Recipe.fermentables:type_name -> beerproto.FermentableType
	50,  // 7: beerproto.Recipe.timing_object:type_name -> beerproto.TimingType
	77,  // 8: beerproto.Recipe.cultures:type_name -> beerproto.CultureInformation
	82,  // 9: beerproto.Recipe.equipments:type_name -> beerproto.EquipmentType
	85,  // 10: beerproto.Recipe.packaging:type_name -> beerproto.PackagingProcedureType
	87,  // 11: beerproto.Recipe.hop_varieties:type_name -> beerproto.VarietyInformation
	90,  // 12: beerproto.Recipe.profiles:type_name -> beerproto.WaterBase
	79,  // 13: beerproto.MashProcedureType.grain_temperature:type_name -> beerproto.TemperatureType
	35,  // 14: beerproto.MashProcedureType.mash_steps:type_name -> beerproto.MashStepType
	36,  // 15: beerproto.MashStepType.step_time:type_name -> beerproto.TimeType
	36,  // 16: beerproto.MashStepType.ramp_time:type_name -> beerproto.TimeType
	79,  // 17: beerproto.MashStepType.end_temperature:type_name -> beerproto.TemperatureType
	79,  // 18: beerproto.MashStepType.infuse_temperature:type_name -> beerproto.TemperatureType
	37,  // 19: beerproto.MashStepType.start_ph:type_name -> beerproto.AcidityType
	37,  // 20: beerproto.MashStepType.end_ph:type_name -> beerproto.AcidityType
	20,  // 21: beerproto.MashStepType.type:type_name -> beerproto.MashStepType.MashStepTypeType
	39,  // 22: beerproto.MashStepType.amount:type_name -> beerproto.VolumeType
	79,  // 23: beerproto.MashStepType.step_temperature:type_name -> beerproto.TemperatureType
	40,  // 24: beerproto.MashStepType.water_grain_ratio:type_name -> beerproto.SpecificVolumeType
	21,  // 25: beerproto.TimeType.unit:type_name -> beerproto.TimeType.TimeUnitType
	0,   // 26: beerproto.AcidityType.unit:type_name -> beerproto.AcidityUnitType
	1,   // 27: beerproto.ViscosityType.unit:type_name -> beerproto.ViscosityUnitType
	22,  // 28: beerproto.VolumeType.unit:type_name -> beerproto.VolumeType.VolumeUnitType
	23,  // 29: beerproto.SpecificVolumeType.unit:type_name -> beerproto.SpecificVolumeType.SpecificVolumeUnitType
	42,  // 30: beerproto.RecipeType.efficiency:type_name -> beerproto.EfficiencyType
	43,  // 31: beerproto.RecipeType.style:type_name -> beerproto.RecipeStyleType
	44,  // 32: beerproto.RecipeType.ibu_estimate:type_name -> beerproto.IBUEstimateType
	67,  // 33: beerproto.RecipeType.color_estimate:type_name -> beerproto.ColorType
	37,  // 34: beerproto.RecipeType.beer_ph:type_name -> beerproto.AcidityType
	24,  // 35: beerproto.RecipeType.type:type_name -> beerproto.RecipeType.RecipeTypeType
	65,  // 36: beerproto.RecipeType.original_gravity:type_name -> beerproto.GravityType
	65,  // 37: beerproto.RecipeType.final_gravity:type_name -> beerproto.GravityType
	70,  // 38: beerproto.RecipeType.fermentation:type_name -> beerproto.FermentationProcedureType
	45,  // 39: beerproto.RecipeType.ingredients:type_name -> beerproto.IngredientsType
	34,  // 40: beerproto.RecipeType.mash:type_name -> beerproto.MashProcedureType
	85,  // 41: beerproto.RecipeType.packaging:type_name -> beerproto.PackagingProcedureType
	72,  // 42: beerproto.RecipeType.boil:type_name -> beerproto.BoilProcedureType
	56,  // 43: beerproto.RecipeType.taste:type_name -> beerproto.TasteType
	39,  // 44: beerproto.RecipeType.batch_size:type_name -> beerproto.VolumeType
	63,  // 45: beerproto.RecipeType.alcohol_by_volume:type_name -> beerproto.PercentType
	63,  // 46: beerproto.RecipeType.apparent_attenuation:type_name -> beerproto.PercentType
	63,  // 47: beerproto.EfficiencyType.conversion:type_name -> beerproto.PercentType
	63,  // 48: beerproto.EfficiencyType.lauter:type_name -> beerproto.PercentType
	63,  // 49: beerproto.EfficiencyType.mash:type_name -> beerproto.PercentType
	63,  // 50: beerproto.EfficiencyType.brewhouse:type_name -> beerproto.PercentType
	25,  // 51: beerproto.RecipeStyleType.type:type_name -> beerproto.RecipeStyleType.StyleCategories
	26,  // 52: beerproto.IBUEstimateType.method:type_name -> beerproto.IBUEstimateType.IBUMethodType
	46,  // 53: beerproto.IngredientsType.miscellaneous_additions:type_name -> beerproto.MiscellaneousAdditionType
	49,  // 54: beerproto.IngredientsType.culture_additions:type_name -> beerproto.CultureAdditionType
	51,  // 55: beerproto.IngredientsType.water_additions:type_name -> beerproto.WaterAdditionType
	53,  // 56: beerproto.IngredientsType.fermentable_additions:type_name -> beerproto.FermentableAdditionType
	55,  // 57: beerproto.IngredientsType.hop_additions:type_name -> beerproto.HopAdditionType
	50,  // 58: beerproto.MiscellaneousAdditionType.timing:type_name -> beerproto.TimingType
	8,   // 59: beerproto.MiscellaneousAdditionType.type:type_name -> beerproto.MiscellaneousBaseType
	47,  // 60: beerproto.MiscellaneousAdditionType.mass:type_name -> beerproto.MassType
	48,  // 61: beerproto.MiscellaneousAdditionType.unit:type_name -> beerproto.UnitType
	39,  // 62: beerproto.MiscellaneousAdditionType.volume:type_name -> beerproto.VolumeType
	2,   // 63: beerproto.MassType.unit:type_name -> beerproto.MassUnitType
	3,   // 64: beerproto.UnitType.unit:type_name -> beerproto.UnitUnitType
	4,   // 65: beerproto.CultureAdditionType.form:type_name -> beerproto.CultureBaseForm
	5,   // 66: beerproto.CultureAdditionType.type:type_name -> beerproto.CultureBaseType
	63,  // 67: beerproto.CultureAdditionType.attenuation:type_name -> beerproto.PercentType
	50,  // 68: beerproto.CultureAdditionType.timing:type_name -> beerproto.TimingType
	47,  // 69: beerproto.CultureAdditionType.mass:type_name -> beerproto.MassType
	48,  // 70: beerproto.CultureAdditionType.unit:type_name -> beerproto.UnitType
	39,  // 71: beerproto.CultureAdditionType.volume:type_name -> beerproto.VolumeType
	36,  // 72: beerproto.TimingType.time:type_name -> beerproto.TimeType
	36,  // 73: beerproto.TimingType.duration:type_name -> beerproto.TimeType
	65,  // 74: beerproto.TimingType.specific_gravity:type_name -> beerproto.GravityType
	37,  // 75: beerproto.TimingType.ph:type_name -> beerproto.AcidityType
	6,   // 76: beerproto.TimingType.use:type_name -> beerproto.UseType
	52,  // 77: beerproto.WaterAdditionType.flouride:type_name -> beerproto.ConcentrationType
	52,  // 78: beerproto.WaterAdditionType.sulfate:type_name -> beerproto.ConcentrationType
	52,  // 79: beerproto.WaterAdditionType.nitrate:type_name -> beerproto.ConcentrationType
	52,  // 80: beerproto.WaterAdditionType.nitrite:type_name -> beerproto.ConcentrationType
	52,  // 81: beerproto.WaterAdditionType.chloride:type_name -> beerproto.ConcentrationType
	39,  // 82: beerproto.WaterAdditionType.amount:type_name -> beerproto.VolumeType
	52,  // 83: beerproto.WaterAdditionType.potassium:type_name -> beerproto.ConcentrationType
	52,  // 84: beerproto.WaterAdditionType.magnesium:type_name -> beerproto.ConcentrationType
	52,  // 85: beerproto.WaterAdditionType.iron:type_name -> beerproto.ConcentrationType
	52,  // 86: beerproto.WaterAdditionType.bicarbonate:type_name -> beerproto.ConcentrationType
	52,  // 87: beerproto.WaterAdditionType.calcium:type_name -> beerproto.ConcentrationType
	52,  // 88: beerproto.WaterAdditionType.carbonate:type_name -> beerproto.ConcentrationType
	52,  // 89: beerproto.WaterAdditionType.sodium:type_name -> beerproto.ConcentrationType
	7,   // 90: beerproto.ConcentrationType.unit:type_name -> beerproto.ConcentrationUnitType
	13,  // 91: beerproto.FermentableAdditionType.type:type_name -> beerproto.FermentableBaseType
	14,  // 92: beerproto.FermentableAdditionType.grain_group:type_name -> beerproto.GrainGroup
	54,  // 93: beerproto.FermentableAdditionType.yield:type_name -> beerproto.YieldType
	67,  // 94: beerproto.FermentableAdditionType.color:type_name -> beerproto.ColorType
	50,  // 95: beerproto.FermentableAdditionType.timing:type_name -> beerproto.TimingType
	47,  // 96: beerproto.FermentableAdditionType.mass:type_name -> beerproto.MassType
	39,  // 97: beerproto.FermentableAdditionType.volume:type_name -> beerproto.VolumeType
	63,  // 98: beerproto.YieldType.fine_grind:type_name -> beerproto.PercentType
	63,  // 99: beerproto.YieldType.coarse_grind:type_name -> beerproto.PercentType
	63,  // 100: beerproto.YieldType.fine_coarse_difference:type_name -> beerproto.PercentType
	65,  // 101: beerproto.YieldType.potential:type_name -> beerproto.GravityType
	63,  // 102: beerproto.HopAdditionType.beta_acid:type_name -> beerproto.PercentType
	19,  // 103: beerproto.HopAdditionType.form:type_name -> beerproto.HopVarietyBaseForm
	50,  // 104: beerproto.HopAdditionType.timing:type_name -> beerproto.TimingType
	63,  // 105: beerproto.HopAdditionType.alpha_acid:type_name -> beerproto.PercentType
	47,  // 106: beerproto.HopAdditionType.mass:type_name -> beerproto.MassType
	39,  // 107: beerproto.HopAdditionType.volume:type_name -> beerproto.VolumeType
	8,   // 108: beerproto.MiscellaneousType.type:type_name -> beerproto.MiscellaneousBaseType
	58,  // 109: beerproto.MiscellaneousType.inventory:type_name -> beerproto.MiscellaneousInventoryType
	47,  // 110: beerproto.MiscellaneousInventoryType.mass:type_name -> beerproto.MassType
	48,  // 111: beerproto.MiscellaneousInventoryType.unit:type_name -> beerproto.UnitType
	39,  // 112: beerproto.MiscellaneousInventoryType.volume:type_name -> beerproto.VolumeType
	64,  // 113: beerproto.StyleType.final_gravity:type_name -> beerproto.GravityRangeType
	66,  // 114: beerproto.StyleType.color:type_name -> beerproto.ColorRangeType
	64,  // 115: beerproto.StyleType.original_gravity:type_name -> beerproto.GravityRangeType
	68,  // 116: beerproto.StyleType.carbonation:type_name -> beerproto.CarbonationRangeType
	62,  // 117: beerproto.StyleType.alcohol_by_volume:type_name -> beerproto.PercentRangeType
	60,  // 118: beerproto.StyleType.international_bitterness_units:type_name -> beerproto.BitternessRangeType
	27,  // 119: beerproto.StyleType.type:type_name -> beerproto.StyleType.StyleCategories
	61,  // 120: beerproto.BitternessRangeType.minimum:type_name -> beerproto.BitternessType
	61,  // 121: beerproto.BitternessRangeType.maximum:type_name -> beerproto.BitternessType
	28,  // 122: beerproto.BitternessType.unit:type_name -> beerproto.BitternessType.BitternessUnitType
	63,  // 123: beerproto.PercentRangeType.minimum:type_name -> beerproto.PercentType
	63,  // 124: beerproto.PercentRangeType.maximum:type_name -> beerproto.PercentType
	29,  // 125: beerproto.PercentType.unit:type_name -> beerproto.PercentType.PercentUnitType
	65,  // 126: beerproto.GravityRangeType.minimum:type_name -> beerproto.GravityType
	65,  // 127: beerproto.GravityRangeType.maximum:type_name -> beerproto.GravityType
	9,   // 128: beerproto.GravityType.unit:type_name -> beerproto.GravityUnitType
	67,  // 129: beerproto.ColorRangeType.minimum:type_name -> beerproto.ColorType
	67,  // 130: beerproto.ColorRangeType.maximum:type_name -> beerproto.ColorType
	10,  // 131: beerproto.ColorType.unit:type_name -> beerproto.ColorUnitType
	69,  // 132: beerproto.CarbonationRangeType.minimum:type_name -> beerproto.CarbonationType
	69,  // 133: beerproto.CarbonationRangeType.maximum:type_name -> beerproto.CarbonationType
	11,  // 134: beerproto.CarbonationType.unit:type_name -> beerproto.CarbonationUnitType
	71,  // 135: beerproto.FermentationProcedureType.fermentation_steps:type_name -> beerproto.FermentationStepType
	79,  // 136: beerproto.FermentationStepType.end_temperature:type_name -> beerproto.TemperatureType
	36,  // 137: beerproto.FermentationStepType.step_time:type_name -> beerproto.TimeType
	65,  // 138: beerproto.FermentationStepType.start_gravity:type_name -> beerproto.GravityType
	65,  // 139: beerproto.FermentationStepType.end_gravity:type_name -> beerproto.GravityType
	37,  // 140: beerproto.FermentationStepType.start_ph:type_name -> beerproto.AcidityType
	79,  // 141: beerproto.FermentationStepType.start_temperature:type_name -> beerproto.TemperatureType
	37,  // 142: beerproto.FermentationStepType.end_ph:type_name -> beerproto.AcidityType
	39,  // 143: beerproto.BoilProcedureType.pre_boil_size:type_name -> beerproto.VolumeType
	36,  // 144: beerproto.BoilProcedureType.boil_time:type_name -> beerproto.TimeType
	73,  // 145: beerproto.BoilProcedureType.boil_steps:type_name -> beerproto.BoilStepType
	65,  // 146: beerproto.BoilStepType.end_gravity:type_name -> beerproto.GravityType
	12,  // 147: beerproto.BoilStepType.chilling_type:type_name -> beerproto.BoilStepTypeChillingType
	79,  // 148: beerproto.BoilStepType.end_temperature:type_name -> beerproto.TemperatureType
	36,  // 149: beerproto.BoilStepType.ramp_time:type_name -> beerproto.TimeType
	36,  // 150: beerproto.BoilStepType.step_time:type_name -> beerproto.TimeType
	65,  // 151: beerproto.BoilStepType.start_gravity:type_name -> beerproto.GravityType
	37,  // 152: beerproto.BoilStepType.start_ph:type_name -> beerproto.AcidityType
	37,  // 153: beerproto.BoilStepType.end_ph:type_name -> beerproto.AcidityType
	79,  // 154: beerproto.BoilStepType.start_temperature:type_name -> beerproto.TemperatureType
	63,  // 155: beerproto.FermentableType.max_in_batch:type_name -> beerproto.PercentType
	63,  // 156: beerproto.FermentableType.protein:type_name -> beerproto.PercentType
	14,  // 157: beerproto.FermentableType.grain_group:type_name -> beerproto.GrainGroup
	54,  // 158: beerproto.FermentableType.yield:type_name -> beerproto.YieldType
	13,  // 159: beerproto.FermentableType.type:type_name -> beerproto.FermentableBaseType
	67,  // 160: beerproto.FermentableType.color:type_name -> beerproto.ColorType
	76,  // 161: beerproto.FermentableType.diastatic_power:type_name -> beerproto.DiastaticPowerType
	63,  // 162: beerproto.FermentableType.moisture:type_name -> beerproto.PercentType
	75,  // 163: beerproto.FermentableType.inventory:type_name -> beerproto.FermentableInventoryType
	63,  // 164: beerproto.FermentableType.glassy:type_name -> beerproto.PercentType
	63,  // 165: beerproto.FermentableType.plump:type_name -> beerproto.PercentType
	63,  // 166: beerproto.FermentableType.half:type_name -> beerproto.PercentType
	63,  // 167: beerproto.FermentableType.mealy:type_name -> beerproto.PercentType
	63,  // 168: beerproto.FermentableType.thru:type_name -> beerproto.PercentType
	63,  // 169: beerproto.FermentableType.friability:type_name -> beerproto.PercentType
	37,  // 170: beerproto.FermentableType.di_ph:type_name -> beerproto.AcidityType
	38,  // 171: beerproto.FermentableType.viscosity:type_name -> beerproto.ViscosityType
	52,  // 172: beerproto.FermentableType.dms_p:type_name -> beerproto.ConcentrationType
	52,  // 173: beerproto.FermentableType.fan:type_name -> beerproto.ConcentrationType
	63,  // 174: beerproto.FermentableType.fermentability:type_name -> beerproto.PercentType
	52,  // 175: beerproto.FermentableType.beta_glucan:type_name -> beerproto.ConcentrationType
	47,  // 176: beerproto.FermentableInventoryType.mass:type_name -> beerproto.MassType
	39,  // 177: beerproto.FermentableInventoryType.volume:type_name -> beerproto.VolumeType
	15,  // 178: beerproto.DiastaticPowerType.unit:type_name -> beerproto.DiastaticPowerUnitType
	4,   // 179: beerproto.CultureInformation.form:type_name -> beerproto.CultureBaseForm
	78,  // 180: beerproto.CultureInformation.temperature_range:type_name -> beerproto.TemperatureRangeType
	81,  // 181: beerproto.CultureInformation.inventory:type_name -> beerproto.CultureInventoryType
	63,  // 182: beerproto.CultureInformation.alcohol_tolerance:type_name -> beerproto.PercentType
	5,   // 183: beerproto.CultureInformation.type:type_name -> beerproto.CultureBaseType
	16,  // 184: beerproto.CultureInformation.flocculation:type_name -> beerproto.QualitativeRangeType
	62,  // 185: beerproto.CultureInformation.attenuation_range:type_name -> beerproto.PercentRangeType
	80,  // 186: beerproto.CultureInformation.zymocide:type_name -> beerproto.Zymocide
	79,  // 187: beerproto.TemperatureRangeType.minimum:type_name -> beerproto.TemperatureType
	79,  // 188: beerproto.TemperatureRangeType.maximum:type_name -> beerproto.TemperatureType
	17,  // 189: beerproto.TemperatureType.unit:type_name -> beerproto.TemperatureUnitType
	39,  // 190: beerproto.CultureInventoryType.liquid:type_name -> beerproto.VolumeType
	47,  // 191: beerproto.CultureInventoryType.dry:type_name -> beerproto.MassType
	39,  // 192: beerproto.CultureInventoryType.slant:type_name -> beerproto.VolumeType
	39,  // 193: beerproto.CultureInventoryType.culture:type_name -> beerproto.VolumeType
	83,  // 194: beerproto.EquipmentType.equipment_items:type_name -> beerproto.EquipmentItemType
	63,  // 195: beerproto.EquipmentType.brewhouse_efficiency:type_name -> beerproto.PercentType
	39,  // 196: beerproto.EquipmentItemType.boil_rate_per_hour:type_name -> beerproto.VolumeType
	30,  // 197: beerproto.EquipmentItemType.form:type_name -> beerproto.EquipmentItemType.EquipmentBaseForm
	39,  // 198: beerproto.EquipmentItemType.drain_rate_per_minute:type_name -> beerproto.VolumeType
	84,  // 199: beerproto.EquipmentItemType.specific_heat:type_name -> beerproto.SpecificHeatType
	40,  // 200: beerproto.EquipmentItemType.grain_absorption_rate:type_name -> beerproto.SpecificVolumeType
	39,  // 201: beerproto.EquipmentItemType.maximum_volume:type_name -> beerproto.VolumeType
	47,  // 202: beerproto.EquipmentItemType.weight:type_name -> beerproto.MassType
	39,  // 203: beerproto.EquipmentItemType.loss:type_name -> beerproto.VolumeType
	63,  // 204: beerproto.EquipmentItemType.efficiency:type_name -> beerproto.PercentType
	18,  // 205: beerproto.SpecificHeatType.unit:type_name -> beerproto.SpecificHeatUnitType
	39,  // 206: beerproto.PackagingProcedureType.packaged_volume:type_name -> beerproto.VolumeType
	86,  // 207: beerproto.PackagingProcedureType.packaging_vessels:type_name -> beerproto.PackagingVesselType
	31,  // 208: beerproto.PackagingVesselType.type:type_name -> beerproto.PackagingVesselType.PackagingVesselTypeType
	65,  // 209: beerproto.PackagingVesselType.start_gravity:type_name -> beerproto.GravityType
	36,  // 210: beerproto.PackagingVesselType.step_time:type_name -> beerproto.TimeType
	65,  // 211: beerproto.PackagingVesselType.end_gravity:type_name -> beerproto.GravityType
	39,  // 212: beerproto.PackagingVesselType.vessel_volume:type_name -> beerproto.VolumeType
	37,  // 213: beerproto.PackagingVesselType.start_ph:type_name -> beerproto.AcidityType
	79,  // 214: beerproto.PackagingVesselType.start_temperature:type_name -> beerproto.TemperatureType
	37,  // 215: beerproto.PackagingVesselType.end_ph:type_name -> beerproto.AcidityType
	79,  // 216: beerproto.PackagingVesselType.end_temperature:type_name -> beerproto.TemperatureType
	88,  // 217: beerproto.VarietyInformation.inventory:type_name -> beerproto.HopInventoryType
	32,  // 218: beerproto.VarietyInformation.type:type_name -> beerproto.VarietyInformation.VarietyInformationType
	89,  // 219: beerproto.VarietyInformation.oil_content:type_name -> beerproto.OilContentType
	63,  // 220: beerproto.VarietyInformation.percent_lost:type_name -> beerproto.PercentType
	63,  // 221: beerproto.VarietyInformation.alpha_acid:type_name -> beerproto.PercentType
	63,  // 222: beerproto.VarietyInformation.beta_acid:type_name -> beerproto.PercentType
	19,  // 223: beerproto.VarietyInformation.form:type_name -> beerproto.HopVarietyBaseForm
	47,  // 224: beerproto.HopInventoryType.mass:type_name -> beerproto.MassType
	39,  // 225: beerproto.HopInventoryType.volume:type_name -> beerproto.VolumeType
	63,  // 226: beerproto.OilContentType.polyphenols:type_name -> beerproto.PercentType
	63,  // 227: beerproto.OilContentType.farnesene:type_name -> beerproto.PercentType
	63,  // 228: beerproto.OilContentType.limonene:type_name -> beerproto.PercentType
	63,  // 229: beerproto.OilContentType.nerol:type_name -> beerproto.PercentType
	63,  // 230: beerproto.OilContentType.geraniol:type_name -> beerproto.PercentType
	63,  // 231: beerproto.OilContentType.b_pinene:type_name -> beerproto.PercentType
	63,  // 232: beerproto.OilContentType.linalool:type_name -> beerproto.PercentType
	63,  // 233: beerproto.OilContentType.caryophyllene:type_name -> beerproto.PercentType
	63,  // 234: beerproto.OilContentType.cohumulone:type_name -> beerproto.PercentType
	63,  // 235: beerproto.OilContentType.xanthohumol:type_name -> beerproto.PercentType
	63,  // 236: beerproto.OilContentType.humulene:type_name -> beerproto.PercentType
	63,  // 237: beerproto.OilContentType.myrcene:type_name -> beerproto.PercentType
	63,  // 238: beerproto.OilContentType.pinene:type_name -> beerproto.PercentType
	52,  // 239: beerproto.WaterBase.calcium:type_name -> beerproto.ConcentrationType
	52,  // 240: beerproto.WaterBase.nitrite:type_name -> beerproto.ConcentrationType
	52,  // 241: beerproto.WaterBase.chloride:type_name -> beerproto.ConcentrationType
	52,  // 242: beerproto.WaterBase.potassium:type_name -> beerproto.ConcentrationType
	52,  // 243: beerproto.WaterBase.carbonate:type_name -> beerproto.ConcentrationType
	52,  // 244: beerproto.WaterBase.iron:type_name -> beerproto.ConcentrationType
	52,  // 245: beerproto.WaterBase.flouride:type_name -> beerproto.ConcentrationType
	52,  // 246: beerproto.WaterBase.sulfate:type_name -> beerproto.ConcentrationType
	52,  // 247: beerproto.WaterBase.magnesium:type_name -> beerproto.ConcentrationType
	52,  // 248: beerproto.WaterBase.bicarbonate:type_name -> beerproto.ConcentrationType
	52,  // 249: beerproto.WaterBase.nitrate:type_name -> beerproto.ConcentrationType
	52,  // 250: beerproto.WaterBase.sodium:type_name -> beerproto.ConcentrationType
	76,  // 251: beerproto.DiastaticPowerRangeType.minimum:type_name -> beerproto.DiastaticPowerType
	76,  // 252: beerproto.DiastaticPowerRangeType.maximum:type_name -> beerproto.DiastaticPowerType
	40,  // 253: beerproto.SpecificVolumeRangeType.minimum:type_name -> beerproto.SpecificVolumeType
	40,  // 254: beerproto.SpecificVolumeRangeType.maximum:type_name -> beerproto.SpecificVolumeType
	37,  // 255: beerproto.AcidityRangeType.minimum:type_name -> beerproto.AcidityType
	37,  // 256: beerproto.AcidityRangeType.maximum:type_name -> beerproto.AcidityType
	257, // [257:257] is the sub-list for method output_type
	257, // [257:257] is the sub-list for method input_type
	257, // [257:257] is the sub-list for extension type_name
	257, // [257:257] is the sub-list for extension extendee
	0,   // [0:257] is the sub-list for field type_name
}

func init() { file_beer_proto_init() }
func file_beer_proto_init() {
	if File_beer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_beer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recipe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MashProcedureType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MashStepType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcidityType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViscosityType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecificVolumeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecipeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EfficiencyType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecipeStyleType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IBUEstimateType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngredientsType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiscellaneousAdditionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MassType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CultureAdditionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimingType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaterAdditionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcentrationType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FermentableAdditionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YieldType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HopAdditionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TasteType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiscellaneousType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiscellaneousInventoryType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StyleType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitternessRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitternessType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PercentRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PercentType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravityRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GravityType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarbonationRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarbonationType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FermentationProcedureType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FermentationStepType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoilProcedureType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoilStepType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FermentableType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FermentableInventoryType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiastaticPowerType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CultureInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemperatureRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemperatureType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Zymocide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CultureInventoryType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipmentType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipmentItemType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecificHeatType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackagingProcedureType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackagingVesselType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VarietyInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HopInventoryType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OilContentType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaterBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiastaticPowerRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecificVolumeRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_beer_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcidityRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_beer_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*MiscellaneousAdditionType_Mass)(nil),
		(*MiscellaneousAdditionType_Unit)(nil),
		(*MiscellaneousAdditionType_Volume)(nil),
	}
	file_beer_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*CultureAdditionType_Mass)(nil),
		(*CultureAdditionType_Unit)(nil),
		(*CultureAdditionType_Volume)(nil),
	}
	file_beer_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*FermentableAdditionType_Mass)(nil),
		(*FermentableAdditionType_Volume)(nil),
	}
	file_beer_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*HopAdditionType_Mass)(nil),
		(*HopAdditionType_Volume)(nil),
	}
	file_beer_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*MiscellaneousInventoryType_Mass)(nil),
		(*MiscellaneousInventoryType_Unit)(nil),
		(*MiscellaneousInventoryType_Volume)(nil),
	}
	file_beer_proto_msgTypes[42].OneofWrappers = []interface{}{
		(*FermentableInventoryType_Mass)(nil),
		(*FermentableInventoryType_Volume)(nil),
	}
	file_beer_proto_msgTypes[55].OneofWrappers = []interface{}{
		(*HopInventoryType_Mass)(nil),
		(*HopInventoryType_Volume)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_beer_proto_rawDesc,
			NumEnums:      33,
			NumMessages:   61,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_beer_proto_goTypes,
		DependencyIndexes: file_beer_proto_depIdxs,
		EnumInfos:         file_beer_proto_enumTypes,
		MessageInfos:      file_beer_proto_msgTypes,
	}.Build()
	File_beer_proto = out.File
	file_beer_proto_rawDesc = nil
	file_beer_proto_goTypes = nil
	file_beer_proto_depIdxs = nil
}
